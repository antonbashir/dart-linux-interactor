// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;
import 'package:linux_interactor/interactor/bindings.dart' as linux_interactor;

@ffi.Native<
        ffi.Int Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<interactor_native_configuration>, ffi.Uint8)>(
    symbol: 'interactor_native_initialize', assetId: 'interactor-bindings-test')
external int interactor_native_initialize(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<interactor_native_configuration> configuration,
  int id,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_native>, ffi.Uint8)>(
    symbol: 'interactor_native_initialize_default',
    assetId: 'interactor-bindings-test')
external int interactor_native_initialize_default(
  ffi.Pointer<interactor_native> interactor,
  int id,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>,
            ffi.Uint64,
            ffi.Uint64,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<linux_interactor.interactor_message>)>>)>(
    symbol: 'interactor_native_register_callback',
    assetId: 'interactor-bindings-test')
external void interactor_native_register_callback(
  ffi.Pointer<interactor_native> interactor,
  int owner,
  int method,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_message>)>>
      callback,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_get_static_buffer',
    assetId: 'interactor-bindings-test')
external int interactor_native_get_static_buffer(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int32)>(
    symbol: 'interactor_native_release_static_buffer',
    assetId: 'interactor-bindings-test')
external void interactor_native_release_static_buffer(
  ffi.Pointer<interactor_native> interactor,
  int buffer_id,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_available_static_buffers',
    assetId: 'interactor-bindings-test')
external int interactor_native_available_static_buffers(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_used_static_buffers',
    assetId: 'interactor-bindings-test')
external int interactor_native_used_static_buffers(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Pointer<interactor_input_buffer> Function(
            ffi.Pointer<interactor_native>, ffi.Size)>(
    symbol: 'interactor_native_io_buffers_allocate_input',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<interactor_input_buffer>
    interactor_native_io_buffers_allocate_input(
  ffi.Pointer<interactor_native> interactor,
  int initial_capacity,
);

@ffi.Native<
        ffi.Pointer<interactor_output_buffer> Function(
            ffi.Pointer<interactor_native>, ffi.Size)>(
    symbol: 'interactor_native_io_buffers_allocate_output',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<interactor_output_buffer>
    interactor_native_io_buffers_allocate_output(
  ffi.Pointer<interactor_native> interactor,
  int initial_capacity,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<interactor_input_buffer>)>(
    symbol: 'interactor_native_io_buffers_free_input',
    assetId: 'interactor-bindings-test')
external void interactor_native_io_buffers_free_input(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<interactor_input_buffer> buffer,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<interactor_output_buffer>)>(
    symbol: 'interactor_native_io_buffers_free_output',
    assetId: 'interactor-bindings-test')
external void interactor_native_io_buffers_free_output(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<interactor_output_buffer> buffer,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_input_buffer>, ffi.Size)>(
    symbol: 'interactor_native_input_buffer_reserve',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Uint8> interactor_native_input_buffer_reserve(
  ffi.Pointer<interactor_input_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_input_buffer>, ffi.Size)>(
    symbol: 'interactor_native_input_buffer_allocate',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Uint8> interactor_native_input_buffer_allocate(
  ffi.Pointer<interactor_input_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_output_buffer>, ffi.Size)>(
    symbol: 'interactor_native_output_buffer_reserve',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Uint8> interactor_native_output_buffer_reserve(
  ffi.Pointer<interactor_output_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<interactor_output_buffer>, ffi.Size)>(
    symbol: 'interactor_native_output_buffer_allocate',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Uint8> interactor_native_output_buffer_allocate(
  ffi.Pointer<interactor_output_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<linux_interactor.interactor_message> Function(
            ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_allocate_message',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<linux_interactor.interactor_message>
    interactor_native_allocate_message(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'interactor_native_free_message',
    assetId: 'interactor-bindings-test')
external void interactor_native_free_message(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<interactor_payload_pool> Function(
            ffi.Pointer<interactor_native>, ffi.Size)>(
    symbol: 'interactor_native_payload_pool_create',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<interactor_payload_pool>
    interactor_native_payload_pool_create(
  ffi.Pointer<interactor_native> interactor,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<interactor_payload_pool>)>(
    symbol: 'interactor_native_payload_allocate',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> interactor_native_payload_allocate(
  ffi.Pointer<interactor_payload_pool> pool,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_payload_pool>, ffi.Pointer<ffi.Void>)>(
    symbol: 'interactor_native_payload_free',
    assetId: 'interactor-bindings-test')
external void interactor_native_payload_free(
  ffi.Pointer<interactor_payload_pool> pool,
  ffi.Pointer<ffi.Void> pointer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_payload_pool>)>(
    symbol: 'interactor_native_payload_pool_destroy',
    assetId: 'interactor-bindings-test')
external void interactor_native_payload_pool_destroy(
  ffi.Pointer<interactor_payload_pool> pool,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<interactor_native>, ffi.Size)>(
    symbol: 'interactor_native_data_allocate',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> interactor_native_data_allocate(
  ffi.Pointer<interactor_native> interactor,
  int size,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'interactor_native_data_free', assetId: 'interactor-bindings-test')
external void interactor_native_data_free(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<ffi.Void> pointer,
  int size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_count_ready',
    assetId: 'interactor-bindings-test')
external int interactor_native_count_ready(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_count_ready_submit',
    assetId: 'interactor-bindings-test')
external int interactor_native_count_ready_submit(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_process', assetId: 'interactor-bindings-test')
external void interactor_native_process(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_process_infinity',
    assetId: 'interactor-bindings-test')
external void interactor_native_process_infinity(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_process_timeout',
    assetId: 'interactor-bindings-test')
external void interactor_native_process_timeout(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<linux_interactor.interactor_message>)>>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<linux_interactor.interactor_message>)>>)>(
    symbol: 'interactor_native_foreach', assetId: 'interactor-bindings-test')
external void interactor_native_foreach(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_message>)>>
      call,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_message>)>>
      callback,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_submit', assetId: 'interactor-bindings-test')
external int interactor_native_submit(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int,
            ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'interactor_native_call_dart', assetId: 'interactor-bindings-test')
external void interactor_native_call_dart(
  ffi.Pointer<interactor_native> interactor,
  int target_ring_fd,
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'interactor_native_callback_to_dart',
    assetId: 'interactor-bindings-test')
external void interactor_native_callback_to_dart(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_destroy', assetId: 'interactor-bindings-test')
external void interactor_native_destroy(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'interactor_native_close_descriptor',
    assetId: 'interactor-bindings-test')
external void interactor_native_close_descriptor(
  int fd,
);

@ffi.Native<ffi.Pointer<interactor_native> Function()>(
    symbol: 'test_interactor_initialize',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external ffi.Pointer<interactor_native> test_interactor_initialize();

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'test_interactor_destroy',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_interactor_destroy(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'test_call_reset',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_reset();

@ffi.Native<ffi.Bool Function(ffi.Pointer<interactor_native>)>(
    symbol: 'test_call_native_check',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external bool test_call_native_check(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'test_call_native',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_native(
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Int32, ffi.UintPtr)>(
    symbol: 'test_call_dart_null',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_null(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Int32, ffi.UintPtr, ffi.Bool)>(
    symbol: 'test_call_dart_bool',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_bool(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  bool value,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Int32, ffi.UintPtr, ffi.Int)>(
    symbol: 'test_call_dart_int',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_int(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  int value,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int32,
            ffi.UintPtr, ffi.Double)>(
    symbol: 'test_call_dart_double',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_double(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  double value,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int32,
            ffi.UintPtr, ffi.Pointer<ffi.Char>)>(
    symbol: 'test_call_dart_string',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_string(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  ffi.Pointer<ffi.Char> value,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Int32, ffi.UintPtr, ffi.Int)>(
    symbol: 'test_call_dart_object',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_object(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  int field,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int32,
            ffi.UintPtr, ffi.Pointer<ffi.Uint8>, ffi.Size)>(
    symbol: 'test_call_dart_bytes',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_bytes(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  ffi.Pointer<ffi.Uint8> value,
  int count,
);

@ffi.Native<
        ffi.Pointer<linux_interactor.interactor_message> Function(
            ffi.Pointer<interactor_native>)>(
    symbol: 'test_call_dart_check',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external ffi.Pointer<linux_interactor.interactor_message> test_call_dart_check(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'test_call_dart_callback',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_callback(
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<ffi.IntPtr Function()>(
    symbol: 'test_call_native_address_lookup',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external int test_call_native_address_lookup();

@ffi.Native<ffi.Int Function(ffi.Size, ffi.Pointer<cpu_set_t>)>(
    symbol: '__sched_cpucount', assetId: 'interactor-bindings-test')
external int __sched_cpucount(
  int __setsize,
  ffi.Pointer<cpu_set_t> __setp,
);

@ffi.Native<ffi.Pointer<cpu_set_t> Function(ffi.Size)>(
    symbol: '__sched_cpualloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<cpu_set_t> __sched_cpualloc(
  int __count,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<cpu_set_t>)>(
    symbol: '__sched_cpufree', assetId: 'interactor-bindings-test')
external void __sched_cpufree(
  ffi.Pointer<cpu_set_t> __set,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<sched_param>)>(
    symbol: 'sched_setparam', assetId: 'interactor-bindings-test')
external int sched_setparam(
  int __pid,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<sched_param>)>(
    symbol: 'sched_getparam', assetId: 'interactor-bindings-test')
external int sched_getparam(
  int __pid,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<sched_param>)>(
    symbol: 'sched_setscheduler', assetId: 'interactor-bindings-test')
external int sched_setscheduler(
  int __pid,
  int __policy,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sched_getscheduler', assetId: 'interactor-bindings-test')
external int sched_getscheduler(
  int __pid,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'sched_yield', assetId: 'interactor-bindings-test')
external int sched_yield();

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sched_get_priority_max', assetId: 'interactor-bindings-test')
external int sched_get_priority_max(
  int __algorithm,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sched_get_priority_min', assetId: 'interactor-bindings-test')
external int sched_get_priority_min(
  int __algorithm,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<timespec>)>(
    symbol: 'sched_rr_get_interval', assetId: 'interactor-bindings-test')
external int sched_rr_get_interval(
  int __pid,
  ffi.Pointer<timespec> __t,
);

@ffi.Native<clock_t Function()>(
    symbol: 'clock', assetId: 'interactor-bindings-test')
external int clock();

@ffi.Native<time_t Function(ffi.Pointer<time_t>)>(
    symbol: 'time', assetId: 'interactor-bindings-test')
external int time(
  ffi.Pointer<time_t> __timer,
);

@ffi.Native<ffi.Double Function(time_t, time_t)>(
    symbol: 'difftime', assetId: 'interactor-bindings-test')
external double difftime(
  int __time1,
  int __time0,
);

@ffi.Native<time_t Function(ffi.Pointer<tm>)>(
    symbol: 'mktime', assetId: 'interactor-bindings-test')
external int mktime(
  ffi.Pointer<tm> __tp,
);

@ffi.Native<
        ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
            ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>(
    symbol: 'strftime', assetId: 'interactor-bindings-test')
external int strftime(
  ffi.Pointer<ffi.Char> __s,
  int __maxsize,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<tm> __tp,
);

@ffi.Native<
    ffi.Size Function(
        ffi.Pointer<ffi.Char>,
        ffi.Size,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<tm>,
        locale_t)>(symbol: 'strftime_l', assetId: 'interactor-bindings-test')
external int strftime_l(
  ffi.Pointer<ffi.Char> __s,
  int __maxsize,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<tm> __tp,
  locale_t __loc,
);

@ffi.Native<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>(
    symbol: 'gmtime', assetId: 'interactor-bindings-test')
external ffi.Pointer<tm> gmtime(
  ffi.Pointer<time_t> __timer,
);

@ffi.Native<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>(
    symbol: 'localtime', assetId: 'interactor-bindings-test')
external ffi.Pointer<tm> localtime(
  ffi.Pointer<time_t> __timer,
);

@ffi.Native<ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>(
    symbol: 'gmtime_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<tm> gmtime_r(
  ffi.Pointer<time_t> __timer,
  ffi.Pointer<tm> __tp,
);

@ffi.Native<ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>(
    symbol: 'localtime_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<tm> localtime_r(
  ffi.Pointer<time_t> __timer,
  ffi.Pointer<tm> __tp,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>(
    symbol: 'asctime', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> asctime(
  ffi.Pointer<tm> __tp,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>(
    symbol: 'ctime', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> ctime(
  ffi.Pointer<time_t> __timer,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>(
    symbol: 'asctime_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> asctime_r(
  ffi.Pointer<tm> __tp,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>(
    symbol: 'ctime_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> ctime_r(
  ffi.Pointer<time_t> __timer,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'tzset', assetId: 'interactor-bindings-test')
external void tzset();

@ffi.Native<time_t Function(ffi.Pointer<tm>)>(
    symbol: 'timegm', assetId: 'interactor-bindings-test')
external int timegm(
  ffi.Pointer<tm> __tp,
);

@ffi.Native<time_t Function(ffi.Pointer<tm>)>(
    symbol: 'timelocal', assetId: 'interactor-bindings-test')
external int timelocal(
  ffi.Pointer<tm> __tp,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'dysize', assetId: 'interactor-bindings-test')
external int dysize(
  int __year,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>(
    symbol: 'nanosleep', assetId: 'interactor-bindings-test')
external int nanosleep(
  ffi.Pointer<timespec> __requested_time,
  ffi.Pointer<timespec> __remaining,
);

@ffi.Native<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>(
    symbol: 'clock_getres', assetId: 'interactor-bindings-test')
external int clock_getres(
  int __clock_id,
  ffi.Pointer<timespec> __res,
);

@ffi.Native<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>(
    symbol: 'clock_gettime', assetId: 'interactor-bindings-test')
external int clock_gettime(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

@ffi.Native<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>(
    symbol: 'clock_settime', assetId: 'interactor-bindings-test')
external int clock_settime(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

@ffi.Native<
        ffi.Int Function(
            clockid_t, ffi.Int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>(
    symbol: 'clock_nanosleep', assetId: 'interactor-bindings-test')
external int clock_nanosleep(
  int __clock_id,
  int __flags,
  ffi.Pointer<timespec> __req,
  ffi.Pointer<timespec> __rem,
);

@ffi.Native<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>(
    symbol: 'clock_getcpuclockid', assetId: 'interactor-bindings-test')
external int clock_getcpuclockid(
  int __pid,
  ffi.Pointer<clockid_t> __clock_id,
);

@ffi.Native<
        ffi.Int Function(
            clockid_t, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>(
    symbol: 'timer_create', assetId: 'interactor-bindings-test')
external int timer_create(
  int __clock_id,
  ffi.Pointer<sigevent> __evp,
  ffi.Pointer<timer_t> __timerid,
);

@ffi.Native<ffi.Int Function(timer_t)>(
    symbol: 'timer_delete', assetId: 'interactor-bindings-test')
external int timer_delete(
  timer_t __timerid,
);

@ffi.Native<
        ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
            ffi.Pointer<itimerspec>)>(
    symbol: 'timer_settime', assetId: 'interactor-bindings-test')
external int timer_settime(
  timer_t __timerid,
  int __flags,
  ffi.Pointer<itimerspec> __value,
  ffi.Pointer<itimerspec> __ovalue,
);

@ffi.Native<ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>(
    symbol: 'timer_gettime', assetId: 'interactor-bindings-test')
external int timer_gettime(
  timer_t __timerid,
  ffi.Pointer<itimerspec> __value,
);

@ffi.Native<ffi.Int Function(timer_t)>(
    symbol: 'timer_getoverrun', assetId: 'interactor-bindings-test')
external int timer_getoverrun(
  timer_t __timerid,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>(
    symbol: 'timespec_get', assetId: 'interactor-bindings-test')
external int timespec_get(
  ffi.Pointer<timespec> __ts,
  int __base,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_t>,
            ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'pthread_create', assetId: 'interactor-bindings-test')
external int pthread_create(
  ffi.Pointer<pthread_t> __newthread,
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
      __start_routine,
  ffi.Pointer<ffi.Void> __arg,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'pthread_exit', assetId: 'interactor-bindings-test')
external void pthread_exit(
  ffi.Pointer<ffi.Void> __retval,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>(
    symbol: 'pthread_join', assetId: 'interactor-bindings-test')
external int pthread_join(
  int __th,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
);

@ffi.Native<ffi.Int Function(pthread_t)>(
    symbol: 'pthread_detach', assetId: 'interactor-bindings-test')
external int pthread_detach(
  int __th,
);

@ffi.Native<pthread_t Function()>(
    symbol: 'pthread_self', assetId: 'interactor-bindings-test')
external int pthread_self();

@ffi.Native<ffi.Int Function(pthread_t, pthread_t)>(
    symbol: 'pthread_equal', assetId: 'interactor-bindings-test')
external int pthread_equal(
  int __thread1,
  int __thread2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>(
    symbol: 'pthread_attr_init', assetId: 'interactor-bindings-test')
external int pthread_attr_init(
  ffi.Pointer<pthread_attr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>(
    symbol: 'pthread_attr_destroy', assetId: 'interactor-bindings-test')
external int pthread_attr_destroy(
  ffi.Pointer<pthread_attr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_attr_getdetachstate', assetId: 'interactor-bindings-test')
external int pthread_attr_getdetachstate(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Int> __detachstate,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>(
    symbol: 'pthread_attr_setdetachstate', assetId: 'interactor-bindings-test')
external int pthread_attr_setdetachstate(
  ffi.Pointer<pthread_attr_t> __attr,
  int __detachstate,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>(
    symbol: 'pthread_attr_getguardsize', assetId: 'interactor-bindings-test')
external int pthread_attr_getguardsize(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Size> __guardsize,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)>(
    symbol: 'pthread_attr_setguardsize', assetId: 'interactor-bindings-test')
external int pthread_attr_setguardsize(
  ffi.Pointer<pthread_attr_t> __attr,
  int __guardsize,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>(
    symbol: 'pthread_attr_getschedparam', assetId: 'interactor-bindings-test')
external int pthread_attr_getschedparam(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>(
    symbol: 'pthread_attr_setschedparam', assetId: 'interactor-bindings-test')
external int pthread_attr_setschedparam(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_attr_getschedpolicy', assetId: 'interactor-bindings-test')
external int pthread_attr_getschedpolicy(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Int> __policy,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>(
    symbol: 'pthread_attr_setschedpolicy', assetId: 'interactor-bindings-test')
external int pthread_attr_setschedpolicy(
  ffi.Pointer<pthread_attr_t> __attr,
  int __policy,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_attr_getinheritsched', assetId: 'interactor-bindings-test')
external int pthread_attr_getinheritsched(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Int> __inherit,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>(
    symbol: 'pthread_attr_setinheritsched', assetId: 'interactor-bindings-test')
external int pthread_attr_setinheritsched(
  ffi.Pointer<pthread_attr_t> __attr,
  int __inherit,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_attr_getscope', assetId: 'interactor-bindings-test')
external int pthread_attr_getscope(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Int> __scope,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>(
    symbol: 'pthread_attr_setscope', assetId: 'interactor-bindings-test')
external int pthread_attr_setscope(
  ffi.Pointer<pthread_attr_t> __attr,
  int __scope,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>(
    symbol: 'pthread_attr_getstackaddr', assetId: 'interactor-bindings-test')
external int pthread_attr_getstackaddr(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>(
    symbol: 'pthread_attr_setstackaddr', assetId: 'interactor-bindings-test')
external int pthread_attr_setstackaddr(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Void> __stackaddr,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>(
    symbol: 'pthread_attr_getstacksize', assetId: 'interactor-bindings-test')
external int pthread_attr_getstacksize(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Size> __stacksize,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)>(
    symbol: 'pthread_attr_setstacksize', assetId: 'interactor-bindings-test')
external int pthread_attr_setstacksize(
  ffi.Pointer<pthread_attr_t> __attr,
  int __stacksize,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>(
    symbol: 'pthread_attr_getstack', assetId: 'interactor-bindings-test')
external int pthread_attr_getstack(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
  ffi.Pointer<ffi.Size> __stacksize,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'pthread_attr_setstack', assetId: 'interactor-bindings-test')
external int pthread_attr_setstack(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Void> __stackaddr,
  int __stacksize,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Int, ffi.Pointer<sched_param>)>(
    symbol: 'pthread_setschedparam', assetId: 'interactor-bindings-test')
external int pthread_setschedparam(
  int __target_thread,
  int __policy,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<
        ffi.Int Function(
            pthread_t, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>(
    symbol: 'pthread_getschedparam', assetId: 'interactor-bindings-test')
external int pthread_getschedparam(
  int __target_thread,
  ffi.Pointer<ffi.Int> __policy,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Int)>(
    symbol: 'pthread_setschedprio', assetId: 'interactor-bindings-test')
external int pthread_setschedprio(
  int __target_thread,
  int __prio,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_once_t>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'pthread_once', assetId: 'interactor-bindings-test')
external int pthread_once(
  ffi.Pointer<pthread_once_t> __once_control,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __init_routine,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_setcancelstate', assetId: 'interactor-bindings-test')
external int pthread_setcancelstate(
  int __state,
  ffi.Pointer<ffi.Int> __oldstate,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_setcanceltype', assetId: 'interactor-bindings-test')
external int pthread_setcanceltype(
  int __type,
  ffi.Pointer<ffi.Int> __oldtype,
);

@ffi.Native<ffi.Int Function(pthread_t)>(
    symbol: 'pthread_cancel', assetId: 'interactor-bindings-test')
external int pthread_cancel(
  int __th,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'pthread_testcancel', assetId: 'interactor-bindings-test')
external void pthread_testcancel();

@ffi.Native<ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>(
    symbol: '__pthread_register_cancel', assetId: 'interactor-bindings-test')
external void __pthread_register_cancel(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>(
    symbol: '__pthread_unregister_cancel', assetId: 'interactor-bindings-test')
external void __pthread_unregister_cancel(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>(
    symbol: '__pthread_unwind_next', assetId: 'interactor-bindings-test')
external void __pthread_unwind_next(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<__jmp_buf_tag>, ffi.Int)>(
    symbol: '__sigsetjmp', assetId: 'interactor-bindings-test')
external int __sigsetjmp(
  ffi.Pointer<__jmp_buf_tag> __env,
  int __savemask,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>(
    symbol: 'pthread_mutex_init', assetId: 'interactor-bindings-test')
external int pthread_mutex_init(
  ffi.Pointer<pthread_mutex_t> __mutex,
  ffi.Pointer<pthread_mutexattr_t> __mutexattr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_destroy', assetId: 'interactor-bindings-test')
external int pthread_mutex_destroy(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_trylock', assetId: 'interactor-bindings-test')
external int pthread_mutex_trylock(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_lock', assetId: 'interactor-bindings-test')
external int pthread_mutex_lock(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>(
    symbol: 'pthread_mutex_timedlock', assetId: 'interactor-bindings-test')
external int pthread_mutex_timedlock(
  ffi.Pointer<pthread_mutex_t> __mutex,
  ffi.Pointer<timespec> __abstime,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_unlock', assetId: 'interactor-bindings-test')
external int pthread_mutex_unlock(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutex_getprioceiling', assetId: 'interactor-bindings-test')
external int pthread_mutex_getprioceiling(
  ffi.Pointer<pthread_mutex_t> __mutex,
  ffi.Pointer<ffi.Int> __prioceiling,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutex_t>, ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutex_setprioceiling', assetId: 'interactor-bindings-test')
external int pthread_mutex_setprioceiling(
  ffi.Pointer<pthread_mutex_t> __mutex,
  int __prioceiling,
  ffi.Pointer<ffi.Int> __old_ceiling,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_consistent', assetId: 'interactor-bindings-test')
external int pthread_mutex_consistent(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>(
    symbol: 'pthread_mutexattr_init', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_init(
  ffi.Pointer<pthread_mutexattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>(
    symbol: 'pthread_mutexattr_destroy', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_destroy(
  ffi.Pointer<pthread_mutexattr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_getpshared', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_getpshared(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __pshared,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_setpshared', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_setpshared(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __pshared,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_gettype', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_gettype(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __kind,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_settype', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_settype(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __kind,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_getprotocol',
    assetId: 'interactor-bindings-test')
external int pthread_mutexattr_getprotocol(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __protocol,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_setprotocol',
    assetId: 'interactor-bindings-test')
external int pthread_mutexattr_setprotocol(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __protocol,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_getprioceiling',
    assetId: 'interactor-bindings-test')
external int pthread_mutexattr_getprioceiling(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __prioceiling,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_setprioceiling',
    assetId: 'interactor-bindings-test')
external int pthread_mutexattr_setprioceiling(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __prioceiling,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_getrobust', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_getrobust(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __robustness,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_setrobust', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_setrobust(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __robustness,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>(
    symbol: 'pthread_rwlock_init', assetId: 'interactor-bindings-test')
external int pthread_rwlock_init(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
  ffi.Pointer<pthread_rwlockattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_destroy', assetId: 'interactor-bindings-test')
external int pthread_rwlock_destroy(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_rdlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_rdlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_tryrdlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_tryrdlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>(
    symbol: 'pthread_rwlock_timedrdlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_timedrdlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
  ffi.Pointer<timespec> __abstime,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_wrlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_wrlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_trywrlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_trywrlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>(
    symbol: 'pthread_rwlock_timedwrlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_timedwrlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
  ffi.Pointer<timespec> __abstime,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_unlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_unlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>(
    symbol: 'pthread_rwlockattr_init', assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_init(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>(
    symbol: 'pthread_rwlockattr_destroy', assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_destroy(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_rwlockattr_getpshared',
    assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_getpshared(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
  ffi.Pointer<ffi.Int> __pshared,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)>(
    symbol: 'pthread_rwlockattr_setpshared',
    assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_setpshared(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
  int __pshared,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_rwlockattr_getkind_np',
    assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_getkind_np(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
  ffi.Pointer<ffi.Int> __pref,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)>(
    symbol: 'pthread_rwlockattr_setkind_np',
    assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_setkind_np(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
  int __pref,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>(
    symbol: 'pthread_cond_init', assetId: 'interactor-bindings-test')
external int pthread_cond_init(
  ffi.Pointer<pthread_cond_t> __cond,
  ffi.Pointer<pthread_condattr_t> __cond_attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>(
    symbol: 'pthread_cond_destroy', assetId: 'interactor-bindings-test')
external int pthread_cond_destroy(
  ffi.Pointer<pthread_cond_t> __cond,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>(
    symbol: 'pthread_cond_signal', assetId: 'interactor-bindings-test')
external int pthread_cond_signal(
  ffi.Pointer<pthread_cond_t> __cond,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>(
    symbol: 'pthread_cond_broadcast', assetId: 'interactor-bindings-test')
external int pthread_cond_broadcast(
  ffi.Pointer<pthread_cond_t> __cond,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_cond_wait', assetId: 'interactor-bindings-test')
external int pthread_cond_wait(
  ffi.Pointer<pthread_cond_t> __cond,
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_cond_t>,
            ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>(
    symbol: 'pthread_cond_timedwait', assetId: 'interactor-bindings-test')
external int pthread_cond_timedwait(
  ffi.Pointer<pthread_cond_t> __cond,
  ffi.Pointer<pthread_mutex_t> __mutex,
  ffi.Pointer<timespec> __abstime,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>(
    symbol: 'pthread_condattr_init', assetId: 'interactor-bindings-test')
external int pthread_condattr_init(
  ffi.Pointer<pthread_condattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>(
    symbol: 'pthread_condattr_destroy', assetId: 'interactor-bindings-test')
external int pthread_condattr_destroy(
  ffi.Pointer<pthread_condattr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_condattr_getpshared', assetId: 'interactor-bindings-test')
external int pthread_condattr_getpshared(
  ffi.Pointer<pthread_condattr_t> __attr,
  ffi.Pointer<ffi.Int> __pshared,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_condattr_t>, ffi.Int)>(
    symbol: 'pthread_condattr_setpshared', assetId: 'interactor-bindings-test')
external int pthread_condattr_setpshared(
  ffi.Pointer<pthread_condattr_t> __attr,
  int __pshared,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_condattr_getclock', assetId: 'interactor-bindings-test')
external int pthread_condattr_getclock(
  ffi.Pointer<pthread_condattr_t> __attr,
  ffi.Pointer<ffi.Int> __clock_id,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_condattr_t>, ffi.Int)>(
    symbol: 'pthread_condattr_setclock', assetId: 'interactor-bindings-test')
external int pthread_condattr_setclock(
  ffi.Pointer<pthread_condattr_t> __attr,
  int __clock_id,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_barrier_t>,
            ffi.Pointer<pthread_barrierattr_t>, ffi.UnsignedInt)>(
    symbol: 'pthread_barrier_init', assetId: 'interactor-bindings-test')
external int pthread_barrier_init(
  ffi.Pointer<pthread_barrier_t> __barrier,
  ffi.Pointer<pthread_barrierattr_t> __attr,
  int __count,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>(
    symbol: 'pthread_barrier_destroy', assetId: 'interactor-bindings-test')
external int pthread_barrier_destroy(
  ffi.Pointer<pthread_barrier_t> __barrier,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>(
    symbol: 'pthread_barrier_wait', assetId: 'interactor-bindings-test')
external int pthread_barrier_wait(
  ffi.Pointer<pthread_barrier_t> __barrier,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>(
    symbol: 'pthread_barrierattr_init', assetId: 'interactor-bindings-test')
external int pthread_barrierattr_init(
  ffi.Pointer<pthread_barrierattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>(
    symbol: 'pthread_barrierattr_destroy', assetId: 'interactor-bindings-test')
external int pthread_barrierattr_destroy(
  ffi.Pointer<pthread_barrierattr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_barrierattr_getpshared',
    assetId: 'interactor-bindings-test')
external int pthread_barrierattr_getpshared(
  ffi.Pointer<pthread_barrierattr_t> __attr,
  ffi.Pointer<ffi.Int> __pshared,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>, ffi.Int)>(
    symbol: 'pthread_barrierattr_setpshared',
    assetId: 'interactor-bindings-test')
external int pthread_barrierattr_setpshared(
  ffi.Pointer<pthread_barrierattr_t> __attr,
  int __pshared,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_key_t>,
            ffi.Pointer<
                ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>(
    symbol: 'pthread_key_create', assetId: 'interactor-bindings-test')
external int pthread_key_create(
  ffi.Pointer<pthread_key_t> __key,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __destr_function,
);

@ffi.Native<ffi.Int Function(pthread_key_t)>(
    symbol: 'pthread_key_delete', assetId: 'interactor-bindings-test')
external int pthread_key_delete(
  int __key,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(pthread_key_t)>(
    symbol: 'pthread_getspecific', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> pthread_getspecific(
  int __key,
);

@ffi.Native<ffi.Int Function(pthread_key_t, ffi.Pointer<ffi.Void>)>(
    symbol: 'pthread_setspecific', assetId: 'interactor-bindings-test')
external int pthread_setspecific(
  int __key,
  ffi.Pointer<ffi.Void> __pointer,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_getcpuclockid', assetId: 'interactor-bindings-test')
external int pthread_getcpuclockid(
  int __thread_id,
  ffi.Pointer<ffi.Int> __clock_id,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'pthread_atfork', assetId: 'interactor-bindings-test')
external int pthread_atfork(
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __prepare,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __parent,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __child,
);

@ffi.Native<ffi.Bool Function(ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'test_threading_initialize',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external bool test_threading_initialize(
  int thread_count,
  int isolates_count,
  int per_thread_messages_count,
);

@ffi.Native<ffi.Pointer<ffi.Int> Function()>(
    symbol: 'test_threading_interactor_descriptors',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external ffi.Pointer<ffi.Int> test_threading_interactor_descriptors();

@ffi.Native<
        ffi.Void Function(ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'test_threading_call_native',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_threading_call_native(
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'test_threading_call_native_check',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external int test_threading_call_native_check();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Int32>, ffi.Int32)>(
    symbol: 'test_threading_prepare_call_dart_bytes',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_threading_prepare_call_dart_bytes(
  ffi.Pointer<ffi.Int32> targets,
  int count,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'test_threading_call_dart_check',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external int test_threading_call_dart_check();

@ffi.Native<
        ffi.Void Function(ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'test_threading_call_dart_callback',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_threading_call_dart_callback(
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'test_threading_destroy',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_threading_destroy();

@ffi.Native<ffi.IntPtr Function()>(
    symbol: 'test_threading_call_native_address_lookup',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external int test_threading_call_native_address_lookup();

final class max_align_t extends ffi.Opaque {}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class interactor_completion_event extends ffi.Struct {
  @ffi.UnsignedLongLong()
  external int user_data;

  @ffi.Int()
  external int res;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedLongLong> big_cqe;
}

final class mh_native_callbacks_t extends ffi.Opaque {}

final class io_uring extends ffi.Opaque {}

final class io_uring_cqe extends ffi.Opaque {}

final class interactor_messages_pool extends ffi.Opaque {}

final class interactor_static_buffers extends ffi.Opaque {}

final class interactor_io_buffers extends ffi.Opaque {}

final class interactor_small_data extends ffi.Opaque {}

final class interactor_memory extends ffi.Opaque {}

final class interactor_native_configuration extends ffi.Struct {
  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int preallocation_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int static_buffers_capacity;

  @ffi.Size()
  external int static_buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Int32()
  external int ring_flags;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;
}

final class interactor_native extends ffi.Struct {
  external ffi.Pointer<interactor_native_messages_pool> messages_pool;

  external ffi.Pointer<interactor_native_static_buffers> static_buffers;

  external ffi.Pointer<interactor_native_io_buffers> io_buffers;

  external ffi.Pointer<interactor_native_small_data> small_data;

  external ffi.Pointer<interactor_native_memory> memory;

  external ffi.Pointer<interactor_native_io_uring> ring;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Size()
  external int ring_size;

  external ffi.Pointer<ffi.Pointer<interactor_native_completion_event>>
      completions;

  external ffi.Pointer<interactor_native_callbacks_t> callbacks;

  @ffi.Int32()
  external int descriptor;

  @ffi.Int32()
  external int ring_flags;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;

  @ffi.Uint8()
  external int id;
}

typedef interactor_native_messages_pool = interactor_messages_pool;
typedef interactor_native_static_buffers = interactor_static_buffers;
typedef interactor_native_io_buffers = interactor_io_buffers;
typedef interactor_native_small_data = interactor_small_data;
typedef interactor_native_memory = interactor_memory;
typedef interactor_native_io_uring = io_uring;
typedef interactor_native_completion_event = io_uring_cqe;
typedef interactor_native_callbacks_t = mh_native_callbacks_t;

final class interactor_input_buffer extends ffi.Opaque {}

final class interactor_output_buffer extends ffi.Opaque {}

final class interactor_payload_pool extends ffi.Opaque {}

final class test_object_child extends ffi.Struct {
  @ffi.Int()
  external int field;
}

final class test_object extends ffi.Struct {
  @ffi.Int()
  external int field;

  external test_object_child child_field;
}

final class timespec extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;
}

final class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __bits;
}

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Opaque {}

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef clock_t = ffi.Long;
typedef Dartclock_t = int;
typedef time_t = ffi.Long;
typedef Darttime_t = int;
typedef locale_t = ffi.Pointer<__locale_struct>;
typedef clockid_t = ffi.Int;
typedef Dartclockid_t = int;
typedef pid_t = ffi.Int;
typedef Dartpid_t = int;
typedef timer_t = ffi.Pointer<ffi.Void>;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_internal_list __list;
}

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class __jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __jmpbuf;

  @ffi.Int()
  external int __mask_was_saved;

  external __sigset_t __saved_mask;
}

final class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;
typedef pthread_once_t = ffi.Int;
typedef Dartpthread_once_t = int;

final class __cancel_jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __cancel_jmp_buf;

  @ffi.Int()
  external int __mask_was_saved;
}

final class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<__cancel_jmp_buf_tag> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

final class __pthread_cleanup_frame extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int()
  external int __do_it;

  @ffi.Int()
  external int __cancel_type;
}

typedef pthread_key_t = ffi.UnsignedInt;
typedef Dartpthread_key_t = int;

final class test_thread extends ffi.Struct {
  @pthread_t()
  external int id;

  @ffi.Bool()
  external bool alive;

  @ffi.Size()
  external int whole_messages_count;

  @ffi.Size()
  external int received_messages_count;

  external ffi.Pointer<interactor_native> interactor;

  external ffi.Pointer<ffi.Pointer<linux_interactor.interactor_message>>
      messages;

  external pthread_cond_t initialize_condition;

  external pthread_mutex_t initialize_mutex;
}

final class test_threads extends ffi.Struct {
  external ffi.Pointer<test_thread> threads;

  @ffi.Size()
  external int count;

  external pthread_mutex_t global_working_mutex;
}

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;
