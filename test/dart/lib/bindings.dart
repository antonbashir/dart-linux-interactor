// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field
import 'dart:ffi' as ffi;
import 'package:linux_interactor/interactor/bindings.dart' as linux_interactor;

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>(
    symbol: '__assert_fail', assetId: 'interactor-bindings-test')
external void __assert_fail(
  ffi.Pointer<ffi.Char> __assertion,
  ffi.Pointer<ffi.Char> __file,
  int __line,
  ffi.Pointer<ffi.Char> __function,
);

@ffi.Native<
        ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
            ffi.Pointer<ffi.Char>)>(
    symbol: '__assert_perror_fail', assetId: 'interactor-bindings-test')
external void __assert_perror_fail(
  int __errnum,
  ffi.Pointer<ffi.Char> __file,
  int __line,
  ffi.Pointer<ffi.Char> __function,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Int)>(symbol: '__assert', assetId: 'interactor-bindings-test')
external void __assert(
  ffi.Pointer<ffi.Char> __assertion,
  ffi.Pointer<ffi.Char> __file,
  int __line,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'access', assetId: 'interactor-bindings-test')
external int access(
  ffi.Pointer<ffi.Char> __name,
  int __type,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>(
    symbol: 'faccessat', assetId: 'interactor-bindings-test')
external int faccessat(
  int __fd,
  ffi.Pointer<ffi.Char> __file,
  int __type,
  int __flag,
);

@ffi.Native<__off_t Function(ffi.Int, __off_t, ffi.Int)>(
    symbol: 'lseek', assetId: 'interactor-bindings-test')
external int lseek(
  int __fd,
  int __offset,
  int __whence,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'close', assetId: 'interactor-bindings-test')
external int close(
  int __fd,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'closefrom', assetId: 'interactor-bindings-test')
external void closefrom(
  int __lowfd,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'read', assetId: 'interactor-bindings-test')
external int read(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'write', assetId: 'interactor-bindings-test')
external int write(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
);

@ffi.Native<
        ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)>(
    symbol: 'pread', assetId: 'interactor-bindings-test')
external int pread(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
  int __offset,
);

@ffi.Native<
        ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)>(
    symbol: 'pwrite', assetId: 'interactor-bindings-test')
external int pwrite(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __offset,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Int>)>(
    symbol: 'pipe', assetId: 'interactor-bindings-test')
external int pipe(
  ffi.Pointer<ffi.Int> __pipedes,
);

@ffi.Native<ffi.UnsignedInt Function(ffi.UnsignedInt)>(
    symbol: 'alarm', assetId: 'interactor-bindings-test')
external int alarm(
  int __seconds,
);

@ffi.Native<ffi.UnsignedInt Function(ffi.UnsignedInt)>(
    symbol: 'sleep', assetId: 'interactor-bindings-test')
external int sleep(
  int __seconds,
);

@ffi.Native<__useconds_t Function(__useconds_t, __useconds_t)>(
    symbol: 'ualarm', assetId: 'interactor-bindings-test')
external int ualarm(
  int __value,
  int __interval,
);

@ffi.Native<ffi.Int Function(__useconds_t)>(
    symbol: 'usleep', assetId: 'interactor-bindings-test')
external int usleep(
  int __useconds,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'pause', assetId: 'interactor-bindings-test')
external int pause();

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)>(
    symbol: 'chown', assetId: 'interactor-bindings-test')
external int chown(
  ffi.Pointer<ffi.Char> __file,
  int __owner,
  int __group,
);

@ffi.Native<ffi.Int Function(ffi.Int, __uid_t, __gid_t)>(
    symbol: 'fchown', assetId: 'interactor-bindings-test')
external int fchown(
  int __fd,
  int __owner,
  int __group,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)>(
    symbol: 'lchown', assetId: 'interactor-bindings-test')
external int lchown(
  ffi.Pointer<ffi.Char> __file,
  int __owner,
  int __group,
);

@ffi.Native<
    ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, __uid_t, __gid_t,
        ffi.Int)>(symbol: 'fchownat', assetId: 'interactor-bindings-test')
external int fchownat(
  int __fd,
  ffi.Pointer<ffi.Char> __file,
  int __owner,
  int __group,
  int __flag,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'chdir', assetId: 'interactor-bindings-test')
external int chdir(
  ffi.Pointer<ffi.Char> __path,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'fchdir', assetId: 'interactor-bindings-test')
external int fchdir(
  int __fd,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'getcwd', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> getcwd(
  ffi.Pointer<ffi.Char> __buf,
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'getwd', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> getwd(
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'dup', assetId: 'interactor-bindings-test')
external int dup(
  int __fd,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'dup2', assetId: 'interactor-bindings-test')
external int dup2(
  int __fd,
  int __fd2,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'execve', assetId: 'interactor-bindings-test')
external int execve(
  ffi.Pointer<ffi.Char> __path,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'fexecve', assetId: 'interactor-bindings-test')
external int fexecve(
  int __fd,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'execv', assetId: 'interactor-bindings-test')
external int execv(
  ffi.Pointer<ffi.Char> __path,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'execle', assetId: 'interactor-bindings-test')
external int execle(
  ffi.Pointer<ffi.Char> __path,
  ffi.Pointer<ffi.Char> __arg,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'execl', assetId: 'interactor-bindings-test')
external int execl(
  ffi.Pointer<ffi.Char> __path,
  ffi.Pointer<ffi.Char> __arg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'execvp', assetId: 'interactor-bindings-test')
external int execvp(
  ffi.Pointer<ffi.Char> __file,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'execlp', assetId: 'interactor-bindings-test')
external int execlp(
  ffi.Pointer<ffi.Char> __file,
  ffi.Pointer<ffi.Char> __arg,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'nice', assetId: 'interactor-bindings-test')
external int nice(
  int __inc,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: '_exit', assetId: 'interactor-bindings-test')
external void _exit(
  int __status,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'pathconf', assetId: 'interactor-bindings-test')
external int pathconf(
  ffi.Pointer<ffi.Char> __path,
  int __name,
);

@ffi.Native<ffi.Long Function(ffi.Int, ffi.Int)>(
    symbol: 'fpathconf', assetId: 'interactor-bindings-test')
external int fpathconf(
  int __fd,
  int __name,
);

@ffi.Native<ffi.Long Function(ffi.Int)>(
    symbol: 'sysconf', assetId: 'interactor-bindings-test')
external int sysconf(
  int __name,
);

@ffi.Native<ffi.Size Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'confstr', assetId: 'interactor-bindings-test')
external int confstr(
  int __name,
  ffi.Pointer<ffi.Char> __buf,
  int __len,
);

@ffi.Native<__pid_t Function()>(
    symbol: 'getpid', assetId: 'interactor-bindings-test')
external int getpid();

@ffi.Native<__pid_t Function()>(
    symbol: 'getppid', assetId: 'interactor-bindings-test')
external int getppid();

@ffi.Native<__pid_t Function()>(
    symbol: 'getpgrp', assetId: 'interactor-bindings-test')
external int getpgrp();

@ffi.Native<__pid_t Function(__pid_t)>(
    symbol: '__getpgid', assetId: 'interactor-bindings-test')
external int __getpgid(
  int __pid,
);

@ffi.Native<__pid_t Function(__pid_t)>(
    symbol: 'getpgid', assetId: 'interactor-bindings-test')
external int getpgid(
  int __pid,
);

@ffi.Native<ffi.Int Function(__pid_t, __pid_t)>(
    symbol: 'setpgid', assetId: 'interactor-bindings-test')
external int setpgid(
  int __pid,
  int __pgid,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'setpgrp', assetId: 'interactor-bindings-test')
external int setpgrp();

@ffi.Native<__pid_t Function()>(
    symbol: 'setsid', assetId: 'interactor-bindings-test')
external int setsid();

@ffi.Native<__pid_t Function(__pid_t)>(
    symbol: 'getsid', assetId: 'interactor-bindings-test')
external int getsid(
  int __pid,
);

@ffi.Native<__uid_t Function()>(
    symbol: 'getuid', assetId: 'interactor-bindings-test')
external int getuid();

@ffi.Native<__uid_t Function()>(
    symbol: 'geteuid', assetId: 'interactor-bindings-test')
external int geteuid();

@ffi.Native<__gid_t Function()>(
    symbol: 'getgid', assetId: 'interactor-bindings-test')
external int getgid();

@ffi.Native<__gid_t Function()>(
    symbol: 'getegid', assetId: 'interactor-bindings-test')
external int getegid();

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<__gid_t>)>(
    symbol: 'getgroups', assetId: 'interactor-bindings-test')
external int getgroups(
  int __size,
  ffi.Pointer<__gid_t> __list,
);

@ffi.Native<ffi.Int Function(__uid_t)>(
    symbol: 'setuid', assetId: 'interactor-bindings-test')
external int setuid(
  int __uid,
);

@ffi.Native<ffi.Int Function(__uid_t, __uid_t)>(
    symbol: 'setreuid', assetId: 'interactor-bindings-test')
external int setreuid(
  int __ruid,
  int __euid,
);

@ffi.Native<ffi.Int Function(__uid_t)>(
    symbol: 'seteuid', assetId: 'interactor-bindings-test')
external int seteuid(
  int __uid,
);

@ffi.Native<ffi.Int Function(__gid_t)>(
    symbol: 'setgid', assetId: 'interactor-bindings-test')
external int setgid(
  int __gid,
);

@ffi.Native<ffi.Int Function(__gid_t, __gid_t)>(
    symbol: 'setregid', assetId: 'interactor-bindings-test')
external int setregid(
  int __rgid,
  int __egid,
);

@ffi.Native<ffi.Int Function(__gid_t)>(
    symbol: 'setegid', assetId: 'interactor-bindings-test')
external int setegid(
  int __gid,
);

@ffi.Native<__pid_t Function()>(
    symbol: 'fork', assetId: 'interactor-bindings-test')
external int fork();

@ffi.Native<ffi.Int Function()>(
    symbol: 'vfork', assetId: 'interactor-bindings-test')
external int vfork();

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(
    symbol: 'ttyname', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> ttyname(
  int __fd,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'ttyname_r', assetId: 'interactor-bindings-test')
external int ttyname_r(
  int __fd,
  ffi.Pointer<ffi.Char> __buf,
  int __buflen,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'isatty', assetId: 'interactor-bindings-test')
external int isatty(
  int __fd,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'ttyslot', assetId: 'interactor-bindings-test')
external int ttyslot();

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'link', assetId: 'interactor-bindings-test')
external int link(
  ffi.Pointer<ffi.Char> __from,
  ffi.Pointer<ffi.Char> __to,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Int,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ffi.Char>,
        ffi.Int)>(symbol: 'linkat', assetId: 'interactor-bindings-test')
external int linkat(
  int __fromfd,
  ffi.Pointer<ffi.Char> __from,
  int __tofd,
  ffi.Pointer<ffi.Char> __to,
  int __flags,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'symlink', assetId: 'interactor-bindings-test')
external int symlink(
  ffi.Pointer<ffi.Char> __from,
  ffi.Pointer<ffi.Char> __to,
);

@ffi.Native<
    ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'readlink', assetId: 'interactor-bindings-test')
external int readlink(
  ffi.Pointer<ffi.Char> __path,
  ffi.Pointer<ffi.Char> __buf,
  int __len,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'symlinkat', assetId: 'interactor-bindings-test')
external int symlinkat(
  ffi.Pointer<ffi.Char> __from,
  int __tofd,
  ffi.Pointer<ffi.Char> __to,
);

@ffi.Native<
    ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'readlinkat', assetId: 'interactor-bindings-test')
external int readlinkat(
  int __fd,
  ffi.Pointer<ffi.Char> __path,
  ffi.Pointer<ffi.Char> __buf,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'unlink', assetId: 'interactor-bindings-test')
external int unlink(
  ffi.Pointer<ffi.Char> __name,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'unlinkat', assetId: 'interactor-bindings-test')
external int unlinkat(
  int __fd,
  ffi.Pointer<ffi.Char> __name,
  int __flag,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'rmdir', assetId: 'interactor-bindings-test')
external int rmdir(
  ffi.Pointer<ffi.Char> __path,
);

@ffi.Native<__pid_t Function(ffi.Int)>(
    symbol: 'tcgetpgrp', assetId: 'interactor-bindings-test')
external int tcgetpgrp(
  int __fd,
);

@ffi.Native<ffi.Int Function(ffi.Int, __pid_t)>(
    symbol: 'tcsetpgrp', assetId: 'interactor-bindings-test')
external int tcsetpgrp(
  int __fd,
  int __pgrp_id,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(
    symbol: 'getlogin', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> getlogin();

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'getlogin_r', assetId: 'interactor-bindings-test')
external int getlogin_r(
  ffi.Pointer<ffi.Char> __name,
  int __name_len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'setlogin', assetId: 'interactor-bindings-test')
external int setlogin(
  ffi.Pointer<ffi.Char> __name,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'getopt', assetId: 'interactor-bindings-test')
external int getopt(
  int ___argc,
  ffi.Pointer<ffi.Pointer<ffi.Char>> ___argv,
  ffi.Pointer<ffi.Char> __shortopts,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'gethostname', assetId: 'interactor-bindings-test')
external int gethostname(
  ffi.Pointer<ffi.Char> __name,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'sethostname', assetId: 'interactor-bindings-test')
external int sethostname(
  ffi.Pointer<ffi.Char> __name,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Long)>(
    symbol: 'sethostid', assetId: 'interactor-bindings-test')
external int sethostid(
  int __id,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'getdomainname', assetId: 'interactor-bindings-test')
external int getdomainname(
  ffi.Pointer<ffi.Char> __name,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'setdomainname', assetId: 'interactor-bindings-test')
external int setdomainname(
  ffi.Pointer<ffi.Char> __name,
  int __len,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'vhangup', assetId: 'interactor-bindings-test')
external int vhangup();

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'revoke', assetId: 'interactor-bindings-test')
external int revoke(
  ffi.Pointer<ffi.Char> __file,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Size, ffi.Size,
        ffi.UnsignedInt)>(symbol: 'profil', assetId: 'interactor-bindings-test')
external int profil(
  ffi.Pointer<ffi.UnsignedShort> __sample_buffer,
  int __size,
  int __offset,
  int __scale,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'acct', assetId: 'interactor-bindings-test')
external int acct(
  ffi.Pointer<ffi.Char> __name,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(
    symbol: 'getusershell', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> getusershell();

@ffi.Native<ffi.Void Function()>(
    symbol: 'endusershell', assetId: 'interactor-bindings-test')
external void endusershell();

@ffi.Native<ffi.Void Function()>(
    symbol: 'setusershell', assetId: 'interactor-bindings-test')
external void setusershell();

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'daemon', assetId: 'interactor-bindings-test')
external int daemon(
  int __nochdir,
  int __noclose,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'chroot', assetId: 'interactor-bindings-test')
external int chroot(
  ffi.Pointer<ffi.Char> __path,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'getpass', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> getpass(
  ffi.Pointer<ffi.Char> __prompt,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'fsync', assetId: 'interactor-bindings-test')
external int fsync(
  int __fd,
);

@ffi.Native<ffi.Long Function()>(
    symbol: 'gethostid', assetId: 'interactor-bindings-test')
external int gethostid();

@ffi.Native<ffi.Void Function()>(
    symbol: 'sync', assetId: 'interactor-bindings-test')
external void sync1();

@ffi.Native<ffi.Int Function()>(
    symbol: 'getpagesize', assetId: 'interactor-bindings-test')
external int getpagesize();

@ffi.Native<ffi.Int Function()>(
    symbol: 'getdtablesize', assetId: 'interactor-bindings-test')
external int getdtablesize();

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, __off_t)>(
    symbol: 'truncate', assetId: 'interactor-bindings-test')
external int truncate(
  ffi.Pointer<ffi.Char> __file,
  int __length,
);

@ffi.Native<ffi.Int Function(ffi.Int, __off_t)>(
    symbol: 'ftruncate', assetId: 'interactor-bindings-test')
external int ftruncate(
  int __fd,
  int __length,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'brk', assetId: 'interactor-bindings-test')
external int brk(
  ffi.Pointer<ffi.Void> __addr,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.IntPtr)>(
    symbol: 'sbrk', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> sbrk(
  int __delta,
);

@ffi.Native<ffi.Long Function(ffi.Long)>(
    symbol: 'syscall', assetId: 'interactor-bindings-test')
external int syscall(
  int __sysno,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, __off_t)>(
    symbol: 'lockf', assetId: 'interactor-bindings-test')
external int lockf(
  int __fd,
  int __cmd,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'fdatasync', assetId: 'interactor-bindings-test')
external int fdatasync(
  int __fildes,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'crypt', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> crypt(
  ffi.Pointer<ffi.Char> __key,
  ffi.Pointer<ffi.Char> __salt,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'getentropy', assetId: 'interactor-bindings-test')
external int getentropy(
  ffi.Pointer<ffi.Void> __buffer,
  int __length,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'memcpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> memcpy(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'memmove', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> memmove(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Void>,
        ffi.Int,
        ffi.Size)>(symbol: 'memccpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> memccpy(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
        ffi.Size)>(symbol: 'memset', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> memset(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'memcmp', assetId: 'interactor-bindings-test')
external int memcmp(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: '__memcmpeq', assetId: 'interactor-bindings-test')
external int __memcmpeq(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
        ffi.Size)>(symbol: 'memchr', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> memchr(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strcpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strncpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strncpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcat', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strcat(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strncat', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strncat(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcmp', assetId: 'interactor-bindings-test')
external int strcmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strncmp', assetId: 'interactor-bindings-test')
external int strncmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcoll', assetId: 'interactor-bindings-test')
external int strcoll(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strxfrm', assetId: 'interactor-bindings-test')
external int strxfrm(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        locale_t)>(symbol: 'strcoll_l', assetId: 'interactor-bindings-test')
external int strcoll_l(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  locale_t __l,
);

@ffi.Native<
    ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size,
        locale_t)>(symbol: 'strxfrm_l', assetId: 'interactor-bindings-test')
external int strxfrm_l(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
  locale_t __l,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'strdup', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strdup(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'strndup', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strndup(
  ffi.Pointer<ffi.Char> __string,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'strchr', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strchr(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'strrchr', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strrchr(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'strchrnul', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strchrnul(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<
        ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcspn', assetId: 'interactor-bindings-test')
external int strcspn(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __reject,
);

@ffi.Native<
        ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strspn', assetId: 'interactor-bindings-test')
external int strspn(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __accept,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strpbrk', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strpbrk(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __accept,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strstr', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strstr(
  ffi.Pointer<ffi.Char> __haystack,
  ffi.Pointer<ffi.Char> __needle,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strtok', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strtok(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __delim,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: '__strtok_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> __strtok_r(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'strtok_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strtok_r(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcasestr', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strcasestr(
  ffi.Pointer<ffi.Char> __haystack,
  ffi.Pointer<ffi.Char> __needle,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void>,
        ffi.Size,
        ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'memmem', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> memmem(
  ffi.Pointer<ffi.Void> __haystack,
  int __haystacklen,
  ffi.Pointer<ffi.Void> __needle,
  int __needlelen,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: '__mempcpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> __mempcpy(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'mempcpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> mempcpy(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'strlen', assetId: 'interactor-bindings-test')
external int strlen(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'strnlen', assetId: 'interactor-bindings-test')
external int strnlen(
  ffi.Pointer<ffi.Char> __string,
  int __maxlen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(
    symbol: 'strerror', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strerror(
  int __errnum,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'strerror_r', assetId: 'interactor-bindings-test')
external int strerror_r(
  int __errnum,
  ffi.Pointer<ffi.Char> __buf,
  int __buflen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>(
    symbol: 'strerror_l', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strerror_l(
  int __errnum,
  locale_t __l,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'bcmp', assetId: 'interactor-bindings-test')
external int bcmp(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'bcopy', assetId: 'interactor-bindings-test')
external void bcopy(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  int __n,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'bzero', assetId: 'interactor-bindings-test')
external void bzero(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'index', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> index(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'rindex', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> rindex(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'ffs', assetId: 'interactor-bindings-test')
external int ffs(
  int __i,
);

@ffi.Native<ffi.Int Function(ffi.Long)>(
    symbol: 'ffsl', assetId: 'interactor-bindings-test')
external int ffsl(
  int __l,
);

@ffi.Native<ffi.Int Function(ffi.LongLong)>(
    symbol: 'ffsll', assetId: 'interactor-bindings-test')
external int ffsll(
  int __ll,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strcasecmp', assetId: 'interactor-bindings-test')
external int strcasecmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strncasecmp', assetId: 'interactor-bindings-test')
external int strncasecmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        locale_t)>(symbol: 'strcasecmp_l', assetId: 'interactor-bindings-test')
external int strcasecmp_l(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  locale_t __loc,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size,
        locale_t)>(symbol: 'strncasecmp_l', assetId: 'interactor-bindings-test')
external int strncasecmp_l(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
  locale_t __loc,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'explicit_bzero', assetId: 'interactor-bindings-test')
external void explicit_bzero(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>(
    symbol: 'strsep', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strsep(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
  ffi.Pointer<ffi.Char> __delim,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(
    symbol: 'strsignal', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> strsignal(
  int __sig,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: '__stpcpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> __stpcpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'stpcpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> stpcpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: '__stpncpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> __stpncpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'stpncpy', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> stpncpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strlcpy', assetId: 'interactor-bindings-test')
external int strlcpy(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'strlcat', assetId: 'interactor-bindings-test')
external int strlcat(
  ffi.Pointer<ffi.Char> __dest,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<ffi.Size Function()>(
    symbol: '__ctype_get_mb_cur_max', assetId: 'interactor-bindings-test')
external int __ctype_get_mb_cur_max();

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'atof', assetId: 'interactor-bindings-test')
external double atof(
  ffi.Pointer<ffi.Char> __nptr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'atoi', assetId: 'interactor-bindings-test')
external int atoi(
  ffi.Pointer<ffi.Char> __nptr,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'atol', assetId: 'interactor-bindings-test')
external int atol(
  ffi.Pointer<ffi.Char> __nptr,
);

@ffi.Native<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'atoll', assetId: 'interactor-bindings-test')
external int atoll(
  ffi.Pointer<ffi.Char> __nptr,
);

@ffi.Native<
        ffi.Double Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'strtod', assetId: 'interactor-bindings-test')
external double strtod(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
);

@ffi.Native<
        ffi.Float Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'strtof', assetId: 'interactor-bindings-test')
external double strtof(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
);

@ffi.Native<
    ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtol', assetId: 'interactor-bindings-test')
external int strtol(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.UnsignedLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoul', assetId: 'interactor-bindings-test')
external int strtoul(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.LongLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoq', assetId: 'interactor-bindings-test')
external int strtoq(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.UnsignedLongLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtouq', assetId: 'interactor-bindings-test')
external int strtouq(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.LongLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoll', assetId: 'interactor-bindings-test')
external int strtoll(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    ffi.UnsignedLongLong Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoull', assetId: 'interactor-bindings-test')
external int strtoull(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Long)>(
    symbol: 'l64a', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> l64a(
  int __n,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'a64l', assetId: 'interactor-bindings-test')
external int a64l(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>(
    symbol: 'select', assetId: 'interactor-bindings-test')
external int select(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int,
            ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>,
            ffi.Pointer<fd_set>,
            ffi.Pointer<timespec>,
            ffi.Pointer<__sigset_t>)>(
    symbol: 'pselect', assetId: 'interactor-bindings-test')
external int pselect(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

@ffi.Native<ffi.Long Function()>(
    symbol: 'random', assetId: 'interactor-bindings-test')
external int random();

@ffi.Native<ffi.Void Function(ffi.UnsignedInt)>(
    symbol: 'srandom', assetId: 'interactor-bindings-test')
external void srandom(
  int __seed,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'initstate', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> initstate(
  int __seed,
  ffi.Pointer<ffi.Char> __statebuf,
  int __statelen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'setstate', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> setstate(
  ffi.Pointer<ffi.Char> __statebuf,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>(
    symbol: 'random_r', assetId: 'interactor-bindings-test')
external int random_r(
  ffi.Pointer<random_data> __buf,
  ffi.Pointer<ffi.Int32> __result,
);

@ffi.Native<ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<random_data>)>(
    symbol: 'srandom_r', assetId: 'interactor-bindings-test')
external int srandom_r(
  int __seed,
  ffi.Pointer<random_data> __buf,
);

@ffi.Native<
        ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
            ffi.Pointer<random_data>)>(
    symbol: 'initstate_r', assetId: 'interactor-bindings-test')
external int initstate_r(
  int __seed,
  ffi.Pointer<ffi.Char> __statebuf,
  int __statelen,
  ffi.Pointer<random_data> __buf,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>(
    symbol: 'setstate_r', assetId: 'interactor-bindings-test')
external int setstate_r(
  ffi.Pointer<ffi.Char> __statebuf,
  ffi.Pointer<random_data> __buf,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'rand', assetId: 'interactor-bindings-test')
external int rand();

@ffi.Native<ffi.Void Function(ffi.UnsignedInt)>(
    symbol: 'srand', assetId: 'interactor-bindings-test')
external void srand(
  int __seed,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>(
    symbol: 'rand_r', assetId: 'interactor-bindings-test')
external int rand_r(
  ffi.Pointer<ffi.UnsignedInt> __seed,
);

@ffi.Native<ffi.Double Function()>(
    symbol: 'drand48', assetId: 'interactor-bindings-test')
external double drand48();

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'erand48', assetId: 'interactor-bindings-test')
external double erand48(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
);

@ffi.Native<ffi.Long Function()>(
    symbol: 'lrand48', assetId: 'interactor-bindings-test')
external int lrand48();

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'nrand48', assetId: 'interactor-bindings-test')
external int nrand48(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
);

@ffi.Native<ffi.Long Function()>(
    symbol: 'mrand48', assetId: 'interactor-bindings-test')
external int mrand48();

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'jrand48', assetId: 'interactor-bindings-test')
external int jrand48(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
);

@ffi.Native<ffi.Void Function(ffi.Long)>(
    symbol: 'srand48', assetId: 'interactor-bindings-test')
external void srand48(
  int __seedval,
);

@ffi.Native<
        ffi.Pointer<ffi.UnsignedShort> Function(
            ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'seed48', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.UnsignedShort> seed48(
  ffi.Pointer<ffi.UnsignedShort> __seed16v,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>(
    symbol: 'lcong48', assetId: 'interactor-bindings-test')
external void lcong48(
  ffi.Pointer<ffi.UnsignedShort> __param,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>(
    symbol: 'drand48_r', assetId: 'interactor-bindings-test')
external int drand48_r(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>(
    symbol: 'erand48_r', assetId: 'interactor-bindings-test')
external int erand48_r(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>(
    symbol: 'lrand48_r', assetId: 'interactor-bindings-test')
external int lrand48_r(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Long> __result,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>(
    symbol: 'nrand48_r', assetId: 'interactor-bindings-test')
external int nrand48_r(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Long> __result,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>(
    symbol: 'mrand48_r', assetId: 'interactor-bindings-test')
external int mrand48_r(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Long> __result,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
            ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>(
    symbol: 'jrand48_r', assetId: 'interactor-bindings-test')
external int jrand48_r(
  ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Long> __result,
);

@ffi.Native<ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>(
    symbol: 'srand48_r', assetId: 'interactor-bindings-test')
external int srand48_r(
  int __seedval,
  ffi.Pointer<drand48_data> __buffer,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>(
    symbol: 'seed48_r', assetId: 'interactor-bindings-test')
external int seed48_r(
  ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ffi.Pointer<drand48_data> __buffer,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>(
    symbol: 'lcong48_r', assetId: 'interactor-bindings-test')
external int lcong48_r(
  ffi.Pointer<ffi.UnsignedShort> __param,
  ffi.Pointer<drand48_data> __buffer,
);

@ffi.Native<__uint32_t Function()>(
    symbol: 'arc4random', assetId: 'interactor-bindings-test')
external int arc4random();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'arc4random_buf', assetId: 'interactor-bindings-test')
external void arc4random_buf(
  ffi.Pointer<ffi.Void> __buf,
  int __size,
);

@ffi.Native<__uint32_t Function(__uint32_t)>(
    symbol: 'arc4random_uniform', assetId: 'interactor-bindings-test')
external int arc4random_uniform(
  int __upper_bound,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(
    symbol: 'malloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> malloc(
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>(
    symbol: 'calloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> calloc(
  int __nmemb,
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'realloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> realloc(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'free', assetId: 'interactor-bindings-test')
external void free(
  ffi.Pointer<ffi.Void> __ptr,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
        ffi.Size)>(symbol: 'reallocarray', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> reallocarray(
  ffi.Pointer<ffi.Void> __ptr,
  int __nmemb,
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(
    symbol: 'alloca', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> alloca(
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(
    symbol: 'valloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> valloc(
  int __size,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size, ffi.Size)>(
    symbol: 'posix_memalign', assetId: 'interactor-bindings-test')
external int posix_memalign(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>(
    symbol: 'aligned_alloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> aligned_alloc(
  int __alignment,
  int __size,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'abort', assetId: 'interactor-bindings-test')
external void abort();

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'atexit', assetId: 'interactor-bindings-test')
external int atexit(
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'at_quick_exit', assetId: 'interactor-bindings-test')
external int at_quick_exit(
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'on_exit', assetId: 'interactor-bindings-test')
external int on_exit(
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
      __func,
  ffi.Pointer<ffi.Void> __arg,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'exit', assetId: 'interactor-bindings-test')
external void exit(
  int __status,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'quick_exit', assetId: 'interactor-bindings-test')
external void quick_exit(
  int __status,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: '_Exit', assetId: 'interactor-bindings-test')
external void _Exit(
  int __status,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'getenv', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> getenv(
  ffi.Pointer<ffi.Char> __name,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'putenv', assetId: 'interactor-bindings-test')
external int putenv(
  ffi.Pointer<ffi.Char> __string,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Int)>(symbol: 'setenv', assetId: 'interactor-bindings-test')
external int setenv(
  ffi.Pointer<ffi.Char> __name,
  ffi.Pointer<ffi.Char> __value,
  int __replace,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'unsetenv', assetId: 'interactor-bindings-test')
external int unsetenv(
  ffi.Pointer<ffi.Char> __name,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'clearenv', assetId: 'interactor-bindings-test')
external int clearenv();

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'mktemp', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> mktemp(
  ffi.Pointer<ffi.Char> __template,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'mkstemp', assetId: 'interactor-bindings-test')
external int mkstemp(
  ffi.Pointer<ffi.Char> __template,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'mkstemps', assetId: 'interactor-bindings-test')
external int mkstemps(
  ffi.Pointer<ffi.Char> __template,
  int __suffixlen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'mkdtemp', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> mkdtemp(
  ffi.Pointer<ffi.Char> __template,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'system', assetId: 'interactor-bindings-test')
external int system(
  ffi.Pointer<ffi.Char> __command,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'realpath', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> realpath(
  ffi.Pointer<ffi.Char> __name,
  ffi.Pointer<ffi.Char> __resolved,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Void>,
        ffi.Size,
        ffi.Size,
        __compar_fn_t)>(symbol: 'bsearch', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> bsearch(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  __compar_fn_t __compar,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
        __compar_fn_t)>(symbol: 'qsort', assetId: 'interactor-bindings-test')
external void qsort(
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  __compar_fn_t __compar,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'abs', assetId: 'interactor-bindings-test')
external int abs(
  int __x,
);

@ffi.Native<ffi.Long Function(ffi.Long)>(
    symbol: 'labs', assetId: 'interactor-bindings-test')
external int labs(
  int __x,
);

@ffi.Native<ffi.LongLong Function(ffi.LongLong)>(
    symbol: 'llabs', assetId: 'interactor-bindings-test')
external int llabs(
  int __x,
);

@ffi.Native<div_t Function(ffi.Int, ffi.Int)>(
    symbol: 'div', assetId: 'interactor-bindings-test')
external div_t div(
  int __numer,
  int __denom,
);

@ffi.Native<ldiv_t Function(ffi.Long, ffi.Long)>(
    symbol: 'ldiv', assetId: 'interactor-bindings-test')
external ldiv_t ldiv(
  int __numer,
  int __denom,
);

@ffi.Native<lldiv_t Function(ffi.LongLong, ffi.LongLong)>(
    symbol: 'lldiv', assetId: 'interactor-bindings-test')
external lldiv_t lldiv(
  int __numer,
  int __denom,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>(
    symbol: 'ecvt', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> ecvt(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int> __decpt,
  ffi.Pointer<ffi.Int> __sign,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>(
    symbol: 'fcvt', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> fcvt(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int> __decpt,
  ffi.Pointer<ffi.Int> __sign,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'gcvt', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> gcvt(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Double,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'ecvt_r', assetId: 'interactor-bindings-test')
external int ecvt_r(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int> __decpt,
  ffi.Pointer<ffi.Int> __sign,
  ffi.Pointer<ffi.Char> __buf,
  int __len,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Double,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'fcvt_r', assetId: 'interactor-bindings-test')
external int fcvt_r(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int> __decpt,
  ffi.Pointer<ffi.Int> __sign,
  ffi.Pointer<ffi.Char> __buf,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'mblen', assetId: 'interactor-bindings-test')
external int mblen(
  ffi.Pointer<ffi.Char> __s,
  int __n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'mbtowc', assetId: 'interactor-bindings-test')
external int mbtowc(
  ffi.Pointer<ffi.WChar> __pwc,
  ffi.Pointer<ffi.Char> __s,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>(
    symbol: 'wctomb', assetId: 'interactor-bindings-test')
external int wctomb(
  ffi.Pointer<ffi.Char> __s,
  int __wchar,
);

@ffi.Native<
    ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'mbstowcs', assetId: 'interactor-bindings-test')
external int mbstowcs(
  ffi.Pointer<ffi.WChar> __pwcs,
  ffi.Pointer<ffi.Char> __s,
  int __n,
);

@ffi.Native<
    ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
        ffi.Size)>(symbol: 'wcstombs', assetId: 'interactor-bindings-test')
external int wcstombs(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.WChar> __pwcs,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'rpmatch', assetId: 'interactor-bindings-test')
external int rpmatch(
  ffi.Pointer<ffi.Char> __response,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'getsubopt', assetId: 'interactor-bindings-test')
external int getsubopt(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>(
    symbol: 'getloadavg', assetId: 'interactor-bindings-test')
external int getloadavg(
  ffi.Pointer<ffi.Double> __loadavg,
  int __nelem,
);

/// It is called on allocation failure in small_xmalloc. Print failure diagonstic
/// and exit with failure.
@ffi.Native<ffi.Void Function(ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'small_xmalloc_fail', assetId: 'interactor-bindings-test')
external void small_xmalloc_fail(
  int size,
  ffi.Pointer<ffi.Char> filename,
  int line,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ibuf>, ffi.Pointer<slab_cache>,
        ffi.Size)>(symbol: 'ibuf_create', assetId: 'interactor-bindings-test')
external void ibuf_create(
  ffi.Pointer<ibuf> ibuf,
  ffi.Pointer<slab_cache> slabc,
  int start_capacity,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ibuf>)>(
    symbol: 'ibuf_destroy', assetId: 'interactor-bindings-test')
external void ibuf_destroy(
  ffi.Pointer<ibuf> ibuf,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ibuf>)>(
    symbol: 'ibuf_reinit', assetId: 'interactor-bindings-test')
external void ibuf_reinit(
  ffi.Pointer<ibuf> ibuf,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ibuf>, ffi.Size)>(
    symbol: 'ibuf_reserve_slow', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> ibuf_reserve_slow(
  ffi.Pointer<ibuf> ibuf,
  int size,
);

/// Shrink the buffer to the minimal possible capacity needed to store the data
/// written to the buffer and not yet consumed.
@ffi.Native<ffi.Void Function(ffi.Pointer<ibuf>)>(
    symbol: 'ibuf_shrink', assetId: 'interactor-bindings-test')
external void ibuf_shrink(
  ffi.Pointer<ibuf> ibuf,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void>,
        ffi.Size,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        __off_t)>(symbol: 'mmap', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> mmap(
  ffi.Pointer<ffi.Void> __addr,
  int __len,
  int __prot,
  int __flags,
  int __fd,
  int __offset,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'munmap', assetId: 'interactor-bindings-test')
external int munmap(
  ffi.Pointer<ffi.Void> __addr,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>(
    symbol: 'mprotect', assetId: 'interactor-bindings-test')
external int mprotect(
  ffi.Pointer<ffi.Void> __addr,
  int __len,
  int __prot,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>(
    symbol: 'msync', assetId: 'interactor-bindings-test')
external int msync(
  ffi.Pointer<ffi.Void> __addr,
  int __len,
  int __flags,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>(
    symbol: 'madvise', assetId: 'interactor-bindings-test')
external int madvise(
  ffi.Pointer<ffi.Void> __addr,
  int __len,
  int __advice,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>(
    symbol: 'posix_madvise', assetId: 'interactor-bindings-test')
external int posix_madvise(
  ffi.Pointer<ffi.Void> __addr,
  int __len,
  int __advice,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'mlock', assetId: 'interactor-bindings-test')
external int mlock(
  ffi.Pointer<ffi.Void> __addr,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'munlock', assetId: 'interactor-bindings-test')
external int munlock(
  ffi.Pointer<ffi.Void> __addr,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'mlockall', assetId: 'interactor-bindings-test')
external int mlockall(
  int __flags,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'munlockall', assetId: 'interactor-bindings-test')
external int munlockall();

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.UnsignedChar>)>(
    symbol: 'mincore', assetId: 'interactor-bindings-test')
external int mincore(
  ffi.Pointer<ffi.Void> __start,
  int __len,
  ffi.Pointer<ffi.UnsignedChar> __vec,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, mode_t)>(
    symbol: 'shm_open', assetId: 'interactor-bindings-test')
external int shm_open(
  ffi.Pointer<ffi.Char> __name,
  int __oflag,
  int __mode,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'shm_unlink', assetId: 'interactor-bindings-test')
external int shm_unlink(
  ffi.Pointer<ffi.Char> __name,
);

/// Initialize an arena.
@ffi.Native<
        ffi.Int Function(ffi.Pointer<slab_arena>, ffi.Pointer<quota>, ffi.Size,
            ffi.Uint32, ffi.Int)>(
    symbol: 'slab_arena_create', assetId: 'interactor-bindings-test')
external int slab_arena_create(
  ffi.Pointer<slab_arena> arena,
  ffi.Pointer<quota> quota,
  int prealloc,
  int slab_size,
  int flags,
);

/// Destroy an arena.
@ffi.Native<ffi.Void Function(ffi.Pointer<slab_arena>)>(
    symbol: 'slab_arena_destroy', assetId: 'interactor-bindings-test')
external void slab_arena_destroy(
  ffi.Pointer<slab_arena> arena,
);

/// Get a slab.
@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<slab_arena>)>(
    symbol: 'slab_map', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> slab_map(
  ffi.Pointer<slab_arena> arena,
);

/// Put a slab into cache.
@ffi.Native<ffi.Void Function(ffi.Pointer<slab_arena>, ffi.Pointer<ffi.Void>)>(
    symbol: 'slab_unmap', assetId: 'interactor-bindings-test')
external void slab_unmap(
  ffi.Pointer<slab_arena> arena,
  ffi.Pointer<ffi.Void> ptr,
);

/// mprotect() the preallocated arena.
@ffi.Native<ffi.Void Function(ffi.Pointer<slab_arena>)>(
    symbol: 'slab_arena_mprotect', assetId: 'interactor-bindings-test')
external void slab_arena_mprotect(
  ffi.Pointer<slab_arena> arena,
);

@ffi.Native<ffi.Int Function(ffi.Size, ffi.Pointer<cpu_set_t>)>(
    symbol: '__sched_cpucount', assetId: 'interactor-bindings-test')
external int __sched_cpucount(
  int __setsize,
  ffi.Pointer<cpu_set_t> __setp,
);

@ffi.Native<ffi.Pointer<cpu_set_t> Function(ffi.Size)>(
    symbol: '__sched_cpualloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<cpu_set_t> __sched_cpualloc(
  int __count,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<cpu_set_t>)>(
    symbol: '__sched_cpufree', assetId: 'interactor-bindings-test')
external void __sched_cpufree(
  ffi.Pointer<cpu_set_t> __set,
);

@ffi.Native<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>(
    symbol: 'sched_setparam', assetId: 'interactor-bindings-test')
external int sched_setparam(
  int __pid,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>(
    symbol: 'sched_getparam', assetId: 'interactor-bindings-test')
external int sched_getparam(
  int __pid,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<ffi.Int Function(__pid_t, ffi.Int, ffi.Pointer<sched_param>)>(
    symbol: 'sched_setscheduler', assetId: 'interactor-bindings-test')
external int sched_setscheduler(
  int __pid,
  int __policy,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<ffi.Int Function(__pid_t)>(
    symbol: 'sched_getscheduler', assetId: 'interactor-bindings-test')
external int sched_getscheduler(
  int __pid,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'sched_yield', assetId: 'interactor-bindings-test')
external int sched_yield();

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sched_get_priority_max', assetId: 'interactor-bindings-test')
external int sched_get_priority_max(
  int __algorithm,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sched_get_priority_min', assetId: 'interactor-bindings-test')
external int sched_get_priority_min(
  int __algorithm,
);

@ffi.Native<ffi.Int Function(__pid_t, ffi.Pointer<timespec>)>(
    symbol: 'sched_rr_get_interval', assetId: 'interactor-bindings-test')
external int sched_rr_get_interval(
  int __pid,
  ffi.Pointer<timespec> __t,
);

@ffi.Native<clock_t Function()>(
    symbol: 'clock', assetId: 'interactor-bindings-test')
external int clock();

@ffi.Native<time_t Function(ffi.Pointer<time_t>)>(
    symbol: 'time', assetId: 'interactor-bindings-test')
external int time(
  ffi.Pointer<time_t> __timer,
);

@ffi.Native<ffi.Double Function(time_t, time_t)>(
    symbol: 'difftime', assetId: 'interactor-bindings-test')
external double difftime(
  int __time1,
  int __time0,
);

@ffi.Native<time_t Function(ffi.Pointer<tm>)>(
    symbol: 'mktime', assetId: 'interactor-bindings-test')
external int mktime(
  ffi.Pointer<tm> __tp,
);

@ffi.Native<
        ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
            ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>(
    symbol: 'strftime', assetId: 'interactor-bindings-test')
external int strftime(
  ffi.Pointer<ffi.Char> __s,
  int __maxsize,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<tm> __tp,
);

@ffi.Native<
    ffi.Size Function(
        ffi.Pointer<ffi.Char>,
        ffi.Size,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<tm>,
        locale_t)>(symbol: 'strftime_l', assetId: 'interactor-bindings-test')
external int strftime_l(
  ffi.Pointer<ffi.Char> __s,
  int __maxsize,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<tm> __tp,
  locale_t __loc,
);

@ffi.Native<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>(
    symbol: 'gmtime', assetId: 'interactor-bindings-test')
external ffi.Pointer<tm> gmtime(
  ffi.Pointer<time_t> __timer,
);

@ffi.Native<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>(
    symbol: 'localtime', assetId: 'interactor-bindings-test')
external ffi.Pointer<tm> localtime(
  ffi.Pointer<time_t> __timer,
);

@ffi.Native<ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>(
    symbol: 'gmtime_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<tm> gmtime_r(
  ffi.Pointer<time_t> __timer,
  ffi.Pointer<tm> __tp,
);

@ffi.Native<ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>(
    symbol: 'localtime_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<tm> localtime_r(
  ffi.Pointer<time_t> __timer,
  ffi.Pointer<tm> __tp,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>(
    symbol: 'asctime', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> asctime(
  ffi.Pointer<tm> __tp,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>(
    symbol: 'ctime', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> ctime(
  ffi.Pointer<time_t> __timer,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>(
    symbol: 'asctime_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> asctime_r(
  ffi.Pointer<tm> __tp,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>(
    symbol: 'ctime_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> ctime_r(
  ffi.Pointer<time_t> __timer,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'tzset', assetId: 'interactor-bindings-test')
external void tzset();

@ffi.Native<time_t Function(ffi.Pointer<tm>)>(
    symbol: 'timegm', assetId: 'interactor-bindings-test')
external int timegm(
  ffi.Pointer<tm> __tp,
);

@ffi.Native<time_t Function(ffi.Pointer<tm>)>(
    symbol: 'timelocal', assetId: 'interactor-bindings-test')
external int timelocal(
  ffi.Pointer<tm> __tp,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'dysize', assetId: 'interactor-bindings-test')
external int dysize(
  int __year,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>(
    symbol: 'nanosleep', assetId: 'interactor-bindings-test')
external int nanosleep(
  ffi.Pointer<timespec> __requested_time,
  ffi.Pointer<timespec> __remaining,
);

@ffi.Native<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>(
    symbol: 'clock_getres', assetId: 'interactor-bindings-test')
external int clock_getres(
  int __clock_id,
  ffi.Pointer<timespec> __res,
);

@ffi.Native<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>(
    symbol: 'clock_gettime', assetId: 'interactor-bindings-test')
external int clock_gettime(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

@ffi.Native<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>(
    symbol: 'clock_settime', assetId: 'interactor-bindings-test')
external int clock_settime(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

@ffi.Native<
        ffi.Int Function(
            clockid_t, ffi.Int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>(
    symbol: 'clock_nanosleep', assetId: 'interactor-bindings-test')
external int clock_nanosleep(
  int __clock_id,
  int __flags,
  ffi.Pointer<timespec> __req,
  ffi.Pointer<timespec> __rem,
);

@ffi.Native<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>(
    symbol: 'clock_getcpuclockid', assetId: 'interactor-bindings-test')
external int clock_getcpuclockid(
  int __pid,
  ffi.Pointer<clockid_t> __clock_id,
);

@ffi.Native<
        ffi.Int Function(
            clockid_t, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>(
    symbol: 'timer_create', assetId: 'interactor-bindings-test')
external int timer_create(
  int __clock_id,
  ffi.Pointer<sigevent> __evp,
  ffi.Pointer<timer_t> __timerid,
);

@ffi.Native<ffi.Int Function(timer_t)>(
    symbol: 'timer_delete', assetId: 'interactor-bindings-test')
external int timer_delete(
  timer_t __timerid,
);

@ffi.Native<
        ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
            ffi.Pointer<itimerspec>)>(
    symbol: 'timer_settime', assetId: 'interactor-bindings-test')
external int timer_settime(
  timer_t __timerid,
  int __flags,
  ffi.Pointer<itimerspec> __value,
  ffi.Pointer<itimerspec> __ovalue,
);

@ffi.Native<ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>(
    symbol: 'timer_gettime', assetId: 'interactor-bindings-test')
external int timer_gettime(
  timer_t __timerid,
  ffi.Pointer<itimerspec> __value,
);

@ffi.Native<ffi.Int Function(timer_t)>(
    symbol: 'timer_getoverrun', assetId: 'interactor-bindings-test')
external int timer_getoverrun(
  timer_t __timerid,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>(
    symbol: 'timespec_get', assetId: 'interactor-bindings-test')
external int timespec_get(
  ffi.Pointer<timespec> __ts,
  int __base,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_t>,
            ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'pthread_create', assetId: 'interactor-bindings-test')
external int pthread_create(
  ffi.Pointer<pthread_t> __newthread,
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
      __start_routine,
  ffi.Pointer<ffi.Void> __arg,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'pthread_exit', assetId: 'interactor-bindings-test')
external void pthread_exit(
  ffi.Pointer<ffi.Void> __retval,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>(
    symbol: 'pthread_join', assetId: 'interactor-bindings-test')
external int pthread_join(
  int __th,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
);

@ffi.Native<ffi.Int Function(pthread_t)>(
    symbol: 'pthread_detach', assetId: 'interactor-bindings-test')
external int pthread_detach(
  int __th,
);

@ffi.Native<pthread_t Function()>(
    symbol: 'pthread_self', assetId: 'interactor-bindings-test')
external int pthread_self();

@ffi.Native<ffi.Int Function(pthread_t, pthread_t)>(
    symbol: 'pthread_equal', assetId: 'interactor-bindings-test')
external int pthread_equal(
  int __thread1,
  int __thread2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>(
    symbol: 'pthread_attr_init', assetId: 'interactor-bindings-test')
external int pthread_attr_init(
  ffi.Pointer<pthread_attr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>(
    symbol: 'pthread_attr_destroy', assetId: 'interactor-bindings-test')
external int pthread_attr_destroy(
  ffi.Pointer<pthread_attr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_attr_getdetachstate', assetId: 'interactor-bindings-test')
external int pthread_attr_getdetachstate(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Int> __detachstate,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>(
    symbol: 'pthread_attr_setdetachstate', assetId: 'interactor-bindings-test')
external int pthread_attr_setdetachstate(
  ffi.Pointer<pthread_attr_t> __attr,
  int __detachstate,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>(
    symbol: 'pthread_attr_getguardsize', assetId: 'interactor-bindings-test')
external int pthread_attr_getguardsize(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Size> __guardsize,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)>(
    symbol: 'pthread_attr_setguardsize', assetId: 'interactor-bindings-test')
external int pthread_attr_setguardsize(
  ffi.Pointer<pthread_attr_t> __attr,
  int __guardsize,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>(
    symbol: 'pthread_attr_getschedparam', assetId: 'interactor-bindings-test')
external int pthread_attr_getschedparam(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>(
    symbol: 'pthread_attr_setschedparam', assetId: 'interactor-bindings-test')
external int pthread_attr_setschedparam(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_attr_getschedpolicy', assetId: 'interactor-bindings-test')
external int pthread_attr_getschedpolicy(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Int> __policy,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>(
    symbol: 'pthread_attr_setschedpolicy', assetId: 'interactor-bindings-test')
external int pthread_attr_setschedpolicy(
  ffi.Pointer<pthread_attr_t> __attr,
  int __policy,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_attr_getinheritsched', assetId: 'interactor-bindings-test')
external int pthread_attr_getinheritsched(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Int> __inherit,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>(
    symbol: 'pthread_attr_setinheritsched', assetId: 'interactor-bindings-test')
external int pthread_attr_setinheritsched(
  ffi.Pointer<pthread_attr_t> __attr,
  int __inherit,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_attr_getscope', assetId: 'interactor-bindings-test')
external int pthread_attr_getscope(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Int> __scope,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>(
    symbol: 'pthread_attr_setscope', assetId: 'interactor-bindings-test')
external int pthread_attr_setscope(
  ffi.Pointer<pthread_attr_t> __attr,
  int __scope,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>(
    symbol: 'pthread_attr_getstackaddr', assetId: 'interactor-bindings-test')
external int pthread_attr_getstackaddr(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>(
    symbol: 'pthread_attr_setstackaddr', assetId: 'interactor-bindings-test')
external int pthread_attr_setstackaddr(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Void> __stackaddr,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>(
    symbol: 'pthread_attr_getstacksize', assetId: 'interactor-bindings-test')
external int pthread_attr_getstacksize(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Size> __stacksize,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)>(
    symbol: 'pthread_attr_setstacksize', assetId: 'interactor-bindings-test')
external int pthread_attr_setstacksize(
  ffi.Pointer<pthread_attr_t> __attr,
  int __stacksize,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_attr_t>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>(
    symbol: 'pthread_attr_getstack', assetId: 'interactor-bindings-test')
external int pthread_attr_getstack(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
  ffi.Pointer<ffi.Size> __stacksize,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'pthread_attr_setstack', assetId: 'interactor-bindings-test')
external int pthread_attr_setstack(
  ffi.Pointer<pthread_attr_t> __attr,
  ffi.Pointer<ffi.Void> __stackaddr,
  int __stacksize,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Int, ffi.Pointer<sched_param>)>(
    symbol: 'pthread_setschedparam', assetId: 'interactor-bindings-test')
external int pthread_setschedparam(
  int __target_thread,
  int __policy,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<
        ffi.Int Function(
            pthread_t, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>(
    symbol: 'pthread_getschedparam', assetId: 'interactor-bindings-test')
external int pthread_getschedparam(
  int __target_thread,
  ffi.Pointer<ffi.Int> __policy,
  ffi.Pointer<sched_param> __param,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Int)>(
    symbol: 'pthread_setschedprio', assetId: 'interactor-bindings-test')
external int pthread_setschedprio(
  int __target_thread,
  int __prio,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_once_t>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'pthread_once', assetId: 'interactor-bindings-test')
external int pthread_once(
  ffi.Pointer<pthread_once_t> __once_control,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __init_routine,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_setcancelstate', assetId: 'interactor-bindings-test')
external int pthread_setcancelstate(
  int __state,
  ffi.Pointer<ffi.Int> __oldstate,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_setcanceltype', assetId: 'interactor-bindings-test')
external int pthread_setcanceltype(
  int __type,
  ffi.Pointer<ffi.Int> __oldtype,
);

@ffi.Native<ffi.Int Function(pthread_t)>(
    symbol: 'pthread_cancel', assetId: 'interactor-bindings-test')
external int pthread_cancel(
  int __th,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'pthread_testcancel', assetId: 'interactor-bindings-test')
external void pthread_testcancel();

@ffi.Native<ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>(
    symbol: '__pthread_register_cancel', assetId: 'interactor-bindings-test')
external void __pthread_register_cancel(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>(
    symbol: '__pthread_unregister_cancel', assetId: 'interactor-bindings-test')
external void __pthread_unregister_cancel(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>(
    symbol: '__pthread_unwind_next', assetId: 'interactor-bindings-test')
external void __pthread_unwind_next(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<__jmp_buf_tag>, ffi.Int)>(
    symbol: '__sigsetjmp', assetId: 'interactor-bindings-test')
external int __sigsetjmp(
  ffi.Pointer<__jmp_buf_tag> __env,
  int __savemask,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>(
    symbol: 'pthread_mutex_init', assetId: 'interactor-bindings-test')
external int pthread_mutex_init(
  ffi.Pointer<pthread_mutex_t> __mutex,
  ffi.Pointer<pthread_mutexattr_t> __mutexattr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_destroy', assetId: 'interactor-bindings-test')
external int pthread_mutex_destroy(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_trylock', assetId: 'interactor-bindings-test')
external int pthread_mutex_trylock(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_lock', assetId: 'interactor-bindings-test')
external int pthread_mutex_lock(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>(
    symbol: 'pthread_mutex_timedlock', assetId: 'interactor-bindings-test')
external int pthread_mutex_timedlock(
  ffi.Pointer<pthread_mutex_t> __mutex,
  ffi.Pointer<timespec> __abstime,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_unlock', assetId: 'interactor-bindings-test')
external int pthread_mutex_unlock(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutex_getprioceiling', assetId: 'interactor-bindings-test')
external int pthread_mutex_getprioceiling(
  ffi.Pointer<pthread_mutex_t> __mutex,
  ffi.Pointer<ffi.Int> __prioceiling,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutex_t>, ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutex_setprioceiling', assetId: 'interactor-bindings-test')
external int pthread_mutex_setprioceiling(
  ffi.Pointer<pthread_mutex_t> __mutex,
  int __prioceiling,
  ffi.Pointer<ffi.Int> __old_ceiling,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_mutex_consistent', assetId: 'interactor-bindings-test')
external int pthread_mutex_consistent(
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>(
    symbol: 'pthread_mutexattr_init', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_init(
  ffi.Pointer<pthread_mutexattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>(
    symbol: 'pthread_mutexattr_destroy', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_destroy(
  ffi.Pointer<pthread_mutexattr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_getpshared', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_getpshared(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __pshared,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_setpshared', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_setpshared(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __pshared,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_gettype', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_gettype(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __kind,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_settype', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_settype(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __kind,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_getprotocol',
    assetId: 'interactor-bindings-test')
external int pthread_mutexattr_getprotocol(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __protocol,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_setprotocol',
    assetId: 'interactor-bindings-test')
external int pthread_mutexattr_setprotocol(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __protocol,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_getprioceiling',
    assetId: 'interactor-bindings-test')
external int pthread_mutexattr_getprioceiling(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __prioceiling,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_setprioceiling',
    assetId: 'interactor-bindings-test')
external int pthread_mutexattr_setprioceiling(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __prioceiling,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_mutexattr_getrobust', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_getrobust(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  ffi.Pointer<ffi.Int> __robustness,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>(
    symbol: 'pthread_mutexattr_setrobust', assetId: 'interactor-bindings-test')
external int pthread_mutexattr_setrobust(
  ffi.Pointer<pthread_mutexattr_t> __attr,
  int __robustness,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>(
    symbol: 'pthread_rwlock_init', assetId: 'interactor-bindings-test')
external int pthread_rwlock_init(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
  ffi.Pointer<pthread_rwlockattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_destroy', assetId: 'interactor-bindings-test')
external int pthread_rwlock_destroy(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_rdlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_rdlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_tryrdlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_tryrdlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>(
    symbol: 'pthread_rwlock_timedrdlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_timedrdlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
  ffi.Pointer<timespec> __abstime,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_wrlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_wrlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_trywrlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_trywrlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>(
    symbol: 'pthread_rwlock_timedwrlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_timedwrlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
  ffi.Pointer<timespec> __abstime,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>(
    symbol: 'pthread_rwlock_unlock', assetId: 'interactor-bindings-test')
external int pthread_rwlock_unlock(
  ffi.Pointer<pthread_rwlock_t> __rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>(
    symbol: 'pthread_rwlockattr_init', assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_init(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>(
    symbol: 'pthread_rwlockattr_destroy', assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_destroy(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_rwlockattr_getpshared',
    assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_getpshared(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
  ffi.Pointer<ffi.Int> __pshared,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)>(
    symbol: 'pthread_rwlockattr_setpshared',
    assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_setpshared(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
  int __pshared,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_rwlockattr_getkind_np',
    assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_getkind_np(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
  ffi.Pointer<ffi.Int> __pref,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)>(
    symbol: 'pthread_rwlockattr_setkind_np',
    assetId: 'interactor-bindings-test')
external int pthread_rwlockattr_setkind_np(
  ffi.Pointer<pthread_rwlockattr_t> __attr,
  int __pref,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>(
    symbol: 'pthread_cond_init', assetId: 'interactor-bindings-test')
external int pthread_cond_init(
  ffi.Pointer<pthread_cond_t> __cond,
  ffi.Pointer<pthread_condattr_t> __cond_attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>(
    symbol: 'pthread_cond_destroy', assetId: 'interactor-bindings-test')
external int pthread_cond_destroy(
  ffi.Pointer<pthread_cond_t> __cond,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>(
    symbol: 'pthread_cond_signal', assetId: 'interactor-bindings-test')
external int pthread_cond_signal(
  ffi.Pointer<pthread_cond_t> __cond,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>(
    symbol: 'pthread_cond_broadcast', assetId: 'interactor-bindings-test')
external int pthread_cond_broadcast(
  ffi.Pointer<pthread_cond_t> __cond,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>(
    symbol: 'pthread_cond_wait', assetId: 'interactor-bindings-test')
external int pthread_cond_wait(
  ffi.Pointer<pthread_cond_t> __cond,
  ffi.Pointer<pthread_mutex_t> __mutex,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_cond_t>,
            ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>(
    symbol: 'pthread_cond_timedwait', assetId: 'interactor-bindings-test')
external int pthread_cond_timedwait(
  ffi.Pointer<pthread_cond_t> __cond,
  ffi.Pointer<pthread_mutex_t> __mutex,
  ffi.Pointer<timespec> __abstime,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>(
    symbol: 'pthread_condattr_init', assetId: 'interactor-bindings-test')
external int pthread_condattr_init(
  ffi.Pointer<pthread_condattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>(
    symbol: 'pthread_condattr_destroy', assetId: 'interactor-bindings-test')
external int pthread_condattr_destroy(
  ffi.Pointer<pthread_condattr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_condattr_getpshared', assetId: 'interactor-bindings-test')
external int pthread_condattr_getpshared(
  ffi.Pointer<pthread_condattr_t> __attr,
  ffi.Pointer<ffi.Int> __pshared,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_condattr_t>, ffi.Int)>(
    symbol: 'pthread_condattr_setpshared', assetId: 'interactor-bindings-test')
external int pthread_condattr_setpshared(
  ffi.Pointer<pthread_condattr_t> __attr,
  int __pshared,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_condattr_t>, ffi.Pointer<__clockid_t>)>(
    symbol: 'pthread_condattr_getclock', assetId: 'interactor-bindings-test')
external int pthread_condattr_getclock(
  ffi.Pointer<pthread_condattr_t> __attr,
  ffi.Pointer<__clockid_t> __clock_id,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_condattr_t>, __clockid_t)>(
    symbol: 'pthread_condattr_setclock', assetId: 'interactor-bindings-test')
external int pthread_condattr_setclock(
  ffi.Pointer<pthread_condattr_t> __attr,
  int __clock_id,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<pthread_barrier_t>,
            ffi.Pointer<pthread_barrierattr_t>, ffi.UnsignedInt)>(
    symbol: 'pthread_barrier_init', assetId: 'interactor-bindings-test')
external int pthread_barrier_init(
  ffi.Pointer<pthread_barrier_t> __barrier,
  ffi.Pointer<pthread_barrierattr_t> __attr,
  int __count,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>(
    symbol: 'pthread_barrier_destroy', assetId: 'interactor-bindings-test')
external int pthread_barrier_destroy(
  ffi.Pointer<pthread_barrier_t> __barrier,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>(
    symbol: 'pthread_barrier_wait', assetId: 'interactor-bindings-test')
external int pthread_barrier_wait(
  ffi.Pointer<pthread_barrier_t> __barrier,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>(
    symbol: 'pthread_barrierattr_init', assetId: 'interactor-bindings-test')
external int pthread_barrierattr_init(
  ffi.Pointer<pthread_barrierattr_t> __attr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>(
    symbol: 'pthread_barrierattr_destroy', assetId: 'interactor-bindings-test')
external int pthread_barrierattr_destroy(
  ffi.Pointer<pthread_barrierattr_t> __attr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'pthread_barrierattr_getpshared',
    assetId: 'interactor-bindings-test')
external int pthread_barrierattr_getpshared(
  ffi.Pointer<pthread_barrierattr_t> __attr,
  ffi.Pointer<ffi.Int> __pshared,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>, ffi.Int)>(
    symbol: 'pthread_barrierattr_setpshared',
    assetId: 'interactor-bindings-test')
external int pthread_barrierattr_setpshared(
  ffi.Pointer<pthread_barrierattr_t> __attr,
  int __pshared,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<pthread_key_t>,
            ffi.Pointer<
                ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>(
    symbol: 'pthread_key_create', assetId: 'interactor-bindings-test')
external int pthread_key_create(
  ffi.Pointer<pthread_key_t> __key,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __destr_function,
);

@ffi.Native<ffi.Int Function(pthread_key_t)>(
    symbol: 'pthread_key_delete', assetId: 'interactor-bindings-test')
external int pthread_key_delete(
  int __key,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(pthread_key_t)>(
    symbol: 'pthread_getspecific', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> pthread_getspecific(
  int __key,
);

@ffi.Native<ffi.Int Function(pthread_key_t, ffi.Pointer<ffi.Void>)>(
    symbol: 'pthread_setspecific', assetId: 'interactor-bindings-test')
external int pthread_setspecific(
  int __key,
  ffi.Pointer<ffi.Void> __pointer,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Pointer<__clockid_t>)>(
    symbol: 'pthread_getcpuclockid', assetId: 'interactor-bindings-test')
external int pthread_getcpuclockid(
  int __thread_id,
  ffi.Pointer<__clockid_t> __clock_id,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'pthread_atfork', assetId: 'interactor-bindings-test')
external int pthread_atfork(
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __prepare,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __parent,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __child,
);

@ffi.Native<intmax_t Function(intmax_t)>(
    symbol: 'imaxabs', assetId: 'interactor-bindings-test')
external int imaxabs(
  int __n,
);

@ffi.Native<imaxdiv_t Function(intmax_t, intmax_t)>(
    symbol: 'imaxdiv', assetId: 'interactor-bindings-test')
external imaxdiv_t imaxdiv(
  int __numer,
  int __denom,
);

@ffi.Native<
    intmax_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoimax', assetId: 'interactor-bindings-test')
external int strtoimax(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    uintmax_t Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Char>>,
        ffi.Int)>(symbol: 'strtoumax', assetId: 'interactor-bindings-test')
external int strtoumax(
  ffi.Pointer<ffi.Char> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<
    intmax_t Function(
        ffi.Pointer<__gwchar_t>,
        ffi.Pointer<ffi.Pointer<__gwchar_t>>,
        ffi.Int)>(symbol: 'wcstoimax', assetId: 'interactor-bindings-test')
external int wcstoimax(
  ffi.Pointer<__gwchar_t> __nptr,
  ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
  int __base,
);

@ffi.Native<
    uintmax_t Function(
        ffi.Pointer<__gwchar_t>,
        ffi.Pointer<ffi.Pointer<__gwchar_t>>,
        ffi.Int)>(symbol: 'wcstoumax', assetId: 'interactor-bindings-test')
external int wcstoumax(
  ffi.Pointer<__gwchar_t> __nptr,
  ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
  int __base,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab_arena>)>(
    symbol: 'slab_cache_create', assetId: 'interactor-bindings-test')
external void slab_cache_create(
  ffi.Pointer<slab_cache> cache,
  ffi.Pointer<slab_arena> arena,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<slab_cache>)>(
    symbol: 'slab_cache_destroy', assetId: 'interactor-bindings-test')
external void slab_cache_destroy(
  ffi.Pointer<slab_cache> cache,
);

/// Allocate ordered slab
/// @see slab_order()
@ffi.Native<ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, ffi.Uint8)>(
    symbol: 'slab_get_with_order', assetId: 'interactor-bindings-test')
external ffi.Pointer<slab> slab_get_with_order(
  ffi.Pointer<slab_cache> cache,
  int order,
);

/// Deallocate ordered slab
@ffi.Native<ffi.Void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>(
    symbol: 'slab_put_with_order', assetId: 'interactor-bindings-test')
external void slab_put_with_order(
  ffi.Pointer<slab_cache> cache,
  ffi.Pointer<slab> slab,
);

/// Allocate large slab.
/// @pre size > slab_order_size(cache->arena->slab_size)
@ffi.Native<ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, ffi.Size)>(
    symbol: 'slab_get_large', assetId: 'interactor-bindings-test')
external ffi.Pointer<slab> slab_get_large(
  ffi.Pointer<slab_cache> slab,
  int size,
);

/// Deallocate large slab.
/// @pre slab was allocated with slab_get_large()
@ffi.Native<ffi.Void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>(
    symbol: 'slab_put_large', assetId: 'interactor-bindings-test')
external void slab_put_large(
  ffi.Pointer<slab_cache> cache,
  ffi.Pointer<slab> slab,
);

/// A shortcut for slab_get_with_order()/slab_get_large()
/// @see slab_get_with_order()
/// @see slab_get_large()
@ffi.Native<ffi.Pointer<slab> Function(ffi.Pointer<slab_cache>, ffi.Size)>(
    symbol: 'slab_get', assetId: 'interactor-bindings-test')
external ffi.Pointer<slab> slab_get(
  ffi.Pointer<slab_cache> cache,
  int size,
);

/// Shortcut for slab_put_with_order()/slab_put_large()
/// @see slab_get_with_order()
/// @see slab_get_large()
@ffi.Native<ffi.Void Function(ffi.Pointer<slab_cache>, ffi.Pointer<slab>)>(
    symbol: 'slab_put', assetId: 'interactor-bindings-test')
external void slab_put(
  ffi.Pointer<slab_cache> cache,
  ffi.Pointer<slab> slab,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<slab_cache>)>(
    symbol: 'slab_cache_check', assetId: 'interactor-bindings-test')
external void slab_cache_check(
  ffi.Pointer<slab_cache> cache,
);

/// Given the requested size, calculate the actual size of a slab, that will be
/// allocated by slab_get(). Note that the real capacity of such a slab will be
/// less than the real size by slab_sizeof().
@ffi.Native<ffi.Size Function(ffi.Pointer<slab_cache>, ffi.Size)>(
    symbol: 'slab_real_size', assetId: 'interactor-bindings-test')
external int slab_real_size(
  ffi.Pointer<slab_cache> cache,
  int size,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<mempool>, ffi.Pointer<mempool_stats>)>(
    symbol: 'mempool_stats', assetId: 'interactor-bindings-test')
external void mempool_stats1(
  ffi.Pointer<mempool> mempool,
  ffi.Pointer<mempool_stats> stats,
);

/// @todo: struct mempool_iterator
@ffi.Native<
        ffi.Void Function(ffi.Pointer<mempool>, ffi.Pointer<slab_cache>,
            ffi.Uint32, ffi.Uint8)>(
    symbol: 'mempool_create_with_order', assetId: 'interactor-bindings-test')
external void mempool_create_with_order(
  ffi.Pointer<mempool> pool,
  ffi.Pointer<slab_cache> cache,
  int objsize,
  int order,
);

/// Free the memory pool and release all cached memory blocks.
/// @sa mempool_create()
@ffi.Native<ffi.Void Function(ffi.Pointer<mempool>)>(
    symbol: 'mempool_destroy', assetId: 'interactor-bindings-test')
external void mempool_destroy(
  ffi.Pointer<mempool> pool,
);

/// Allocate an object.
@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<mempool>)>(
    symbol: 'mempool_alloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> mempool_alloc(
  ffi.Pointer<mempool> pool,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<mempool>, ffi.Pointer<mslab>, ffi.Pointer<ffi.Void>)>(
    symbol: 'mslab_free', assetId: 'interactor-bindings-test')
external void mslab_free(
  ffi.Pointer<mempool> pool,
  ffi.Pointer<mslab> slab,
  ffi.Pointer<ffi.Void> ptr,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int)>(
    symbol: 'readv', assetId: 'interactor-bindings-test')
external int readv(
  int __fd,
  ffi.Pointer<iovec> __iovec,
  int __count,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int)>(
    symbol: 'writev', assetId: 'interactor-bindings-test')
external int writev(
  int __fd,
  ffi.Pointer<iovec> __iovec,
  int __count,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int, __off_t)>(
    symbol: 'preadv', assetId: 'interactor-bindings-test')
external int preadv(
  int __fd,
  ffi.Pointer<iovec> __iovec,
  int __count,
  int __offset,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<iovec>, ffi.Int, __off_t)>(
    symbol: 'pwritev', assetId: 'interactor-bindings-test')
external int pwritev(
  int __fd,
  ffi.Pointer<iovec> __iovec,
  int __count,
  int __offset,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<obuf>, ffi.Pointer<slab_cache>,
        ffi.Size)>(symbol: 'obuf_create', assetId: 'interactor-bindings-test')
external void obuf_create(
  ffi.Pointer<obuf> buf,
  ffi.Pointer<slab_cache> slabc,
  int start_capacity,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<obuf>)>(
    symbol: 'obuf_destroy', assetId: 'interactor-bindings-test')
external void obuf_destroy(
  ffi.Pointer<obuf> buf,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<obuf>)>(
    symbol: 'obuf_reset', assetId: 'interactor-bindings-test')
external void obuf_reset(
  ffi.Pointer<obuf> buf,
);

/// Slow path of obuf_reserve(), which actually reallocates
/// memory and moves data if necessary.
@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<obuf>, ffi.Size)>(
    symbol: 'obuf_reserve_slow', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> obuf_reserve_slow(
  ffi.Pointer<obuf> buf,
  int size,
);

/// Append data to the output buffer.
@ffi.Native<
        ffi.Size Function(ffi.Pointer<obuf>, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'obuf_dup', assetId: 'interactor-bindings-test')
external int obuf_dup(
  ffi.Pointer<obuf> buf,
  ffi.Pointer<ffi.Void> data,
  int size,
);

/// Forget anything added to output buffer after the savepoint.
@ffi.Native<ffi.Void Function(ffi.Pointer<obuf>, ffi.Pointer<obuf_svp>)>(
    symbol: 'obuf_rollback_to_svp', assetId: 'interactor-bindings-test')
external void obuf_rollback_to_svp(
  ffi.Pointer<obuf> buf,
  ffi.Pointer<obuf_svp> svp,
);

/// Create an instance of small_class evaluator. All args must meet the
/// requirements, undefined behaviour otherwise (at least assert).
/// @param sc - instance to create.
/// @param granularity - any class size will be a multiple of this value.
/// Must be a power of 2 (and thus greater than zero).
/// @param desired_factor - desired factor of growth of class size.
/// Must be in (1, 2] range. Actual factor can be different.
/// @param min_alloc - the lowest class size, must be greater than zero.
/// The good choice is the same value as granularity.
/// @param actual_factor calculated on the basis of desired factor
@ffi.Native<
        ffi.Void Function(ffi.Pointer<small_class>, ffi.UnsignedInt, ffi.Float,
            ffi.UnsignedInt, ffi.Pointer<ffi.Float>)>(
    symbol: 'small_class_create', assetId: 'interactor-bindings-test')
external void small_class_create(
  ffi.Pointer<small_class> sc,
  int granularity,
  double desired_factor,
  int min_alloc,
  ffi.Pointer<ffi.Float> actual_factor,
);

/// Initialize a small memory allocator.
/// @param alloc - instance to create.
/// @param cache - pointer to used slab cache.
/// @param objsize_min - minimal object size.
/// @param granularity - alignment of objects in pools
/// @param alloc_factor - desired factor of growth object size.
/// Must be in (1, 2] range.
/// @param actual_alloc_factor real allocation factor calculated the basis of
/// desired alloc_factor
@ffi.Native<
        ffi.Void Function(ffi.Pointer<small_alloc>, ffi.Pointer<slab_cache>,
            ffi.Uint32, ffi.UnsignedInt, ffi.Float, ffi.Pointer<ffi.Float>)>(
    symbol: 'small_alloc_create', assetId: 'interactor-bindings-test')
external void small_alloc_create(
  ffi.Pointer<small_alloc> alloc,
  ffi.Pointer<slab_cache> cache,
  int objsize_min,
  int granularity,
  double alloc_factor,
  ffi.Pointer<ffi.Float> actual_alloc_factor,
);

/// Destroy the allocator and all allocated memory.
@ffi.Native<ffi.Void Function(ffi.Pointer<small_alloc>)>(
    symbol: 'small_alloc_destroy', assetId: 'interactor-bindings-test')
external void small_alloc_destroy(
  ffi.Pointer<small_alloc> alloc,
);

/// Allocate a piece of memory in the small allocator.
///
/// @retval NULL   the requested size is beyond objsize_max
/// or out of memory
@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<small_alloc>, ffi.Size)>(
    symbol: 'smalloc', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> smalloc(
  ffi.Pointer<small_alloc> alloc,
  int size,
);

/// Free memory chunk allocated by the small allocator. */
/// /**
/// Free a small objects.
///
/// This boils down to finding the object's mempool and delegating
/// to mempool_free().
@ffi.Native<
    ffi.Void Function(ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>,
        ffi.Size)>(symbol: 'smfree', assetId: 'interactor-bindings-test')
external void smfree(
  ffi.Pointer<small_alloc> alloc,
  ffi.Pointer<ffi.Void> ptr,
  int size,
);

/// @brief Return an unique index associated with a chunk allocated
/// by the allocator.
///
/// This index space is more dense than the pointers space,
/// especially in the least significant bits.  This number is
/// needed because some types of box's indexes (e.g. BITSET) have
/// better performance then they operate on sequential offsets
/// (i.e. dense space) instead of memory pointers (sparse space).
///
/// The calculation is based on SLAB number and the position of an
/// item within it. Current implementation only guarantees that
/// adjacent chunks from one SLAB will have consecutive indexes.
/// That is, if two chunks were sequentially allocated from one
/// chunk they will have sequential ids. If a second chunk was
/// allocated from another SLAB thеn the difference between indexes
/// may be more than one.
///
/// @param ptr pointer to memory allocated in small_alloc
/// @return unique index
@ffi.Native<ffi.Size Function(ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>)>(
    symbol: 'small_ptr_compress', assetId: 'interactor-bindings-test')
external int small_ptr_compress(
  ffi.Pointer<small_alloc> alloc,
  ffi.Pointer<ffi.Void> ptr,
);

/// Perform the opposite action of small_ptr_compress().
@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<small_alloc>, ffi.Size)>(
    symbol: 'small_ptr_decompress', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> small_ptr_decompress(
  ffi.Pointer<small_alloc> alloc,
  int val,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<small_alloc>,
            ffi.Pointer<small_stats>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'small_stats', assetId: 'interactor-bindings-test')
external void small_stats1(
  ffi.Pointer<small_alloc> alloc,
  ffi.Pointer<small_stats> totals,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      cb,
  ffi.Pointer<ffi.Void> cb_ctx,
);

/// Fill `info' with the information about allocation `ptr' of size `size'.
/// See `struct small_alloc_info' for the description of each field.
/// Note that this function can return different `info->real_size' for the same
/// input, depending on the current `small_mempool->used_pool'.
@ffi.Native<
        ffi.Void Function(ffi.Pointer<small_alloc>, ffi.Pointer<ffi.Void>,
            ffi.Size, ffi.Pointer<small_alloc_info>)>(
    symbol: 'small_alloc_info', assetId: 'interactor-bindings-test')
external void small_alloc_info1(
  ffi.Pointer<small_alloc> alloc,
  ffi.Pointer<ffi.Void> ptr,
  int size,
  ffi.Pointer<small_alloc_info> info,
);

@ffi.Native<
        ffi.Pointer<cmsghdr> Function(
            ffi.Pointer<msghdr>, ffi.Pointer<cmsghdr>)>(
    symbol: '__cmsg_nxthdr', assetId: 'interactor-bindings-test')
external ffi.Pointer<cmsghdr> __cmsg_nxthdr(
  ffi.Pointer<msghdr> __mhdr,
  ffi.Pointer<cmsghdr> __cmsg,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'socket', assetId: 'interactor-bindings-test')
external int socket(
  int __domain,
  int __type,
  int __protocol,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>(
    symbol: 'socketpair', assetId: 'interactor-bindings-test')
external int socketpair(
  int __domain,
  int __type,
  int __protocol,
  ffi.Pointer<ffi.Int> __fds,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>(
    symbol: 'bind', assetId: 'interactor-bindings-test')
external int bind(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  int __len,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>(
    symbol: 'getsockname', assetId: 'interactor-bindings-test')
external int getsockname(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<socklen_t> __len,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<sockaddr>, socklen_t)>(
    symbol: 'connect', assetId: 'interactor-bindings-test')
external int connect(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  int __len,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>(
    symbol: 'getpeername', assetId: 'interactor-bindings-test')
external int getpeername(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<socklen_t> __len,
);

@ffi.Native<
        ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>(
    symbol: 'send', assetId: 'interactor-bindings-test')
external int send(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
);

@ffi.Native<
        ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int)>(
    symbol: 'recv', assetId: 'interactor-bindings-test')
external int recv(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
);

@ffi.Native<
    ssize_t Function(
        ffi.Int,
        ffi.Pointer<ffi.Void>,
        ffi.Size,
        ffi.Int,
        ffi.Pointer<sockaddr>,
        socklen_t)>(symbol: 'sendto', assetId: 'interactor-bindings-test')
external int sendto(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
  ffi.Pointer<sockaddr> __addr,
  int __addr_len,
);

@ffi.Native<
        ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Int,
            ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>(
    symbol: 'recvfrom', assetId: 'interactor-bindings-test')
external int recvfrom(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<socklen_t> __addr_len,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>(
    symbol: 'sendmsg', assetId: 'interactor-bindings-test')
external int sendmsg(
  int __fd,
  ffi.Pointer<msghdr> __message,
  int __flags,
);

@ffi.Native<ssize_t Function(ffi.Int, ffi.Pointer<msghdr>, ffi.Int)>(
    symbol: 'recvmsg', assetId: 'interactor-bindings-test')
external int recvmsg(
  int __fd,
  ffi.Pointer<msghdr> __message,
  int __flags,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
            ffi.Pointer<socklen_t>)>(
    symbol: 'getsockopt', assetId: 'interactor-bindings-test')
external int getsockopt(
  int __fd,
  int __level,
  int __optname,
  ffi.Pointer<ffi.Void> __optval,
  ffi.Pointer<socklen_t> __optlen,
);

@ffi.Native<
    ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
        socklen_t)>(symbol: 'setsockopt', assetId: 'interactor-bindings-test')
external int setsockopt(
  int __fd,
  int __level,
  int __optname,
  ffi.Pointer<ffi.Void> __optval,
  int __optlen,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'listen', assetId: 'interactor-bindings-test')
external int listen(
  int __fd,
  int __n,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<sockaddr>, ffi.Pointer<socklen_t>)>(
    symbol: 'accept', assetId: 'interactor-bindings-test')
external int accept(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<socklen_t> __addr_len,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'shutdown', assetId: 'interactor-bindings-test')
external int shutdown(
  int __fd,
  int __how,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sockatmark', assetId: 'interactor-bindings-test')
external int sockatmark(
  int __fd,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'isfdtype', assetId: 'interactor-bindings-test')
external int isfdtype(
  int __fd,
  int __fdtype,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>(
    symbol: 'stat', assetId: 'interactor-bindings-test')
external int stat1(
  ffi.Pointer<ffi.Char> __file,
  ffi.Pointer<stat> __buf,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<stat>)>(
    symbol: 'fstat', assetId: 'interactor-bindings-test')
external int fstat(
  int __fd,
  ffi.Pointer<stat> __buf,
);

@ffi.Native<
    ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<stat>,
        ffi.Int)>(symbol: 'fstatat', assetId: 'interactor-bindings-test')
external int fstatat(
  int __fd,
  ffi.Pointer<ffi.Char> __file,
  ffi.Pointer<stat> __buf,
  int __flag,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<stat>)>(
    symbol: 'lstat', assetId: 'interactor-bindings-test')
external int lstat(
  ffi.Pointer<ffi.Char> __file,
  ffi.Pointer<stat> __buf,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, __mode_t)>(
    symbol: 'chmod', assetId: 'interactor-bindings-test')
external int chmod(
  ffi.Pointer<ffi.Char> __file,
  int __mode,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, __mode_t)>(
    symbol: 'lchmod', assetId: 'interactor-bindings-test')
external int lchmod(
  ffi.Pointer<ffi.Char> __file,
  int __mode,
);

@ffi.Native<ffi.Int Function(ffi.Int, __mode_t)>(
    symbol: 'fchmod', assetId: 'interactor-bindings-test')
external int fchmod(
  int __fd,
  int __mode,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, __mode_t, ffi.Int)>(
    symbol: 'fchmodat', assetId: 'interactor-bindings-test')
external int fchmodat(
  int __fd,
  ffi.Pointer<ffi.Char> __file,
  int __mode,
  int __flag,
);

@ffi.Native<__mode_t Function(__mode_t)>(
    symbol: 'umask', assetId: 'interactor-bindings-test')
external int umask(
  int __mask,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, __mode_t)>(
    symbol: 'mkdir', assetId: 'interactor-bindings-test')
external int mkdir(
  ffi.Pointer<ffi.Char> __path,
  int __mode,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, __mode_t)>(
    symbol: 'mkdirat', assetId: 'interactor-bindings-test')
external int mkdirat(
  int __fd,
  ffi.Pointer<ffi.Char> __path,
  int __mode,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, __mode_t, __dev_t)>(
    symbol: 'mknod', assetId: 'interactor-bindings-test')
external int mknod(
  ffi.Pointer<ffi.Char> __path,
  int __mode,
  int __dev,
);

@ffi.Native<
        ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, __mode_t, __dev_t)>(
    symbol: 'mknodat', assetId: 'interactor-bindings-test')
external int mknodat(
  int __fd,
  ffi.Pointer<ffi.Char> __path,
  int __mode,
  int __dev,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, __mode_t)>(
    symbol: 'mkfifo', assetId: 'interactor-bindings-test')
external int mkfifo(
  ffi.Pointer<ffi.Char> __path,
  int __mode,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, __mode_t)>(
    symbol: 'mkfifoat', assetId: 'interactor-bindings-test')
external int mkfifoat(
  int __fd,
  ffi.Pointer<ffi.Char> __path,
  int __mode,
);

@ffi.Native<
    ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<timespec>,
        ffi.Int)>(symbol: 'utimensat', assetId: 'interactor-bindings-test')
external int utimensat(
  int __fd,
  ffi.Pointer<ffi.Char> __path,
  ffi.Pointer<timespec> __times,
  int __flags,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<timespec>)>(
    symbol: 'futimens', assetId: 'interactor-bindings-test')
external int futimens(
  int __fd,
  ffi.Pointer<timespec> __times,
);

@ffi.Native<ffi.Pointer<ffi.Int> Function()>(
    symbol: '__errno_location', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Int> __errno_location();

@ffi.Native<__sighandler_t Function(ffi.Int, __sighandler_t)>(
    symbol: '__sysv_signal', assetId: 'interactor-bindings-test')
external __sighandler_t __sysv_signal(
  int __sig,
  __sighandler_t __handler,
);

@ffi.Native<__sighandler_t Function(ffi.Int, __sighandler_t)>(
    symbol: 'signal', assetId: 'interactor-bindings-test')
external __sighandler_t signal(
  int __sig,
  __sighandler_t __handler,
);

@ffi.Native<ffi.Int Function(__pid_t, ffi.Int)>(
    symbol: 'kill', assetId: 'interactor-bindings-test')
external int kill(
  int __pid,
  int __sig,
);

@ffi.Native<ffi.Int Function(__pid_t, ffi.Int)>(
    symbol: 'killpg', assetId: 'interactor-bindings-test')
external int killpg(
  int __pgrp,
  int __sig,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'raise', assetId: 'interactor-bindings-test')
external int raise(
  int __sig,
);

@ffi.Native<__sighandler_t Function(ffi.Int, __sighandler_t)>(
    symbol: 'ssignal', assetId: 'interactor-bindings-test')
external __sighandler_t ssignal(
  int __sig,
  __sighandler_t __handler,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'gsignal', assetId: 'interactor-bindings-test')
external int gsignal(
  int __sig,
);

@ffi.Native<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'psignal', assetId: 'interactor-bindings-test')
external void psignal(
  int __sig,
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Char>)>(
    symbol: 'psiginfo', assetId: 'interactor-bindings-test')
external void psiginfo(
  ffi.Pointer<siginfo_t> __pinfo,
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sigblock', assetId: 'interactor-bindings-test')
external int sigblock(
  int __mask,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'sigsetmask', assetId: 'interactor-bindings-test')
external int sigsetmask(
  int __mask,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'siggetmask', assetId: 'interactor-bindings-test')
external int siggetmask();

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>)>(
    symbol: 'sigemptyset', assetId: 'interactor-bindings-test')
external int sigemptyset(
  ffi.Pointer<sigset_t> __set,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>)>(
    symbol: 'sigfillset', assetId: 'interactor-bindings-test')
external int sigfillset(
  ffi.Pointer<sigset_t> __set,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>(
    symbol: 'sigaddset', assetId: 'interactor-bindings-test')
external int sigaddset(
  ffi.Pointer<sigset_t> __set,
  int __signo,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>(
    symbol: 'sigdelset', assetId: 'interactor-bindings-test')
external int sigdelset(
  ffi.Pointer<sigset_t> __set,
  int __signo,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>(
    symbol: 'sigismember', assetId: 'interactor-bindings-test')
external int sigismember(
  ffi.Pointer<sigset_t> __set,
  int __signo,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>(
    symbol: 'sigprocmask', assetId: 'interactor-bindings-test')
external int sigprocmask(
  int __how,
  ffi.Pointer<sigset_t> __set,
  ffi.Pointer<sigset_t> __oset,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>)>(
    symbol: 'sigsuspend', assetId: 'interactor-bindings-test')
external int sigsuspend(
  ffi.Pointer<sigset_t> __set,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>(
    symbol: 'sigaction', assetId: 'interactor-bindings-test')
external int sigaction1(
  int __sig,
  ffi.Pointer<sigaction> __act,
  ffi.Pointer<sigaction> __oact,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>)>(
    symbol: 'sigpending', assetId: 'interactor-bindings-test')
external int sigpending(
  ffi.Pointer<sigset_t> __set,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>(
    symbol: 'sigwait', assetId: 'interactor-bindings-test')
external int sigwait(
  ffi.Pointer<sigset_t> __set,
  ffi.Pointer<ffi.Int> __sig,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>)>(
    symbol: 'sigwaitinfo', assetId: 'interactor-bindings-test')
external int sigwaitinfo(
  ffi.Pointer<sigset_t> __set,
  ffi.Pointer<siginfo_t> __info,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>,
            ffi.Pointer<timespec>)>(
    symbol: 'sigtimedwait', assetId: 'interactor-bindings-test')
external int sigtimedwait(
  ffi.Pointer<sigset_t> __set,
  ffi.Pointer<siginfo_t> __info,
  ffi.Pointer<timespec> __timeout,
);

@ffi.Native<ffi.Int Function(__pid_t, ffi.Int, sigval)>(
    symbol: 'sigqueue', assetId: 'interactor-bindings-test')
external int sigqueue(
  int __pid,
  int __sig,
  sigval __val,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigcontext>)>(
    symbol: 'sigreturn', assetId: 'interactor-bindings-test')
external int sigreturn(
  ffi.Pointer<sigcontext> __scp,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'siginterrupt', assetId: 'interactor-bindings-test')
external int siginterrupt(
  int __sig,
  int __interrupt,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>(
    symbol: 'sigaltstack', assetId: 'interactor-bindings-test')
external int sigaltstack(
  ffi.Pointer<stack_t> __ss,
  ffi.Pointer<stack_t> __oss,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<sigstack>, ffi.Pointer<sigstack>)>(
    symbol: 'sigstack', assetId: 'interactor-bindings-test')
external int sigstack1(
  ffi.Pointer<sigstack> __ss,
  ffi.Pointer<sigstack> __oss,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<__sigset_t>, ffi.Pointer<__sigset_t>)>(
    symbol: 'pthread_sigmask', assetId: 'interactor-bindings-test')
external int pthread_sigmask(
  int __how,
  ffi.Pointer<__sigset_t> __newmask,
  ffi.Pointer<__sigset_t> __oldmask,
);

@ffi.Native<ffi.Int Function(pthread_t, ffi.Int)>(
    symbol: 'pthread_kill', assetId: 'interactor-bindings-test')
external int pthread_kill(
  int __threadid,
  int __signo,
);

@ffi.Native<ffi.Int Function()>(
    symbol: '__libc_current_sigrtmin', assetId: 'interactor-bindings-test')
external int __libc_current_sigrtmin();

@ffi.Native<ffi.Int Function()>(
    symbol: '__libc_current_sigrtmax', assetId: 'interactor-bindings-test')
external int __libc_current_sigrtmax();

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(
    symbol: 'fcntl', assetId: 'interactor-bindings-test')
external int fcntl(
  int __fd,
  int __cmd,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'open', assetId: 'interactor-bindings-test')
external int open(
  ffi.Pointer<ffi.Char> __file,
  int __oflag,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'openat', assetId: 'interactor-bindings-test')
external int openat(
  int __fd,
  ffi.Pointer<ffi.Char> __file,
  int __oflag,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>(
    symbol: 'creat', assetId: 'interactor-bindings-test')
external int creat(
  ffi.Pointer<ffi.Char> __file,
  int __mode,
);

@ffi.Native<ffi.Int Function(ffi.Int, off_t, off_t, ffi.Int)>(
    symbol: 'posix_fadvise', assetId: 'interactor-bindings-test')
external int posix_fadvise(
  int __fd,
  int __offset,
  int __len,
  int __advise,
);

@ffi.Native<ffi.Int Function(ffi.Int, off_t, off_t)>(
    symbol: 'posix_fallocate', assetId: 'interactor-bindings-test')
external int posix_fallocate(
  int __fd,
  int __offset,
  int __len,
);

@ffi.Native<ffi.Void Function(ffi.Int32)>(
    symbol: 'atomic_thread_fence', assetId: 'interactor-bindings-test')
external void atomic_thread_fence(
  int arg0,
);

@ffi.Native<ffi.Void Function(ffi.Int32)>(
    symbol: 'atomic_signal_fence', assetId: 'interactor-bindings-test')
external void atomic_signal_fence(
  int arg0,
);

@ffi.Native<ffi.Pointer<io_uring_probe> Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_get_probe_ring', assetId: 'interactor-bindings-test')
external ffi.Pointer<io_uring_probe> io_uring_get_probe_ring(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Pointer<io_uring_probe> Function()>(
    symbol: 'io_uring_get_probe', assetId: 'interactor-bindings-test')
external ffi.Pointer<io_uring_probe> io_uring_get_probe();

@ffi.Native<ffi.Void Function(ffi.Pointer<io_uring_probe>)>(
    symbol: 'io_uring_free_probe', assetId: 'interactor-bindings-test')
external void io_uring_free_probe(
  ffi.Pointer<io_uring_probe> probe,
);

@ffi.Native<
        ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<io_uring>,
            ffi.Pointer<io_uring_params>, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'io_uring_queue_init_mem', assetId: 'interactor-bindings-test')
external int io_uring_queue_init_mem(
  int entries,
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<io_uring_params> p,
  ffi.Pointer<ffi.Void> buf,
  int buf_size,
);

@ffi.Native<
        ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<io_uring>,
            ffi.Pointer<io_uring_params>)>(
    symbol: 'io_uring_queue_init_params', assetId: 'interactor-bindings-test')
external int io_uring_queue_init_params(
  int entries,
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<io_uring_params> p,
);

@ffi.Native<
        ffi.Int Function(
            ffi.UnsignedInt, ffi.Pointer<io_uring>, ffi.UnsignedInt)>(
    symbol: 'io_uring_queue_init', assetId: 'interactor-bindings-test')
external int io_uring_queue_init(
  int entries,
  ffi.Pointer<io_uring> ring,
  int flags,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<io_uring_params>, ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_queue_mmap', assetId: 'interactor-bindings-test')
external int io_uring_queue_mmap(
  int fd,
  ffi.Pointer<io_uring_params> p,
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_ring_dontfork', assetId: 'interactor-bindings-test')
external int io_uring_ring_dontfork(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_queue_exit', assetId: 'interactor-bindings-test')
external void io_uring_queue_exit(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<
        ffi.UnsignedInt Function(ffi.Pointer<io_uring>,
            ffi.Pointer<ffi.Pointer<io_uring_cqe>>, ffi.UnsignedInt)>(
    symbol: 'io_uring_peek_batch_cqe', assetId: 'interactor-bindings-test')
external int io_uring_peek_batch_cqe(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqes,
  int count,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>,
            ffi.Pointer<ffi.Pointer<io_uring_cqe>>,
            ffi.UnsignedInt,
            ffi.Pointer<__kernel_timespec>,
            ffi.Pointer<sigset_t>)>(
    symbol: 'io_uring_wait_cqes', assetId: 'interactor-bindings-test')
external int io_uring_wait_cqes(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqe_ptr,
  int wait_nr,
  ffi.Pointer<__kernel_timespec> ts,
  ffi.Pointer<sigset_t> sigmask,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>,
            ffi.Pointer<ffi.Pointer<io_uring_cqe>>,
            ffi.Pointer<__kernel_timespec>)>(
    symbol: 'io_uring_wait_cqe_timeout', assetId: 'interactor-bindings-test')
external int io_uring_wait_cqe_timeout(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqe_ptr,
  ffi.Pointer<__kernel_timespec> ts,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_submit', assetId: 'interactor-bindings-test')
external int io_uring_submit(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>, ffi.UnsignedInt)>(
    symbol: 'io_uring_submit_and_wait', assetId: 'interactor-bindings-test')
external int io_uring_submit_and_wait(
  ffi.Pointer<io_uring> ring,
  int wait_nr,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>,
            ffi.Pointer<ffi.Pointer<io_uring_cqe>>,
            ffi.UnsignedInt,
            ffi.Pointer<__kernel_timespec>,
            ffi.Pointer<sigset_t>)>(
    symbol: 'io_uring_submit_and_wait_timeout',
    assetId: 'interactor-bindings-test')
external int io_uring_submit_and_wait_timeout(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqe_ptr,
  int wait_nr,
  ffi.Pointer<__kernel_timespec> ts,
  ffi.Pointer<sigset_t> sigmask,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>, ffi.Pointer<iovec>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_buffers', assetId: 'interactor-bindings-test')
external int io_uring_register_buffers(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<iovec> iovecs,
  int nr_iovecs,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.Pointer<iovec>,
            ffi.Pointer<__u64>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_buffers_tags',
    assetId: 'interactor-bindings-test')
external int io_uring_register_buffers_tags(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<iovec> iovecs,
  ffi.Pointer<__u64> tags,
  int nr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_buffers_sparse',
    assetId: 'interactor-bindings-test')
external int io_uring_register_buffers_sparse(
  ffi.Pointer<io_uring> ring,
  int nr,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.UnsignedInt,
            ffi.Pointer<iovec>, ffi.Pointer<__u64>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_buffers_update_tag',
    assetId: 'interactor-bindings-test')
external int io_uring_register_buffers_update_tag(
  ffi.Pointer<io_uring> ring,
  int off,
  ffi.Pointer<iovec> iovecs,
  ffi.Pointer<__u64> tags,
  int nr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_unregister_buffers', assetId: 'interactor-bindings-test')
external int io_uring_unregister_buffers(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>, ffi.Pointer<ffi.Int>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_files', assetId: 'interactor-bindings-test')
external int io_uring_register_files(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<ffi.Int> files,
  int nr_files,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.Pointer<ffi.Int>,
            ffi.Pointer<__u64>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_files_tags', assetId: 'interactor-bindings-test')
external int io_uring_register_files_tags(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<ffi.Int> files,
  ffi.Pointer<__u64> tags,
  int nr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_files_sparse',
    assetId: 'interactor-bindings-test')
external int io_uring_register_files_sparse(
  ffi.Pointer<io_uring> ring,
  int nr,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.UnsignedInt,
            ffi.Pointer<ffi.Int>, ffi.Pointer<__u64>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_files_update_tag',
    assetId: 'interactor-bindings-test')
external int io_uring_register_files_update_tag(
  ffi.Pointer<io_uring> ring,
  int off,
  ffi.Pointer<ffi.Int> files,
  ffi.Pointer<__u64> tags,
  int nr_files,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_unregister_files', assetId: 'interactor-bindings-test')
external int io_uring_unregister_files(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.UnsignedInt,
            ffi.Pointer<ffi.Int>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_files_update',
    assetId: 'interactor-bindings-test')
external int io_uring_register_files_update(
  ffi.Pointer<io_uring> ring,
  int off,
  ffi.Pointer<ffi.Int> files,
  int nr_files,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>, ffi.Int)>(
    symbol: 'io_uring_register_eventfd', assetId: 'interactor-bindings-test')
external int io_uring_register_eventfd(
  ffi.Pointer<io_uring> ring,
  int fd,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>, ffi.Int)>(
    symbol: 'io_uring_register_eventfd_async',
    assetId: 'interactor-bindings-test')
external int io_uring_register_eventfd_async(
  ffi.Pointer<io_uring> ring,
  int fd,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_unregister_eventfd', assetId: 'interactor-bindings-test')
external int io_uring_unregister_eventfd(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.Pointer<io_uring_probe>,
            ffi.UnsignedInt)>(
    symbol: 'io_uring_register_probe', assetId: 'interactor-bindings-test')
external int io_uring_register_probe(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<io_uring_probe> p,
  int nr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_register_personality',
    assetId: 'interactor-bindings-test')
external int io_uring_register_personality(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>, ffi.Int)>(
    symbol: 'io_uring_unregister_personality',
    assetId: 'interactor-bindings-test')
external int io_uring_unregister_personality(
  ffi.Pointer<io_uring> ring,
  int id,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>,
            ffi.Pointer<io_uring_restriction>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_restrictions',
    assetId: 'interactor-bindings-test')
external int io_uring_register_restrictions(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<io_uring_restriction> res,
  int nr_res,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_enable_rings', assetId: 'interactor-bindings-test')
external int io_uring_enable_rings(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: '__io_uring_sqring_wait', assetId: 'interactor-bindings-test')
external int __io_uring_sqring_wait(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>, ffi.Size, ffi.Pointer<cpu_set_t>)>(
    symbol: 'io_uring_register_iowq_aff', assetId: 'interactor-bindings-test')
external int io_uring_register_iowq_aff(
  ffi.Pointer<io_uring> ring,
  int cpusz,
  ffi.Pointer<cpu_set_t> mask,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_unregister_iowq_aff', assetId: 'interactor-bindings-test')
external int io_uring_unregister_iowq_aff(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.Pointer<ffi.UnsignedInt>)>(
    symbol: 'io_uring_register_iowq_max_workers',
    assetId: 'interactor-bindings-test')
external int io_uring_register_iowq_max_workers(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<ffi.UnsignedInt> values,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_register_ring_fd', assetId: 'interactor-bindings-test')
external int io_uring_register_ring_fd(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_unregister_ring_fd', assetId: 'interactor-bindings-test')
external int io_uring_unregister_ring_fd(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_close_ring_fd', assetId: 'interactor-bindings-test')
external int io_uring_close_ring_fd(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.Pointer<io_uring_buf_reg>,
            ffi.UnsignedInt)>(
    symbol: 'io_uring_register_buf_ring', assetId: 'interactor-bindings-test')
external int io_uring_register_buf_ring(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<io_uring_buf_reg> reg,
  int flags,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>, ffi.Int)>(
    symbol: 'io_uring_unregister_buf_ring', assetId: 'interactor-bindings-test')
external int io_uring_unregister_buf_ring(
  ffi.Pointer<io_uring> ring,
  int bgid,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>, ffi.Pointer<io_uring_sync_cancel_reg>)>(
    symbol: 'io_uring_register_sync_cancel',
    assetId: 'interactor-bindings-test')
external int io_uring_register_sync_cancel(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<io_uring_sync_cancel_reg> reg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>, ffi.UnsignedInt, ffi.UnsignedInt)>(
    symbol: 'io_uring_register_file_alloc_range',
    assetId: 'interactor-bindings-test')
external int io_uring_register_file_alloc_range(
  ffi.Pointer<io_uring> ring,
  int off,
  int len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_get_events', assetId: 'interactor-bindings-test')
external int io_uring_get_events(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<io_uring>)>(
    symbol: 'io_uring_submit_and_get_events',
    assetId: 'interactor-bindings-test')
external int io_uring_submit_and_get_events(
  ffi.Pointer<io_uring> ring,
);

@ffi.Native<
        ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt, ffi.UnsignedInt,
            ffi.UnsignedInt, ffi.Pointer<sigset_t>)>(
    symbol: 'io_uring_enter', assetId: 'interactor-bindings-test')
external int io_uring_enter(
  int fd,
  int to_submit,
  int min_complete,
  int flags,
  ffi.Pointer<sigset_t> sig,
);

@ffi.Native<
        ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt, ffi.UnsignedInt,
            ffi.UnsignedInt, ffi.Pointer<sigset_t>, ffi.Size)>(
    symbol: 'io_uring_enter2', assetId: 'interactor-bindings-test')
external int io_uring_enter2(
  int fd,
  int to_submit,
  int min_complete,
  int flags,
  ffi.Pointer<sigset_t> sig,
  int sz,
);

@ffi.Native<ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<io_uring_params>)>(
    symbol: 'io_uring_setup', assetId: 'interactor-bindings-test')
external int io_uring_setup(
  int entries,
  ffi.Pointer<io_uring_params> p,
);

@ffi.Native<
        ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt,
            ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>(
    symbol: 'io_uring_register', assetId: 'interactor-bindings-test')
external int io_uring_register(
  int fd,
  int opcode,
  ffi.Pointer<ffi.Void> arg,
  int nr_args,
);

@ffi.Native<
        ffi.Pointer<io_uring_buf_ring> Function(ffi.Pointer<io_uring>,
            ffi.UnsignedInt, ffi.Int, ffi.UnsignedInt, ffi.Pointer<ffi.Int>)>(
    symbol: 'io_uring_setup_buf_ring', assetId: 'interactor-bindings-test')
external ffi.Pointer<io_uring_buf_ring> io_uring_setup_buf_ring(
  ffi.Pointer<io_uring> ring,
  int nentries,
  int bgid,
  int flags,
  ffi.Pointer<ffi.Int> ret,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<io_uring>, ffi.Pointer<io_uring_buf_ring>,
            ffi.UnsignedInt, ffi.Int)>(
    symbol: 'io_uring_free_buf_ring', assetId: 'interactor-bindings-test')
external int io_uring_free_buf_ring(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<io_uring_buf_ring> br,
  int nentries,
  int bgid,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<io_uring>,
            ffi.Pointer<ffi.Pointer<io_uring_cqe>>,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.Pointer<sigset_t>)>(
    symbol: '__io_uring_get_cqe', assetId: 'interactor-bindings-test')
external int __io_uring_get_cqe(
  ffi.Pointer<io_uring> ring,
  ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqe_ptr,
  int submit,
  int wait_nr,
  ffi.Pointer<sigset_t> sigmask,
);

@ffi.Native<ssize_t Function(ffi.UnsignedInt, ffi.UnsignedInt)>(
    symbol: 'io_uring_mlock_size', assetId: 'interactor-bindings-test')
external int io_uring_mlock_size(
  int entries,
  int flags,
);

@ffi.Native<ssize_t Function(ffi.UnsignedInt, ffi.Pointer<io_uring_params>)>(
    symbol: 'io_uring_mlock_size_params', assetId: 'interactor-bindings-test')
external int io_uring_mlock_size_params(
  int entries,
  ffi.Pointer<io_uring_params> p,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'io_uring_major_version', assetId: 'interactor-bindings-test')
external int io_uring_major_version();

@ffi.Native<ffi.Int Function()>(
    symbol: 'io_uring_minor_version', assetId: 'interactor-bindings-test')
external int io_uring_minor_version();

@ffi.Native<ffi.Bool Function(ffi.Int, ffi.Int)>(
    symbol: 'io_uring_check_version', assetId: 'interactor-bindings-test')
external bool io_uring_check_version(
  int major,
  int minor,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'remove', assetId: 'interactor-bindings-test')
external int remove(
  ffi.Pointer<ffi.Char> __filename,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'rename', assetId: 'interactor-bindings-test')
external int rename(
  ffi.Pointer<ffi.Char> __old,
  ffi.Pointer<ffi.Char> __new,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'renameat', assetId: 'interactor-bindings-test')
external int renameat(
  int __oldfd,
  ffi.Pointer<ffi.Char> __old,
  int __newfd,
  ffi.Pointer<ffi.Char> __new,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fclose', assetId: 'interactor-bindings-test')
external int fclose(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Pointer<FILE> Function()>(
    symbol: 'tmpfile', assetId: 'interactor-bindings-test')
external ffi.Pointer<FILE> tmpfile();

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'tmpnam', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> tmpnam(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'tmpnam_r', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> tmpnam_r(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'tempnam', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> tempnam(
  ffi.Pointer<ffi.Char> __dir,
  ffi.Pointer<ffi.Char> __pfx,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fflush', assetId: 'interactor-bindings-test')
external int fflush(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fflush_unlocked', assetId: 'interactor-bindings-test')
external int fflush_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'fopen', assetId: 'interactor-bindings-test')
external ffi.Pointer<FILE> fopen(
  ffi.Pointer<ffi.Char> __filename,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>(
    symbol: 'freopen', assetId: 'interactor-bindings-test')
external ffi.Pointer<FILE> freopen(
  ffi.Pointer<ffi.Char> __filename,
  ffi.Pointer<ffi.Char> __modes,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Pointer<FILE> Function(ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'fdopen', assetId: 'interactor-bindings-test')
external ffi.Pointer<FILE> fdopen(
  int __fd,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
            cookie_io_functions_t)>(
    symbol: 'fopencookie', assetId: 'interactor-bindings-test')
external ffi.Pointer<FILE> fopencookie(
  ffi.Pointer<ffi.Void> __magic_cookie,
  ffi.Pointer<ffi.Char> __modes,
  cookie_io_functions_t __io_funcs,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Char>)>(
    symbol: 'fmemopen', assetId: 'interactor-bindings-test')
external ffi.Pointer<FILE> fmemopen(
  ffi.Pointer<ffi.Void> __s,
  int __len,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>(
    symbol: 'open_memstream', assetId: 'interactor-bindings-test')
external ffi.Pointer<FILE> open_memstream(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
  ffi.Pointer<ffi.Size> __sizeloc,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'setbuf', assetId: 'interactor-bindings-test')
external void setbuf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
        ffi.Size)>(symbol: 'setvbuf', assetId: 'interactor-bindings-test')
external int setvbuf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
  int __modes,
  int __n,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Size)>(
    symbol: 'setbuffer', assetId: 'interactor-bindings-test')
external void setbuffer(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __buf,
  int __size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'setlinebuf', assetId: 'interactor-bindings-test')
external void setlinebuf(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'fprintf', assetId: 'interactor-bindings-test')
external int fprintf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'printf', assetId: 'interactor-bindings-test')
external int printf(
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'sprintf', assetId: 'interactor-bindings-test')
external int sprintf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vfprintf', assetId: 'interactor-bindings-test')
external int vfprintf(
  ffi.Pointer<FILE> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vprintf', assetId: 'interactor-bindings-test')
external int vprintf(
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsprintf', assetId: 'interactor-bindings-test')
external int vsprintf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>)>(
    symbol: 'snprintf', assetId: 'interactor-bindings-test')
external int snprintf(
  ffi.Pointer<ffi.Char> __s,
  int __maxlen,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsnprintf', assetId: 'interactor-bindings-test')
external int vsnprintf(
  ffi.Pointer<ffi.Char> __s,
  int __maxlen,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vasprintf', assetId: 'interactor-bindings-test')
external int vasprintf(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
  ffi.Pointer<ffi.Char> __f,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>(
    symbol: '__asprintf', assetId: 'interactor-bindings-test')
external int __asprintf(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
  ffi.Pointer<ffi.Char> __fmt,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>(
    symbol: 'asprintf', assetId: 'interactor-bindings-test')
external int asprintf(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
  ffi.Pointer<ffi.Char> __fmt,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vdprintf', assetId: 'interactor-bindings-test')
external int vdprintf(
  int __fd,
  ffi.Pointer<ffi.Char> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>(
    symbol: 'dprintf', assetId: 'interactor-bindings-test')
external int dprintf(
  int __fd,
  ffi.Pointer<ffi.Char> __fmt,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>(
    symbol: 'fscanf', assetId: 'interactor-bindings-test')
external int fscanf(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'scanf', assetId: 'interactor-bindings-test')
external int scanf(
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'sscanf', assetId: 'interactor-bindings-test')
external int sscanf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vfscanf', assetId: 'interactor-bindings-test')
external int vfscanf(
  ffi.Pointer<FILE> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>(
    symbol: 'vscanf', assetId: 'interactor-bindings-test')
external int vscanf(
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>)>(
    symbol: 'vsscanf', assetId: 'interactor-bindings-test')
external int vsscanf(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fgetc', assetId: 'interactor-bindings-test')
external int fgetc(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getc', assetId: 'interactor-bindings-test')
external int getc(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'getchar', assetId: 'interactor-bindings-test')
external int getchar();

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getc_unlocked', assetId: 'interactor-bindings-test')
external int getc_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'getchar_unlocked', assetId: 'interactor-bindings-test')
external int getchar_unlocked();

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fgetc_unlocked', assetId: 'interactor-bindings-test')
external int fgetc_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'fputc', assetId: 'interactor-bindings-test')
external int fputc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putc', assetId: 'interactor-bindings-test')
external int putc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'putchar', assetId: 'interactor-bindings-test')
external int putchar(
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'fputc_unlocked', assetId: 'interactor-bindings-test')
external int fputc_unlocked(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putc_unlocked', assetId: 'interactor-bindings-test')
external int putc_unlocked(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(
    symbol: 'putchar_unlocked', assetId: 'interactor-bindings-test')
external int putchar_unlocked(
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'getw', assetId: 'interactor-bindings-test')
external int getw(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'putw', assetId: 'interactor-bindings-test')
external int putw(
  int __w,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'fgets', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> fgets(
  ffi.Pointer<ffi.Char> __s,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>(
    symbol: '__getdelim', assetId: 'interactor-bindings-test')
external int __getdelim(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
  ffi.Pointer<ffi.Size> __n,
  int __delimiter,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'getdelim', assetId: 'interactor-bindings-test')
external int getdelim(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
  ffi.Pointer<ffi.Size> __n,
  int __delimiter,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>(
    symbol: 'getline', assetId: 'interactor-bindings-test')
external int getline(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
  ffi.Pointer<ffi.Size> __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>(
    symbol: 'fputs', assetId: 'interactor-bindings-test')
external int fputs(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'puts', assetId: 'interactor-bindings-test')
external int puts(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>(
    symbol: 'ungetc', assetId: 'interactor-bindings-test')
external int ungetc(
  int __c,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>(
    symbol: 'fread', assetId: 'interactor-bindings-test')
external int fread(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>(
    symbol: 'fwrite', assetId: 'interactor-bindings-test')
external int fwrite(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __s,
);

@ffi.Native<
        ffi.Size Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>(
    symbol: 'fread_unlocked', assetId: 'interactor-bindings-test')
external int fread_unlocked(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.Size Function(
            ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>(
    symbol: 'fwrite_unlocked', assetId: 'interactor-bindings-test')
external int fwrite_unlocked(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>(
    symbol: 'fseek', assetId: 'interactor-bindings-test')
external int fseek(
  ffi.Pointer<FILE> __stream,
  int __off,
  int __whence,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<FILE>)>(
    symbol: 'ftell', assetId: 'interactor-bindings-test')
external int ftell(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'rewind', assetId: 'interactor-bindings-test')
external void rewind(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>(
    symbol: 'fseeko', assetId: 'interactor-bindings-test')
external int fseeko(
  ffi.Pointer<FILE> __stream,
  int __off,
  int __whence,
);

@ffi.Native<__off_t Function(ffi.Pointer<FILE>)>(
    symbol: 'ftello', assetId: 'interactor-bindings-test')
external int ftello(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>(
    symbol: 'fgetpos', assetId: 'interactor-bindings-test')
external int fgetpos(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<fpos_t> __pos,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>(
    symbol: 'fsetpos', assetId: 'interactor-bindings-test')
external int fsetpos(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<fpos_t> __pos,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'clearerr', assetId: 'interactor-bindings-test')
external void clearerr(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'feof', assetId: 'interactor-bindings-test')
external int feof(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ferror', assetId: 'interactor-bindings-test')
external int ferror(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'clearerr_unlocked', assetId: 'interactor-bindings-test')
external void clearerr_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'feof_unlocked', assetId: 'interactor-bindings-test')
external int feof_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ferror_unlocked', assetId: 'interactor-bindings-test')
external int ferror_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'perror', assetId: 'interactor-bindings-test')
external void perror(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fileno', assetId: 'interactor-bindings-test')
external int fileno(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'fileno_unlocked', assetId: 'interactor-bindings-test')
external int fileno_unlocked(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'pclose', assetId: 'interactor-bindings-test')
external int pclose(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<
        ffi.Pointer<FILE> Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'popen', assetId: 'interactor-bindings-test')
external ffi.Pointer<FILE> popen(
  ffi.Pointer<ffi.Char> __command,
  ffi.Pointer<ffi.Char> __modes,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'ctermid', assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Char> ctermid(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'flockfile', assetId: 'interactor-bindings-test')
external void flockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: 'ftrylockfile', assetId: 'interactor-bindings-test')
external int ftrylockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>)>(
    symbol: 'funlockfile', assetId: 'interactor-bindings-test')
external void funlockfile(
  ffi.Pointer<FILE> __stream,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>(
    symbol: '__uflow', assetId: 'interactor-bindings-test')
external int __uflow(
  ffi.Pointer<FILE> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>(
    symbol: '__overflow', assetId: 'interactor-bindings-test')
external int __overflow(
  ffi.Pointer<FILE> arg0,
  int arg1,
);

@ffi.Native<
        ffi.Int Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<interactor_native_configuration>, ffi.Uint8)>(
    symbol: 'interactor_native_initialize', assetId: 'interactor-bindings-test')
external int interactor_native_initialize(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<interactor_native_configuration> configuration,
  int id,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_native>, ffi.Uint8)>(
    symbol: 'interactor_native_initialize_default',
    assetId: 'interactor-bindings-test')
external int interactor_native_initialize_default(
  ffi.Pointer<interactor_native> interactor,
  int id,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>,
            ffi.Uint64,
            ffi.Uint64,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<linux_interactor.interactor_message>)>>)>(
    symbol: 'interactor_native_register_callback',
    assetId: 'interactor-bindings-test')
external void interactor_native_register_callback(
  ffi.Pointer<interactor_native> interactor,
  int owner,
  int method,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_message>)>>
      callback,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_get_static_buffer',
    assetId: 'interactor-bindings-test')
external int interactor_native_get_static_buffer(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int32)>(
    symbol: 'interactor_native_release_static_buffer',
    assetId: 'interactor-bindings-test')
external void interactor_native_release_static_buffer(
  ffi.Pointer<interactor_native> interactor,
  int buffer_id,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_available_static_buffers',
    assetId: 'interactor-bindings-test')
external int interactor_native_available_static_buffers(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_used_static_buffers',
    assetId: 'interactor-bindings-test')
external int interactor_native_used_static_buffers(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Pointer<interactor_input_buffer> Function(
            ffi.Pointer<interactor_native>, ffi.Size)>(
    symbol: 'interactor_native_io_buffers_allocate_input',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<interactor_input_buffer>
    interactor_native_io_buffers_allocate_input(
  ffi.Pointer<interactor_native> interactor,
  int initial_capacity,
);

@ffi.Native<
        ffi.Pointer<interactor_output_buffer> Function(
            ffi.Pointer<interactor_native>, ffi.Size)>(
    symbol: 'interactor_native_io_buffers_allocate_output',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<interactor_output_buffer>
    interactor_native_io_buffers_allocate_output(
  ffi.Pointer<interactor_native> interactor,
  int initial_capacity,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<interactor_input_buffer>)>(
    symbol: 'interactor_native_io_buffers_free_input',
    assetId: 'interactor-bindings-test')
external void interactor_native_io_buffers_free_input(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<interactor_input_buffer> buffer,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<interactor_output_buffer>)>(
    symbol: 'interactor_native_io_buffers_free_output',
    assetId: 'interactor-bindings-test')
external void interactor_native_io_buffers_free_output(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<interactor_output_buffer> buffer,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<interactor_input_buffer>, ffi.Size)>(
    symbol: 'interactor_native_input_buffer_reserve',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> interactor_native_input_buffer_reserve(
  ffi.Pointer<interactor_input_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<interactor_input_buffer>, ffi.Size)>(
    symbol: 'interactor_native_input_buffer_allocate',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> interactor_native_input_buffer_allocate(
  ffi.Pointer<interactor_input_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<interactor_output_buffer>, ffi.Size)>(
    symbol: 'interactor_native_output_buffer_reserve',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> interactor_native_output_buffer_reserve(
  ffi.Pointer<interactor_output_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<interactor_output_buffer>, ffi.Size)>(
    symbol: 'interactor_native_output_buffer_allocate',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<ffi.Void> interactor_native_output_buffer_allocate(
  ffi.Pointer<interactor_output_buffer> buffer,
  int size,
);

@ffi.Native<
        ffi.Pointer<linux_interactor.interactor_message> Function(
            ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_allocate_message',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<linux_interactor.interactor_message>
    interactor_native_allocate_message(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'interactor_native_free_message',
    assetId: 'interactor-bindings-test')
external void interactor_native_free_message(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<
        ffi.Pointer<interactor_payload_pool> Function(
            ffi.Pointer<interactor_native>, ffi.Size)>(
    symbol: 'interactor_native_payload_pool_create',
    assetId: 'interactor-bindings-test')
external ffi.Pointer<interactor_payload_pool>
    interactor_native_payload_pool_create(
  ffi.Pointer<interactor_native> interactor,
  int size,
);

@ffi.Native<ffi.IntPtr Function(ffi.Pointer<interactor_payload_pool>)>(
    symbol: 'interactor_native_payload_allocate',
    assetId: 'interactor-bindings-test')
external int interactor_native_payload_allocate(
  ffi.Pointer<interactor_payload_pool> pool,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_payload_pool>, ffi.IntPtr)>(
    symbol: 'interactor_native_payload_free',
    assetId: 'interactor-bindings-test')
external void interactor_native_payload_free(
  ffi.Pointer<interactor_payload_pool> pool,
  int pointer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_payload_pool>)>(
    symbol: 'interactor_native_payload_pool_destroy',
    assetId: 'interactor-bindings-test')
external void interactor_native_payload_pool_destroy(
  ffi.Pointer<interactor_payload_pool> pool,
);

@ffi.Native<ffi.IntPtr Function(ffi.Pointer<interactor_native>, ffi.Size)>(
    symbol: 'interactor_native_data_allocate',
    assetId: 'interactor-bindings-test')
external int interactor_native_data_allocate(
  ffi.Pointer<interactor_native> interactor,
  int size,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.IntPtr, ffi.Size)>(
    symbol: 'interactor_native_data_free', assetId: 'interactor-bindings-test')
external void interactor_native_data_free(
  ffi.Pointer<interactor_native> interactor,
  int pointer,
  int size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_count_ready',
    assetId: 'interactor-bindings-test')
external int interactor_native_count_ready(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_count_ready_submit',
    assetId: 'interactor-bindings-test')
external int interactor_native_count_ready_submit(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_process', assetId: 'interactor-bindings-test')
external void interactor_native_process(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_process_infinity',
    assetId: 'interactor-bindings-test')
external void interactor_native_process_infinity(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_process_timeout',
    assetId: 'interactor-bindings-test')
external void interactor_native_process_timeout(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<linux_interactor.interactor_message>)>>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<linux_interactor.interactor_message>)>>)>(
    symbol: 'interactor_native_foreach', assetId: 'interactor-bindings-test')
external void interactor_native_foreach(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_message>)>>
      call,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<linux_interactor.interactor_message>)>>
      callback,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_submit', assetId: 'interactor-bindings-test')
external int interactor_native_submit(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int,
            ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'interactor_native_call_dart', assetId: 'interactor-bindings-test')
external void interactor_native_call_dart(
  ffi.Pointer<interactor_native> interactor,
  int target_ring_fd,
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>,
            ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'interactor_native_callback_to_dart',
    assetId: 'interactor-bindings-test')
external void interactor_native_callback_to_dart(
  ffi.Pointer<interactor_native> interactor,
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'interactor_native_destroy', assetId: 'interactor-bindings-test')
external void interactor_native_destroy(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(
    symbol: 'interactor_native_close_descriptor',
    assetId: 'interactor-bindings-test')
external void interactor_native_close_descriptor(
  int fd,
);

@ffi.Native<ffi.Pointer<interactor_native> Function()>(
    symbol: 'test_interactor_initialize',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external ffi.Pointer<interactor_native> test_interactor_initialize();

@ffi.Native<ffi.Void Function(ffi.Pointer<interactor_native>)>(
    symbol: 'test_interactor_destroy',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_interactor_destroy(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'test_call_reset',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_reset();

@ffi.Native<ffi.Bool Function(ffi.Pointer<interactor_native>)>(
    symbol: 'test_call_native_check',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external bool test_call_native_check(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'test_call_native',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_native(
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Int32, ffi.UintPtr)>(
    symbol: 'test_call_dart_null',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_null(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Int32, ffi.UintPtr, ffi.Bool)>(
    symbol: 'test_call_dart_bool',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_bool(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  bool value,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Int32, ffi.UintPtr, ffi.Int)>(
    symbol: 'test_call_dart_int',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_int(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  int value,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int32,
            ffi.UintPtr, ffi.Double)>(
    symbol: 'test_call_dart_double',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_double(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  double value,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int32,
            ffi.UintPtr, ffi.Pointer<ffi.Char>)>(
    symbol: 'test_call_dart_string',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_string(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  ffi.Pointer<ffi.Char> value,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<interactor_native>, ffi.Int32, ffi.UintPtr, ffi.Int)>(
    symbol: 'test_call_dart_object',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_object(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  int field,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<interactor_native>, ffi.Int32,
            ffi.UintPtr, ffi.Pointer<ffi.Uint8>, ffi.Size)>(
    symbol: 'test_call_dart_bytes',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_bytes(
  ffi.Pointer<interactor_native> interactor,
  int target,
  int method,
  ffi.Pointer<ffi.Uint8> value,
  int count,
);

@ffi.Native<
        ffi.Pointer<linux_interactor.interactor_message> Function(
            ffi.Pointer<interactor_native>)>(
    symbol: 'test_call_dart_check',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external ffi.Pointer<linux_interactor.interactor_message> test_call_dart_check(
  ffi.Pointer<interactor_native> interactor,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'test_call_dart_callback',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_call_dart_callback(
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<ffi.IntPtr Function()>(
    symbol: 'test_call_native_address_lookup',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external int test_call_native_address_lookup();

@ffi.Native<ffi.Bool Function(ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'test_threading_initialize',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external bool test_threading_initialize(
  int thread_count,
  int isolates_count,
  int per_thread_messages_count,
);

@ffi.Native<ffi.Pointer<ffi.Int> Function()>(
    symbol: 'test_threading_interactor_descriptors',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external ffi.Pointer<ffi.Int> test_threading_interactor_descriptors();

@ffi.Native<
        ffi.Void Function(ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'test_threading_call_native',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_threading_call_native(
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'test_threading_call_native_check',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external int test_threading_call_native_check();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Int32>, ffi.Int32)>(
    symbol: 'test_threading_prepare_call_dart_bytes',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_threading_prepare_call_dart_bytes(
  ffi.Pointer<ffi.Int32> targets,
  int count,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'test_threading_call_dart_check',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external int test_threading_call_dart_check();

@ffi.Native<
        ffi.Void Function(ffi.Pointer<linux_interactor.interactor_message>)>(
    symbol: 'test_threading_call_dart_callback',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_threading_call_dart_callback(
  ffi.Pointer<linux_interactor.interactor_message> message,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'test_threading_destroy',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external void test_threading_destroy();

@ffi.Native<ffi.IntPtr Function()>(
    symbol: 'test_threading_call_native_address_lookup',
    assetId: 'interactor-bindings-test',
    isLeaf: true)
external int test_threading_call_native_address_lookup();

final class max_align_t extends ffi.Opaque {}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef ssize_t = __ssize_t;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;
typedef __useconds_t = ffi.UnsignedInt;
typedef Dart__useconds_t = int;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;
typedef __gid_t = ffi.UnsignedInt;
typedef Dart__gid_t = int;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;
typedef Dart__fd_mask = int;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __compar_fn_t = ffi.Pointer<ffi.NativeFunction<__compar_fn_tFunction>>;
typedef __compar_fn_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef Dart__compar_fn_tFunction = int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);

/// @module Input buffer.
final class slab_cache extends ffi.Struct {
  external ffi.Pointer<slab_arena> arena;

  @ffi.Uint32()
  external int order0_size;

  @ffi.Uint8()
  external int order0_size_lb;

  @ffi.Uint8()
  external int order_max;

  /// All allocated slabs used in the cache.
  /// The stats reflect the total used/allocated
  /// memory in the cache.
  external slab_list allocated;

  /// Lists of unused slabs, for each slab order.
  ///
  /// A used slab is removed from the list and its
  /// next_in_list link may be reused for some other purpose.
  @ffi.Array.multi([17])
  external ffi.Array<slab_list> orders;

  @pthread_t()
  external int thread_id;
}

/// slab_arena -- a source of large aligned blocks of memory.
/// MT-safe.
/// Uses a lock-free LIFO to maintain a cache of used slabs.
/// Uses a lock-free quota to limit allocating memory.
/// Never returns memory to the operating system.
final class slab_arena extends ffi.Struct {
  /// A lock free list of cached slabs.
  /// Initially there are no cached slabs, only arena.
  /// As slabs are used and returned to arena, the cache is
  /// used to recycle them.
  external lf_lifo cache;

  /// A preallocated arena of size = prealloc.
  external ffi.Pointer<ffi.Void> arena;

  /// How much memory is preallocated during initialization
  /// of slab_arena.
  @ffi.Size()
  external int prealloc;

  /// How much memory in the arena has
  /// already been initialized for slabs.
  @ffi.Size()
  external int used;

  /// An external quota to which we must adhere.
  /// A quota exists to set a common limit on two arenas.
  // external ffi.Pointer<quota> quota;

  @ffi.Uint32()
  external int slab_size;

  /// SLAB_ARENA_ flags for mmap() and madvise() calls.
  @ffi.Int()
  external int flags;
}

/// A very primitive implementation of lock-free
/// LIFO (last in first out, AKA stack, AKA single-linked
/// list with head-only add and remove).
///
/// It is only usable to store free pages of a memory allocator
/// or similar, since it assumes that all addresses are aligned,
/// and lower 16 bits of address can be used as a counter-based
/// solution for ABA problem.
final class lf_lifo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> next;
}

/// A basic limit on memory usage
final class quota extends ffi.Struct {
  /// High order dword is the total available memory
  /// and the low order dword is the  currently used amount.
  /// Both values are represented in units of size
  /// QUOTA_UNIT_SIZE.
  @ffi.Uint64()
  external int value;
}

/// A general purpose list of slabs. Is used
/// to store unused slabs of a certain order in the
/// slab cache, as well as to contain allocated
/// slabs of a specialized allocator.
final class slab_list extends ffi.Struct {
  external rlist slabs;

  /// Total/used bytes in this list.
  external small_stats stats;
}

/// List entry and head structure.
///
/// All functions has always_inline attribute. This way if caller
/// has no_sanitize_address attribute then rlist functions are not
/// ASAN instrumented too.
final class rlist extends ffi.Struct {
  external ffi.Pointer<rlist> prev;

  external ffi.Pointer<rlist> next;
}

final class small_stats extends ffi.Struct {
  @ffi.Size()
  external int used;

  @ffi.Size()
  external int total;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;

final class ibuf extends ffi.Struct {
  external ffi.Pointer<slab_cache> slabc;

  external ffi.Pointer<ffi.Char> buf;

  /// Start of input.
  external ffi.Pointer<ffi.Char> rpos;

  /// End of useful input
  external ffi.Pointer<ffi.Char> wpos;

  /// End of buffer.
  external ffi.Pointer<ffi.Char> end;

  @ffi.Size()
  external int start_capacity;
}

typedef mode_t = __mode_t;
typedef __mode_t = ffi.UnsignedInt;
typedef Dart__mode_t = int;

abstract class pm_memory_order {
  static const int pm_memory_order_relaxed = 0;
  static const int pm_memory_order_consume = 1;
  static const int pm_memory_order_acquire = 2;
  static const int pm_memory_order_release = 3;
  static const int pm_memory_order_acq_rel = 4;
  static const int pm_memory_order_seq_cst = 5;
}

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;
}

final class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__cpu_mask> __bits;
}

typedef __cpu_mask = ffi.UnsignedLong;
typedef Dart__cpu_mask = int;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Struct {
  external __sigval_t sigev_value;

  @ffi.Int()
  external int sigev_signo;

  @ffi.Int()
  external int sigev_notify;

  external UnnamedUnion1 _sigev_un;
}

typedef __sigval_t = sigval;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Int> _pad;

  @__pid_t()
  external int _tid;

  external UnnamedStruct2 _sigev_thread;
}

final class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(__sigval_t)>>
      _function;

  external ffi.Pointer<pthread_attr_t> _attribute;
}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;
typedef time_t = __time_t;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef Dart__clockid_t = int;
typedef pid_t = __pid_t;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

final class __jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __jmpbuf;

  @ffi.Int()
  external int __mask_was_saved;

  external __sigset_t __saved_mask;
}

final class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

typedef pthread_once_t = ffi.Int;
typedef Dartpthread_once_t = int;

final class __cancel_jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __cancel_jmp_buf;

  @ffi.Int()
  external int __mask_was_saved;
}

final class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<__cancel_jmp_buf_tag> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

final class __pthread_cleanup_frame extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int()
  external int __do_it;

  @ffi.Int()
  external int __cancel_type;
}

typedef pthread_key_t = ffi.UnsignedInt;
typedef Dartpthread_key_t = int;

final class imaxdiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

typedef intmax_t = __intmax_t;
typedef __intmax_t = ffi.Long;
typedef Dart__intmax_t = int;
typedef uintmax_t = __uintmax_t;
typedef __uintmax_t = ffi.UnsignedLong;
typedef Dart__uintmax_t = int;
typedef __gwchar_t = ffi.Int;
typedef Dart__gwchar_t = int;

final class slab extends ffi.Struct {
  external rlist next_in_cache;

  /// Next slab in slab_list->slabs list.
  external rlist next_in_list;

  /// Allocated size.
  /// Is different from (SLAB_MIN_SIZE << slab->order)
  /// when requested size is bigger than SLAB_MAX_SIZE
  /// (i.e. slab->order is SLAB_CLASS_LAST).
  @ffi.Size()
  external int size;

  /// Slab magic (for sanity checks).
  @ffi.Uint32()
  external int magic;

  /// Base of lb(size) for ordered slabs.
  @ffi.Uint8()
  external int order;

  /// Only used for buddy slabs. If the buddy of the current
  /// free slab is also free, both slabs are merged and
  /// a free slab of the higher order emerges.
  /// Value of 0 means the slab is free. Otherwise
  /// slab->in_use is set to slab->order + 1.
  @ffi.Uint8()
  external int in_use;
}

/// Allocation statistics.
final class mempool_stats extends ffi.Struct {
  /// Object size.
  @ffi.Uint32()
  external int objsize;

  /// Total objects allocated.
  @ffi.Uint32()
  external int objcount;

  /// Size of the slab.
  @ffi.Uint32()
  external int slabsize;

  /// Number of slabs. All slabs are of the same size.
  @ffi.Uint32()
  external int slabcount;

  /// Memory used and booked but passive (to see fragmentation).
  external small_stats totals;
}

final class lifo extends ffi.Struct {
  external ffi.Pointer<ffi.Void> next;
}

/// A memory pool.
final class mempool extends ffi.Struct {
  /// The source of empty slabs.
  external ffi.Pointer<slab_cache> cache;

  /// All slabs.
  external slab_list slabs;

  /// Slabs with some amount of free space available are put
  /// into this red-black tree, which is sorted by slab
  /// address. A (partially) free slab with the smallest
  /// address is chosen for allocation. This reduces internal
  /// memory fragmentation across many slabs.
  external mslab_tree_t hot_slabs;

  /// Cached leftmost node of hot_slabs tree.
  external ffi.Pointer<mslab> first_hot_slab;

  /// Slabs with a little of free items count, staged to
  /// be added to hot_slabs tree. Are  used in case the
  /// tree is empty or the allocator runs out of memory.
  external rlist cold_slabs;

  /// A completely empty slab which is not freed only to
  /// avoid the overhead of slab_cache oscillation around
  /// a single element allocation.
  external ffi.Pointer<mslab> spare;

  /// The size of an individual object. All objects
  /// allocated on the pool have the same size.
  @ffi.Uint32()
  external int objsize;

  /// Mempool slabs are ordered (@sa slab_cache.h for
  /// definition of "ordered"). The order is calculated
  /// when the pool is initialized or is set explicitly.
  /// The latter is necessary for 'small' allocator,
  /// which needs to quickly find mempool containing
  /// an allocated object when the object is freed.
  @ffi.Uint8()
  external int slab_order;

  /// How many objects can fit in a slab.
  @ffi.Uint32()
  external int objcount;

  /// Offset from beginning of slab to the first object
  @ffi.Uint32()
  external int offset;

  /// Address mask to translate ptr to slab
  @ffi.IntPtr()
  external int slab_ptr_mask;

  /// Small allocator pool, the owner of this mempool in case
  /// this mempool used as a part of small_alloc, otherwise
  /// NULL
  // external ffi.Pointer<small_mempool> small_mempool;
}

final class mslab_tree_t extends ffi.Struct {
  external ffi.Pointer<mslab> rbt_root;
}

/// mslab - a standard slab formatted to store objects of equal size.
final class mslab extends ffi.Struct {
  external slab slab1;

  external ffi.Pointer<ffi.Void> free_list;

  /// Offset of an object that has never been allocated in mslab
  @ffi.Uint32()
  external int free_offset;

  /// Number of available slots in the slab.
  @ffi.Uint32()
  external int nfree;

  /// Used if this slab is a member of hot_slabs tree.
  external UnnamedStruct3 next_in_hot;

  /// Next slab in stagged slabs list in mempool object
  external rlist next_in_cold;

  /// Set if this slab is a member of hot_slabs tree
  @ffi.Bool()
  external bool in_hot_slabs;

  /// Pointer to mempool, the owner of this mslab
  // external ffi.Pointer<mempool> mempool;
}

final class UnnamedStruct3 extends ffi.Struct {
  external ffi.Pointer<mslab> rbn_left;

  external ffi.Pointer<mslab> rbn_right_red;
}

/// A mempool to store objects sized from objsize_min to pool->objsize.
/// Is a member of small_mempool_cache array which contains all such pools.
/// All this pools are created when creating an allocator. Their sizes and
/// count are calculated depending on alloc_factor and granularity, using
/// small_class.
final class small_mempool extends ffi.Struct {
  /// the pool itself.
  external mempool pool;

  /// Objects starting from this size and up to
  /// pool->objsize are stored in this factored
  /// pool.
  @ffi.Size()
  external int objsize_min;

  /// Small mempool group that this pool belongs to.
  external ffi.Pointer<small_mempool_group> group;

  /// Currently used pool for memory allocation. In case waste is
  /// less than @waste_max of corresponding mempool_group, @used_pool
  /// points to this structure itself.
  external ffi.Pointer<small_mempool> used_pool;

  /// Mask of appropriate pools. It is calculated once pool is created.
  /// Values of mask for:
  /// Pool 0: 0x0001 (0000 0000 0000 0001)
  /// Pool 1: 0x0003 (0000 0000 0000 0011)
  /// Pool 2: 0x0007 (0000 0000 0000 0111)
  /// And so forth.
  @ffi.Uint32()
  external int appropriate_pool_mask;

  /// Currently memory waste for a given mempool. Waste is calculated as
  /// amount of excess memory spent for storing small object in pools
  /// with large object size. For instance, if we store object with size
  /// of 15 bytes in a 64-byte pool having inactive 32-byte pool, the loss
  /// will be: 64 bytes - 32 bytes = 32 bytes.
  @ffi.Size()
  external int waste;
}

final class small_mempool_group extends ffi.Struct {
  /// The first pool in the group.
  external ffi.Pointer<small_mempool> first;

  /// The last pool in the group.
  external ffi.Pointer<small_mempool> last;

  /// Raised bit on position n means that the pool with index n can be
  /// used for allocations. At the start only one pool (the last one)
  /// is available. Also note that once pool become active, it can't
  /// become
  @ffi.Uint32()
  external int active_pool_mask;

  /// Pre-calculated waste threshold reaching which small_mempool becomes
  /// activated. It is equal to slab_order_size / 4.
  @ffi.Size()
  external int waste_max;
}

/// Output buffer savepoint. It's possible to
/// save the current buffer state in a savepoint
/// and roll back to the saved state at any time
/// before obuf_reset()
final class obuf_svp extends ffi.Struct {
  @ffi.Size()
  external int pos;

  @ffi.Size()
  external int iov_len;

  @ffi.Size()
  external int used;
}

final class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Size()
  external int iov_len;
}

/// An output buffer is a vector of struct iovec
/// for writev().
/// Each iovec buffer is allocated using slab allocator.
/// Buffer size grows by a factor of 2. With this growth factor,
/// the number of used buffers is unlikely to ever exceed the
/// hard limit of SMALL_OBUF_IOV_MAX. If it does, an exception is
/// raised.
final class obuf extends ffi.Struct {
  external ffi.Pointer<slab_cache> slabc;

  /// Position of the "current" iovec.
  @ffi.Int()
  external int pos;

  @ffi.Int()
  external int n_iov;

  @ffi.Size()
  external int used;

  /// iov[0] size (allocations are normally a multiple of this number),
  /// but can be larger if a large chunk is requested by
  /// obuf_reserve().
  @ffi.Size()
  external int start_capacity;

  /// How many bytes are actually allocated for each iovec.
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Size> capacity;

  /// List of iovec vectors, each vector is at least twice
  /// as big as the previous one. The vector following the
  /// last allocated one is always zero-initialized
  /// (iov_base = NULL, iov_len = 0).
  @ffi.Array.multi([32])
  external ffi.Array<iovec> iov;

  /// The flag is used to check that there is no 2 reservations in a row.
  /// The same check that has the ASAN version.
  @ffi.Bool()
  external bool reserved;
}

/// Information on the memory allocation.
final class small_alloc_info extends ffi.Struct {
  /// True if the object is allocated on the large slab (by malloc),
  /// false if it is allocated on the mempool.
  @ffi.Bool()
  external bool is_large;

  /// Size of the memory block that is actually allocated for the
  /// requested size.
  @ffi.Size()
  external int real_size;
}

final class small_class extends ffi.Struct {
  /// Every class size must be a multiple of this.
  @ffi.UnsignedInt()
  external int granularity;

  /// log2(granularity), ignore those number of the lowest bit of size.
  @ffi.UnsignedInt()
  external int ignore_bits_count;

  /// A number of bits (after the most significant bit) that are used in
  /// size class evaluation ('n' in the Explanation above).
  @ffi.UnsignedInt()
  external int effective_bits;

  /// 1u << effective_bits.
  @ffi.UnsignedInt()
  external int effective_size;

  /// effective_size - 1u.
  @ffi.UnsignedInt()
  external int effective_mask;

  /// By default the lowest possible allocation size (aka class size of
  /// class 0) is granularity. If a user wants different min_alloc, we
  /// simply shift sizes; min_alloc = granularity + size_shift.
  @ffi.UnsignedInt()
  external int size_shift;

  /// Actually we need 'size_shift + 1', so store it.
  @ffi.UnsignedInt()
  external int size_shift_plus_1;

  /// Exponential factor, approximation of which we managed to provide.
  /// It is calculated from requested_factor, it's guaranteed that
  /// it must be in range [requested_factor/k, requested_factor*k],
  /// where k = pow(requested_factor, 0.5).
  @ffi.Float()
  external double actual_factor;
}

/// A slab allocator for a wide range of object sizes.
final class small_alloc extends ffi.Struct {
  external ffi.Pointer<slab_cache> cache;

  /// Array of all small mempools of a given allocator
  @ffi.Array.multi([1024])
  external ffi.Array<small_mempool> small_mempool_cache;

  @ffi.Uint32()
  external int small_mempool_cache_size;

  /// Array of all small mempool groups of a given allocator
  @ffi.Array.multi([1024])
  external ffi.Array<small_mempool_group> small_mempool_groups;

  @ffi.Uint32()
  external int small_mempool_groups_size;

  /// The factor used for factored pools. Must be > 1.
  /// Is provided during initialization.
  @ffi.Float()
  external double factor;

  /// Small class for this allocator
  external small_class small_class1;

  @ffi.Uint32()
  external int objsize_max;
}

final class interactor_memory extends ffi.Struct {
  external quota quota1;

  external slab_arena arena;

  external slab_cache cache;
}

final class interactor_pool extends ffi.Struct {
  external mempool pool;
}

final class interactor_small_allocator extends ffi.Struct {
  external small_alloc allocator;
}

final class interactor_input_buffer extends ffi.Struct {
  external ibuf buffer;

  @ffi.Size()
  external int last_reserved_size;
}

final class interactor_output_buffer extends ffi.Struct {
  external obuf buffer;

  @ffi.Size()
  external int last_reserved_size;
}

final class interactor_data_pool extends ffi.Struct {
  external interactor_small_allocator pool;
}

final class interactor_messages_pool extends ffi.Struct {
  external interactor_pool pool;
}

final class interactor_payload_pool extends ffi.Struct {
  external interactor_pool pool;

  @ffi.Size()
  external int size;
}

abstract class __socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

final class sockaddr extends ffi.Struct {
  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef sa_family_t = ffi.UnsignedShort;
typedef Dartsa_family_t = int;

final class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Char> __ss_padding;

  @ffi.UnsignedLong()
  external int __ss_align;
}

final class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @socklen_t()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Size()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Size()
  external int msg_controllen;

  @ffi.Int()
  external int msg_flags;
}

typedef socklen_t = __socklen_t;
typedef __socklen_t = ffi.UnsignedInt;
typedef Dart__socklen_t = int;

final class cmsghdr extends ffi.Opaque {}

final class __kernel_fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> fds_bits;
}

final class __kernel_fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> val;
}

final class linger extends ffi.Struct {
  @ffi.Int()
  external int l_onoff;

  @ffi.Int()
  external int l_linger;
}

final class osockaddr extends ffi.Struct {
  @ffi.UnsignedShort()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.UnsignedChar> sa_data;
}

final class stat extends ffi.Struct {
  @__dev_t()
  external int st_dev;

  @__ino_t()
  external int st_ino;

  @__nlink_t()
  external int st_nlink;

  @__mode_t()
  external int st_mode;

  @__uid_t()
  external int st_uid;

  @__gid_t()
  external int st_gid;

  @ffi.Int()
  external int __pad0;

  @__dev_t()
  external int st_rdev;

  @__off_t()
  external int st_size;

  @__blksize_t()
  external int st_blksize;

  @__blkcnt_t()
  external int st_blocks;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  @ffi.Array.multi([3])
  external ffi.Array<__syscall_slong_t> __glibc_reserved;
}

typedef __dev_t = ffi.UnsignedLong;
typedef Dart__dev_t = int;
typedef __ino_t = ffi.UnsignedLong;
typedef Dart__ino_t = int;
typedef __nlink_t = ffi.UnsignedLong;
typedef Dart__nlink_t = int;
typedef __blksize_t = ffi.Long;
typedef Dart__blksize_t = int;
typedef __blkcnt_t = ffi.Long;
typedef Dart__blkcnt_t = int;

final class siginfo_t extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @ffi.Int()
  external int __pad0;

  external UnnamedUnion2 _sifields;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([28])
  external ffi.Array<ffi.Int> _pad;

  external UnnamedStruct4 _kill;

  external UnnamedStruct5 _timer;

  external UnnamedStruct6 _rt;

  external UnnamedStruct7 _sigchld;

  external UnnamedStruct8 _sigfault;

  external UnnamedStruct10 _sigpoll;

  external UnnamedStruct11 _sigsys;
}

final class UnnamedStruct4 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;
}

final class UnnamedStruct5 extends ffi.Struct {
  @ffi.Int()
  external int si_tid;

  @ffi.Int()
  external int si_overrun;

  external __sigval_t si_sigval;
}

final class UnnamedStruct6 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  external __sigval_t si_sigval;
}

final class UnnamedStruct7 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  @__clock_t()
  external int si_utime;

  @__clock_t()
  external int si_stime;
}

final class UnnamedStruct8 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> si_addr;

  @ffi.Short()
  external int si_addr_lsb;

  external UnnamedUnion3 _bounds;
}

final class UnnamedUnion3 extends ffi.Union {
  external UnnamedStruct9 _addr_bnd;

  @__uint32_t()
  external int _pkey;
}

final class UnnamedStruct9 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _lower;

  external ffi.Pointer<ffi.Void> _upper;
}

final class UnnamedStruct10 extends ffi.Struct {
  @ffi.Long()
  external int si_band;

  @ffi.Int()
  external int si_fd;
}

final class UnnamedStruct11 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _call_addr;

  @ffi.Int()
  external int _syscall;

  @ffi.UnsignedInt()
  external int _arch;
}

typedef __sighandler_t
    = ffi.Pointer<ffi.NativeFunction<__sighandler_tFunction>>;
typedef __sighandler_tFunction = ffi.Void Function(ffi.Int);
typedef Dart__sighandler_tFunction = void Function(int);
typedef sigset_t = __sigset_t;

final class sigaction extends ffi.Struct {
  external UnnamedUnion4 __sigaction_handler;

  external __sigset_t sa_mask;

  @ffi.Int()
  external int sa_flags;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> sa_restorer;
}

final class UnnamedUnion4 extends ffi.Union {
  external __sighandler_t sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>>
      sa_sigaction;
}

final class _fpx_sw_bytes extends ffi.Struct {
  @__uint32_t()
  external int magic1;

  @__uint32_t()
  external int extended_size;

  @__uint64_t()
  external int xstate_bv;

  @__uint32_t()
  external int xstate_size;

  @ffi.Array.multi([7])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

typedef __uint64_t = ffi.UnsignedLong;
typedef Dart__uint64_t = int;

final class _fpreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;
}

final class _fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __glibc_reserved1;
}

final class _xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

final class _fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;

final class sigcontext extends ffi.Struct {
  @__uint64_t()
  external int r8;

  @__uint64_t()
  external int r9;

  @__uint64_t()
  external int r10;

  @__uint64_t()
  external int r11;

  @__uint64_t()
  external int r12;

  @__uint64_t()
  external int r13;

  @__uint64_t()
  external int r14;

  @__uint64_t()
  external int r15;

  @__uint64_t()
  external int rdi;

  @__uint64_t()
  external int rsi;

  @__uint64_t()
  external int rbp;

  @__uint64_t()
  external int rbx;

  @__uint64_t()
  external int rdx;

  @__uint64_t()
  external int rax;

  @__uint64_t()
  external int rcx;

  @__uint64_t()
  external int rsp;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int eflags;

  @ffi.UnsignedShort()
  external int cs;

  @ffi.UnsignedShort()
  external int gs;

  @ffi.UnsignedShort()
  external int fs;

  @ffi.UnsignedShort()
  external int __pad0;

  @__uint64_t()
  external int err;

  @__uint64_t()
  external int trapno;

  @__uint64_t()
  external int oldmask;

  @__uint64_t()
  external int cr2;

  external UnnamedUnion5 unnamed;

  @ffi.Array.multi([8])
  external ffi.Array<__uint64_t> __reserved1;
}

final class UnnamedUnion5 extends ffi.Union {
  external ffi.Pointer<_fpstate> fpstate;

  @__uint64_t()
  external int __fpstate_word;
}

final class _xsave_hdr extends ffi.Struct {
  @__uint64_t()
  external int xstate_bv;

  @ffi.Array.multi([2])
  external ffi.Array<__uint64_t> __glibc_reserved1;

  @ffi.Array.multi([5])
  external ffi.Array<__uint64_t> __glibc_reserved2;
}

final class _ymmh_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> ymmh_space;
}

final class _xstate extends ffi.Struct {
  external _fpstate fpstate;

  external _xsave_hdr xstate_hdr;

  external _ymmh_state ymmh;
}

final class stack_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int()
  external int ss_flags;

  @ffi.Size()
  external int ss_size;
}

final class _libc_fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __glibc_reserved1;
}

final class _libc_xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

final class _libc_fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_libc_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_libc_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

final class mcontext_t extends ffi.Struct {
  @ffi.Array.multi([23])
  external ffi.Array<greg_t> gregs;

  external fpregset_t fpregs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedLongLong> __reserved1;
}

typedef greg_t = ffi.LongLong;
typedef Dartgreg_t = int;
typedef fpregset_t = ffi.Pointer<_libc_fpstate>;

final class ucontext_t extends ffi.Struct {
  @ffi.UnsignedLong()
  external int uc_flags;

  external ffi.Pointer<ucontext_t> uc_link;

  external stack_t uc_stack;

  external mcontext_t uc_mcontext;

  external sigset_t uc_sigmask;

  external _libc_fpstate __fpregs_mem;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedLongLong> __ssp;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class flock extends ffi.Struct {
  @ffi.Short()
  external int l_type;

  @ffi.Short()
  external int l_whence;

  @__off_t()
  external int l_start;

  @__off_t()
  external int l_len;

  @__pid_t()
  external int l_pid;
}

typedef off_t = __off_t;

final class __kernel_timespec extends ffi.Struct {
  @__kernel_time64_t()
  external int tv_sec;

  @ffi.LongLong()
  external int tv_nsec;
}

typedef __kernel_time64_t = ffi.LongLong;
typedef Dart__kernel_time64_t = int;

final class __kernel_itimerspec extends ffi.Struct {
  external __kernel_timespec it_interval;

  external __kernel_timespec it_value;
}

final class __kernel_old_timeval extends ffi.Struct {
  @__kernel_long_t()
  external int tv_sec;

  @__kernel_long_t()
  external int tv_usec;
}

typedef __kernel_long_t = ffi.Long;
typedef Dart__kernel_long_t = int;

final class __kernel_old_timespec extends ffi.Struct {
  @__kernel_old_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

typedef __kernel_old_time_t = __kernel_long_t;

final class __kernel_old_itimerval extends ffi.Struct {
  external __kernel_old_timeval it_interval;

  external __kernel_old_timeval it_value;
}

final class __kernel_sock_timeval extends ffi.Struct {
  @__s64()
  external int tv_sec;

  @__s64()
  external int tv_usec;
}

typedef __s64 = ffi.LongLong;
typedef Dart__s64 = int;

final class open_how extends ffi.Struct {
  @__u64()
  external int flags;

  @__u64()
  external int mode;

  @__u64()
  external int resolve;
}

typedef __u64 = ffi.UnsignedLongLong;
typedef Dart__u64 = int;

final class fscrypt_policy_v1 extends ffi.Struct {
  @__u8()
  external int version;

  @__u8()
  external int contents_encryption_mode;

  @__u8()
  external int filenames_encryption_mode;

  @__u8()
  external int flags;

  @ffi.Array.multi([8])
  external ffi.Array<__u8> master_key_descriptor;
}

typedef __u8 = ffi.UnsignedChar;
typedef Dart__u8 = int;

final class fscrypt_key extends ffi.Struct {
  @__u32()
  external int mode;

  @ffi.Array.multi([64])
  external ffi.Array<__u8> raw;

  @__u32()
  external int size;
}

typedef __u32 = ffi.UnsignedInt;
typedef Dart__u32 = int;

final class fscrypt_policy_v2 extends ffi.Struct {
  @__u8()
  external int version;

  @__u8()
  external int contents_encryption_mode;

  @__u8()
  external int filenames_encryption_mode;

  @__u8()
  external int flags;

  @ffi.Array.multi([4])
  external ffi.Array<__u8> __reserved;

  @ffi.Array.multi([16])
  external ffi.Array<__u8> master_key_identifier;
}

final class fscrypt_get_policy_ex_arg extends ffi.Struct {
  @__u64()
  external int policy_size;

  external UnnamedUnion6 policy;
}

final class UnnamedUnion6 extends ffi.Union {
  @__u8()
  external int version;

  external fscrypt_policy_v1 v1;

  external fscrypt_policy_v2 v2;
}

final class fscrypt_key_specifier extends ffi.Struct {
  @__u32()
  external int type;

  @__u32()
  external int __reserved;

  external UnnamedUnion7 u;
}

final class UnnamedUnion7 extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<__u8> __reserved;

  @ffi.Array.multi([8])
  external ffi.Array<__u8> descriptor;

  @ffi.Array.multi([16])
  external ffi.Array<__u8> identifier;
}

final class fscrypt_provisioning_key_payload extends ffi.Opaque {}

final class fscrypt_add_key_arg extends ffi.Opaque {}

final class fscrypt_remove_key_arg extends ffi.Struct {
  external fscrypt_key_specifier key_spec;

  @__u32()
  external int removal_status_flags;

  @ffi.Array.multi([5])
  external ffi.Array<__u32> __reserved;
}

final class fscrypt_get_key_status_arg extends ffi.Struct {
  external fscrypt_key_specifier key_spec;

  @ffi.Array.multi([6])
  external ffi.Array<__u32> __reserved;

  @__u32()
  external int status;

  @__u32()
  external int status_flags;

  @__u32()
  external int user_count;

  @ffi.Array.multi([13])
  external ffi.Array<__u32> __out_reserved;
}

abstract class fsconfig_command {
  static const int FSCONFIG_SET_FLAG = 0;
  static const int FSCONFIG_SET_STRING = 1;
  static const int FSCONFIG_SET_BINARY = 2;
  static const int FSCONFIG_SET_PATH = 3;
  static const int FSCONFIG_SET_PATH_EMPTY = 4;
  static const int FSCONFIG_SET_FD = 5;
  static const int FSCONFIG_CMD_CREATE = 6;
  static const int FSCONFIG_CMD_RECONFIGURE = 7;
}

final class mount_attr extends ffi.Struct {
  @__u64()
  external int attr_set;

  @__u64()
  external int attr_clr;

  @__u64()
  external int propagation;

  @__u64()
  external int userns_fd;
}

final class file_clone_range extends ffi.Struct {
  @__s64()
  external int src_fd;

  @__u64()
  external int src_offset;

  @__u64()
  external int src_length;

  @__u64()
  external int dest_offset;
}

final class fstrim_range extends ffi.Struct {
  @__u64()
  external int start;

  @__u64()
  external int len;

  @__u64()
  external int minlen;
}

final class file_dedupe_range_info extends ffi.Struct {
  @__s64()
  external int dest_fd;

  @__u64()
  external int dest_offset;

  @__u64()
  external int bytes_deduped;

  @__s32()
  external int status;

  @__u32()
  external int reserved;
}

typedef __s32 = ffi.Int;
typedef Dart__s32 = int;

final class file_dedupe_range extends ffi.Opaque {}

final class files_stat_struct extends ffi.Struct {
  @ffi.UnsignedLong()
  external int nr_files;

  @ffi.UnsignedLong()
  external int nr_free_files;

  @ffi.UnsignedLong()
  external int max_files;
}

final class inodes_stat_t extends ffi.Struct {
  @ffi.Long()
  external int nr_inodes;

  @ffi.Long()
  external int nr_unused;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Long> dummy;
}

final class fsxattr extends ffi.Struct {
  @__u32()
  external int fsx_xflags;

  @__u32()
  external int fsx_extsize;

  @__u32()
  external int fsx_nextents;

  @__u32()
  external int fsx_projid;

  @__u32()
  external int fsx_cowextsize;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> fsx_pad;
}

final class io_uring_sqe extends ffi.Opaque {}

abstract class io_uring_op {
  static const int IORING_OP_NOP = 0;
  static const int IORING_OP_READV = 1;
  static const int IORING_OP_WRITEV = 2;
  static const int IORING_OP_FSYNC = 3;
  static const int IORING_OP_READ_FIXED = 4;
  static const int IORING_OP_WRITE_FIXED = 5;
  static const int IORING_OP_POLL_ADD = 6;
  static const int IORING_OP_POLL_REMOVE = 7;
  static const int IORING_OP_SYNC_FILE_RANGE = 8;
  static const int IORING_OP_SENDMSG = 9;
  static const int IORING_OP_RECVMSG = 10;
  static const int IORING_OP_TIMEOUT = 11;
  static const int IORING_OP_TIMEOUT_REMOVE = 12;
  static const int IORING_OP_ACCEPT = 13;
  static const int IORING_OP_ASYNC_CANCEL = 14;
  static const int IORING_OP_LINK_TIMEOUT = 15;
  static const int IORING_OP_CONNECT = 16;
  static const int IORING_OP_FALLOCATE = 17;
  static const int IORING_OP_OPENAT = 18;
  static const int IORING_OP_CLOSE = 19;
  static const int IORING_OP_FILES_UPDATE = 20;
  static const int IORING_OP_STATX = 21;
  static const int IORING_OP_READ = 22;
  static const int IORING_OP_WRITE = 23;
  static const int IORING_OP_FADVISE = 24;
  static const int IORING_OP_MADVISE = 25;
  static const int IORING_OP_SEND = 26;
  static const int IORING_OP_RECV = 27;
  static const int IORING_OP_OPENAT2 = 28;
  static const int IORING_OP_EPOLL_CTL = 29;
  static const int IORING_OP_SPLICE = 30;
  static const int IORING_OP_PROVIDE_BUFFERS = 31;
  static const int IORING_OP_REMOVE_BUFFERS = 32;
  static const int IORING_OP_TEE = 33;
  static const int IORING_OP_SHUTDOWN = 34;
  static const int IORING_OP_RENAMEAT = 35;
  static const int IORING_OP_UNLINKAT = 36;
  static const int IORING_OP_MKDIRAT = 37;
  static const int IORING_OP_SYMLINKAT = 38;
  static const int IORING_OP_LINKAT = 39;
  static const int IORING_OP_MSG_RING = 40;
  static const int IORING_OP_FSETXATTR = 41;
  static const int IORING_OP_SETXATTR = 42;
  static const int IORING_OP_FGETXATTR = 43;
  static const int IORING_OP_GETXATTR = 44;
  static const int IORING_OP_SOCKET = 45;
  static const int IORING_OP_URING_CMD = 46;
  static const int IORING_OP_SEND_ZC = 47;
  static const int IORING_OP_SENDMSG_ZC = 48;
  static const int IORING_OP_LAST = 49;
}

final class io_uring_cqe extends ffi.Struct {@ffi.UnsignedLongLong()external int user_data; @ffi.Int() external int res; @ffi.UnsignedInt()external int flags;}

final class io_sqring_offsets extends ffi.Struct {
  @__u32()
  external int head;

  @__u32()
  external int tail;

  @__u32()
  external int ring_mask;

  @__u32()
  external int ring_entries;

  @__u32()
  external int flags;

  @__u32()
  external int dropped;

  @__u32()
  external int array;

  @__u32()
  external int resv1;

  @__u64()
  external int user_addr;
}

final class io_cqring_offsets extends ffi.Struct {
  @__u32()
  external int head;

  @__u32()
  external int tail;

  @__u32()
  external int ring_mask;

  @__u32()
  external int ring_entries;

  @__u32()
  external int overflow;

  @__u32()
  external int cqes;

  @__u32()
  external int flags;

  @__u32()
  external int resv1;

  @__u64()
  external int user_addr;
}

final class io_uring_params extends ffi.Struct {
  @__u32()
  external int sq_entries;

  @__u32()
  external int cq_entries;

  @__u32()
  external int flags;

  @__u32()
  external int sq_thread_cpu;

  @__u32()
  external int sq_thread_idle;

  @__u32()
  external int features;

  @__u32()
  external int wq_fd;

  @ffi.Array.multi([3])
  external ffi.Array<__u32> resv;

  external io_sqring_offsets sq_off;

  external io_cqring_offsets cq_off;
}

final class io_uring_files_update extends ffi.Struct {
  @__u32()
  external int offset;

  @__u32()
  external int resv;

  @__u64()
  external int fds;
}

final class io_uring_rsrc_register extends ffi.Struct {
  @__u32()
  external int nr;

  @__u32()
  external int flags;

  @__u64()
  external int resv2;

  @__u64()
  external int data;

  @__u64()
  external int tags;
}

final class io_uring_rsrc_update extends ffi.Struct {
  @__u32()
  external int offset;

  @__u32()
  external int resv;

  @__u64()
  external int data;
}

final class io_uring_rsrc_update2 extends ffi.Struct {
  @__u32()
  external int offset;

  @__u32()
  external int resv;

  @__u64()
  external int data;

  @__u64()
  external int tags;

  @__u32()
  external int nr;

  @__u32()
  external int resv2;
}

final class io_uring_probe_op extends ffi.Struct {
  @__u8()
  external int op;

  @__u8()
  external int resv;

  @__u16()
  external int flags;

  @__u32()
  external int resv2;
}

typedef __u16 = ffi.UnsignedShort;
typedef Dart__u16 = int;

final class io_uring_probe extends ffi.Opaque {}

final class io_uring_restriction extends ffi.Struct {
  @__u16()
  external int opcode;

  external UnnamedUnion14 unnamed;

  @__u8()
  external int resv;

  @ffi.Array.multi([3])
  external ffi.Array<__u32> resv2;
}

final class UnnamedUnion14 extends ffi.Union {
  @__u8()
  external int register_op;

  @__u8()
  external int sqe_op;

  @__u8()
  external int sqe_flags;
}

final class io_uring_buf extends ffi.Struct {
  @__u64()
  external int addr;

  @__u32()
  external int len;

  @__u16()
  external int bid;

  @__u16()
  external int resv;
}

final class io_uring_buf_ring extends ffi.Opaque {}

final class io_uring_buf_reg extends ffi.Struct {
  @__u64()
  external int ring_addr;

  @__u32()
  external int ring_entries;

  @__u16()
  external int bgid;

  @__u16()
  external int flags;

  @ffi.Array.multi([3])
  external ffi.Array<__u64> resv;
}

final class io_uring_getevents_arg extends ffi.Struct {
  @__u64()
  external int sigmask;

  @__u32()
  external int sigmask_sz;

  @__u32()
  external int pad;

  @__u64()
  external int ts;
}

final class io_uring_sync_cancel_reg extends ffi.Struct {
  @__u64()
  external int addr;

  @__s32()
  external int fd;

  @__u32()
  external int flags;

  external __kernel_timespec timeout;

  @ffi.Array.multi([4])
  external ffi.Array<__u64> pad;
}

final class io_uring_file_index_range extends ffi.Struct {
  @__u32()
  external int off;

  @__u32()
  external int len;

  @__u64()
  external int resv;
}

final class io_uring_recvmsg_out extends ffi.Struct {
  @__u32()
  external int namelen;

  @__u32()
  external int controllen;

  @__u32()
  external int payloadlen;

  @__u32()
  external int flags;
}

abstract class memory_order {
  static const int memory_order_relaxed = 0;
  static const int memory_order_consume = 1;
  static const int memory_order_acquire = 2;
  static const int memory_order_release = 3;
  static const int memory_order_acq_rel = 4;
  static const int memory_order_seq_cst = 5;
}

final class io_uring_sq extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedInt> khead;

  external ffi.Pointer<ffi.UnsignedInt> ktail;

  external ffi.Pointer<ffi.UnsignedInt> kring_mask;

  external ffi.Pointer<ffi.UnsignedInt> kring_entries;

  external ffi.Pointer<ffi.UnsignedInt> kflags;

  external ffi.Pointer<ffi.UnsignedInt> kdropped;

  external ffi.Pointer<ffi.UnsignedInt> array;

  external ffi.Pointer<io_uring_sqe> sqes;

  @ffi.UnsignedInt()
  external int sqe_head;

  @ffi.UnsignedInt()
  external int sqe_tail;

  @ffi.Size()
  external int ring_sz;

  external ffi.Pointer<ffi.Void> ring_ptr;

  @ffi.UnsignedInt()
  external int ring_mask;

  @ffi.UnsignedInt()
  external int ring_entries;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> pad;
}

final class io_uring_cq extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedInt> khead;

  external ffi.Pointer<ffi.UnsignedInt> ktail;

  external ffi.Pointer<ffi.UnsignedInt> kring_mask;

  external ffi.Pointer<ffi.UnsignedInt> kring_entries;

  external ffi.Pointer<ffi.UnsignedInt> kflags;

  external ffi.Pointer<ffi.UnsignedInt> koverflow;

  external ffi.Pointer<io_uring_cqe> cqes;

  @ffi.Size()
  external int ring_sz;

  external ffi.Pointer<ffi.Void> ring_ptr;

  @ffi.UnsignedInt()
  external int ring_mask;

  @ffi.UnsignedInt()
  external int ring_entries;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> pad;
}

final class io_uring extends ffi.Struct {
  external io_uring_sq sq;

  external io_uring_cq cq;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Int()
  external int ring_fd;

  @ffi.UnsignedInt()
  external int features;

  @ffi.Int()
  external int enter_ring_fd;

  @__u8()
  external int int_flags;

  @ffi.Array.multi([3])
  external ffi.Array<__u8> pad;

  @ffi.UnsignedInt()
  external int pad2;
}

final class statx extends ffi.Opaque {}

final class epoll_event extends ffi.Opaque {}

final class interactor_io_buffers extends ffi.Struct {
  external interactor_pool input_buffers;

  external interactor_pool output_buffers;

  external ffi.Pointer<interactor_memory> memory;
}

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion16 __value;
}

final class UnnamedUnion16 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

final class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

final class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

final class _IO_cookie_io_functions_t extends ffi.Struct {
  external ffi.Pointer<cookie_read_function_t> read;

  external ffi.Pointer<cookie_write_function_t> write;

  external ffi.Pointer<cookie_seek_function_t> seek;

  external ffi.Pointer<cookie_close_function_t> close;
}

typedef cookie_read_function_t = ffi.NativeFunction<
    __ssize_t Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef cookie_write_function_t = ffi.NativeFunction<
    __ssize_t Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef cookie_seek_function_t = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<__off64_t> __pos, ffi.Int __w)>;
typedef cookie_close_function_t
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> __cookie)>;
typedef FILE = _IO_FILE;
typedef cookie_io_functions_t = _IO_cookie_io_functions_t;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

final class interactor_static_buffers extends ffi.Struct {
  @ffi.Size()
  external int available;

  @ffi.Size()
  external int size;

  @ffi.Size()
  external int capacity;

  external ffi.Pointer<ffi.Int32> ids;

  external ffi.Pointer<iovec> buffers;
}

final class interactor_native_configuration extends ffi.Struct {
  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Size()
  external int quota_size;

  @ffi.Size()
  external int preallocation_size;

  @ffi.Size()
  external int slab_size;

  @ffi.Size()
  external int static_buffers_capacity;

  @ffi.Size()
  external int static_buffer_size;

  @ffi.Size()
  external int ring_size;

  @ffi.Int32()
  external int ring_flags;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;
}

final class interactor_native extends ffi.Struct {
  external interactor_messages_pool messages_pool;

  external interactor_static_buffers static_buffers;

  external interactor_io_buffers io_buffers;

  external interactor_data_pool data_pool;

  external interactor_memory memory;

  @ffi.Uint64()
  external int cqe_wait_timeout_millis;

  @ffi.Size()
  external int ring_size;

  external ffi.Pointer<io_uring> ring;

  external ffi.Pointer<ffi.Pointer<io_uring_cqe>> cqes;

  external ffi.Pointer<ffi.Void> callbacks;

  @ffi.Int32()
  external int descriptor;

  @ffi.Int32()
  external int ring_flags;

  @ffi.Uint32()
  external int cqe_wait_count;

  @ffi.Uint32()
  external int cqe_peek_count;

  @ffi.Uint8()
  external int id;
}

final class test_object_child extends ffi.Struct {
  @ffi.Int()
  external int field;
}

final class test_object extends ffi.Struct {
  @ffi.Int()
  external int field;

  external test_object_child child_field;
}

final class test_thread extends ffi.Struct {
  @pthread_t()
  external int id;

  @ffi.Bool()
  external bool alive;

  @ffi.Size()
  external int whole_messages_count;

  @ffi.Size()
  external int received_messages_count;

  external ffi.Pointer<interactor_native> interactor;

  external ffi.Pointer<ffi.Pointer<linux_interactor.interactor_message>>
      messages;

  external pthread_cond_t initialize_condition;

  external pthread_mutex_t initialize_mutex;
}

final class test_threads extends ffi.Struct {
  external ffi.Pointer<test_thread> threads;

  @ffi.Size()
  external int count;

  external pthread_mutex_t global_working_mutex;
}

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _SC_MINSIGSTKSZ = 249;

const int _SC_SIGSTKSZ = 250;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int SLAB_MIN_SIZE = 65536;

const int SMALL_UNLIMITED = -9223372036854775808;

const int SLAB_ARENA_PRIVATE = -2147483647;

const int SLAB_ARENA_SHARED = -2147483646;

const int SLAB_ARENA_DONTDUMP = -2147483644;

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int ORDER_MAX = 16;

const int RB_WALK_LEFT = 1;

const int RB_WALK_RIGHT = 2;

const int SMALL_OBUF_IOV_MAX = 31;

const int SMALL_MEMPOOL_MAX = 1024;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int SI_ASYNCNL = -60;

const int SI_DETHREAD = -7;

const int SI_TKILL = -6;

const int SI_SIGIO = -5;

const int SI_ASYNCIO = -4;

const int SI_MESGQ = -3;

const int SI_TIMER = -2;

const int SI_QUEUE = -1;

const int SI_USER = 0;

const int SI_KERNEL = 128;

const int ILL_ILLOPC = 1;

const int ILL_ILLOPN = 2;

const int ILL_ILLADR = 3;

const int ILL_ILLTRP = 4;

const int ILL_PRVOPC = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int ILL_BADIADDR = 9;

const int FPE_INTDIV = 1;

const int FPE_INTOVF = 2;

const int FPE_FLTDIV = 3;

const int FPE_FLTOVF = 4;

const int FPE_FLTUND = 5;

const int FPE_FLTRES = 6;

const int FPE_FLTINV = 7;

const int FPE_FLTSUB = 8;

const int FPE_FLTUNK = 14;

const int FPE_CONDTRAP = 15;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int SEGV_BNDERR = 3;

const int SEGV_PKUERR = 4;

const int SEGV_ACCADI = 5;

const int SEGV_ADIDERR = 6;

const int SEGV_ADIPERR = 7;

const int SEGV_MTEAERR = 8;

const int SEGV_MTESERR = 9;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int BUS_MCEERR_AR = 4;

const int BUS_MCEERR_AO = 5;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SIGEV_SIGNAL = 0;

const int SIGEV_NONE = 1;

const int SIGEV_THREAD = 2;

const int SIGEV_THREAD_ID = 4;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 2;

const int IOSQE_FIXED_FILE_BIT = 0;

const int IOSQE_IO_DRAIN_BIT = 1;

const int IOSQE_IO_LINK_BIT = 2;

const int IOSQE_IO_HARDLINK_BIT = 3;

const int IOSQE_ASYNC_BIT = 4;

const int IOSQE_BUFFER_SELECT_BIT = 5;

const int IOSQE_CQE_SKIP_SUCCESS_BIT = 6;

const int IORING_MSG_DATA = 0;

const int IORING_MSG_SEND_FD = 1;

const int IORING_CQE_BUFFER_SHIFT = 16;

const int IORING_REGISTER_BUFFERS = 0;

const int IORING_UNREGISTER_BUFFERS = 1;

const int IORING_REGISTER_FILES = 2;

const int IORING_UNREGISTER_FILES = 3;

const int IORING_REGISTER_EVENTFD = 4;

const int IORING_UNREGISTER_EVENTFD = 5;

const int IORING_REGISTER_FILES_UPDATE = 6;

const int IORING_REGISTER_EVENTFD_ASYNC = 7;

const int IORING_REGISTER_PROBE = 8;

const int IORING_REGISTER_PERSONALITY = 9;

const int IORING_UNREGISTER_PERSONALITY = 10;

const int IORING_REGISTER_RESTRICTIONS = 11;

const int IORING_REGISTER_ENABLE_RINGS = 12;

const int IORING_REGISTER_FILES2 = 13;

const int IORING_REGISTER_FILES_UPDATE2 = 14;

const int IORING_REGISTER_BUFFERS2 = 15;

const int IORING_REGISTER_BUFFERS_UPDATE = 16;

const int IORING_REGISTER_IOWQ_AFF = 17;

const int IORING_UNREGISTER_IOWQ_AFF = 18;

const int IORING_REGISTER_IOWQ_MAX_WORKERS = 19;

const int IORING_REGISTER_RING_FDS = 20;

const int IORING_UNREGISTER_RING_FDS = 21;

const int IORING_REGISTER_PBUF_RING = 22;

const int IORING_UNREGISTER_PBUF_RING = 23;

const int IORING_REGISTER_SYNC_CANCEL = 24;

const int IORING_REGISTER_FILE_ALLOC_RANGE = 25;

const int IORING_REGISTER_LAST = 26;

const int IORING_REGISTER_USE_REGISTERED_RING = -2147483648;

const int IO_WQ_BOUND = 0;

const int IO_WQ_UNBOUND = 1;

const int IOU_PBUF_RING_MMAP = 1;

const int IORING_RESTRICTION_REGISTER_OP = 0;

const int IORING_RESTRICTION_SQE_OP = 1;

const int IORING_RESTRICTION_SQE_FLAGS_ALLOWED = 2;

const int IORING_RESTRICTION_SQE_FLAGS_REQUIRED = 3;

const int IORING_RESTRICTION_LAST = 4;

const int SOCKET_URING_OP_SIOCINQ = 0;

const int SOCKET_URING_OP_SIOCOUTQ = 1;

const int NULL = 0;

const int _ASSERT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 38;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _UNISTD_H = 1;

const int _POSIX_VERSION = 200809;

const int __POSIX2_THIS_VERSION = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_LOCALEDEF = 200809;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_FSYNC = 200809;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_VDISABLE = 0;

const int _POSIX_NO_TRUNC = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _POSIX_THREADS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_REGEXP = 1;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPAWN = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_IPV6 = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _XBS5_LP64_OFF64 = 1;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS =
    '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int _PC_LINK_MAX1 = 0;

const int _PC_MAX_CANON1 = 1;

const int _PC_MAX_INPUT1 = 2;

const int _PC_NAME_MAX1 = 3;

const int _PC_PATH_MAX1 = 4;

const int _PC_PIPE_BUF1 = 5;

const int _PC_CHOWN_RESTRICTED1 = 6;

const int _PC_NO_TRUNC1 = 7;

const int _PC_VDISABLE1 = 8;

const int _PC_SYNC_IO1 = 9;

const int _PC_ASYNC_IO1 = 10;

const int _PC_PRIO_IO1 = 11;

const int _PC_SOCK_MAXBUF1 = 12;

const int _PC_FILESIZEBITS1 = 13;

const int _PC_REC_INCR_XFER_SIZE1 = 14;

const int _PC_REC_MAX_XFER_SIZE1 = 15;

const int _PC_REC_MIN_XFER_SIZE1 = 16;

const int _PC_REC_XFER_ALIGN1 = 17;

const int _PC_ALLOC_SIZE_MIN1 = 18;

const int _PC_SYMLINK_MAX1 = 19;

const int _PC_2_SYMLINKS1 = 20;

const int _SC_ARG_MAX1 = 0;

const int _SC_CHILD_MAX1 = 1;

const int _SC_CLK_TCK1 = 2;

const int _SC_NGROUPS_MAX1 = 3;

const int _SC_OPEN_MAX1 = 4;

const int _SC_STREAM_MAX1 = 5;

const int _SC_TZNAME_MAX1 = 6;

const int _SC_JOB_CONTROL1 = 7;

const int _SC_SAVED_IDS1 = 8;

const int _SC_REALTIME_SIGNALS1 = 9;

const int _SC_PRIORITY_SCHEDULING1 = 10;

const int _SC_TIMERS1 = 11;

const int _SC_ASYNCHRONOUS_IO1 = 12;

const int _SC_PRIORITIZED_IO1 = 13;

const int _SC_SYNCHRONIZED_IO1 = 14;

const int _SC_FSYNC1 = 15;

const int _SC_MAPPED_FILES1 = 16;

const int _SC_MEMLOCK1 = 17;

const int _SC_MEMLOCK_RANGE1 = 18;

const int _SC_MEMORY_PROTECTION1 = 19;

const int _SC_MESSAGE_PASSING1 = 20;

const int _SC_SEMAPHORES1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS1 = 22;

const int _SC_AIO_LISTIO_MAX1 = 23;

const int _SC_AIO_MAX1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX1 = 25;

const int _SC_DELAYTIMER_MAX1 = 26;

const int _SC_MQ_OPEN_MAX1 = 27;

const int _SC_MQ_PRIO_MAX1 = 28;

const int _SC_VERSION1 = 29;

const int _SC_PAGESIZE1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_RTSIG_MAX1 = 31;

const int _SC_SEM_NSEMS_MAX1 = 32;

const int _SC_SEM_VALUE_MAX1 = 33;

const int _SC_SIGQUEUE_MAX1 = 34;

const int _SC_TIMER_MAX1 = 35;

const int _SC_BC_BASE_MAX1 = 36;

const int _SC_BC_DIM_MAX1 = 37;

const int _SC_BC_SCALE_MAX1 = 38;

const int _SC_BC_STRING_MAX1 = 39;

const int _SC_COLL_WEIGHTS_MAX1 = 40;

const int _SC_EQUIV_CLASS_MAX1 = 41;

const int _SC_EXPR_NEST_MAX1 = 42;

const int _SC_LINE_MAX1 = 43;

const int _SC_RE_DUP_MAX1 = 44;

const int _SC_CHARCLASS_NAME_MAX1 = 45;

const int _SC_2_VERSION1 = 46;

const int _SC_2_C_BIND1 = 47;

const int _SC_2_C_DEV1 = 48;

const int _SC_2_FORT_DEV1 = 49;

const int _SC_2_FORT_RUN1 = 50;

const int _SC_2_SW_DEV1 = 51;

const int _SC_2_LOCALEDEF1 = 52;

const int _SC_PII1 = 53;

const int _SC_PII_XTI1 = 54;

const int _SC_PII_SOCKET1 = 55;

const int _SC_PII_INTERNET1 = 56;

const int _SC_PII_OSI1 = 57;

const int _SC_POLL1 = 58;

const int _SC_SELECT1 = 59;

const int _SC_UIO_MAXIOV1 = 60;

const int _SC_IOV_MAX1 = 60;

const int _SC_PII_INTERNET_STREAM1 = 61;

const int _SC_PII_INTERNET_DGRAM1 = 62;

const int _SC_PII_OSI_COTS1 = 63;

const int _SC_PII_OSI_CLTS1 = 64;

const int _SC_PII_OSI_M1 = 65;

const int _SC_T_IOV_MAX1 = 66;

const int _SC_THREADS1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS1 = 68;

const int _SC_GETGR_R_SIZE_MAX1 = 69;

const int _SC_GETPW_R_SIZE_MAX1 = 70;

const int _SC_LOGIN_NAME_MAX1 = 71;

const int _SC_TTY_NAME_MAX1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS1 = 73;

const int _SC_THREAD_KEYS_MAX1 = 74;

const int _SC_THREAD_STACK_MIN1 = 75;

const int _SC_THREAD_THREADS_MAX1 = 76;

const int _SC_THREAD_ATTR_STACKADDR1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING1 = 79;

const int _SC_THREAD_PRIO_INHERIT1 = 80;

const int _SC_THREAD_PRIO_PROTECT1 = 81;

const int _SC_THREAD_PROCESS_SHARED1 = 82;

const int _SC_NPROCESSORS_CONF1 = 83;

const int _SC_NPROCESSORS_ONLN1 = 84;

const int _SC_PHYS_PAGES1 = 85;

const int _SC_AVPHYS_PAGES1 = 86;

const int _SC_ATEXIT_MAX1 = 87;

const int _SC_PASS_MAX1 = 88;

const int _SC_XOPEN_VERSION1 = 89;

const int _SC_XOPEN_XCU_VERSION1 = 90;

const int _SC_XOPEN_UNIX1 = 91;

const int _SC_XOPEN_CRYPT1 = 92;

const int _SC_XOPEN_ENH_I18N1 = 93;

const int _SC_XOPEN_SHM1 = 94;

const int _SC_2_CHAR_TERM1 = 95;

const int _SC_2_C_VERSION1 = 96;

const int _SC_2_UPE1 = 97;

const int _SC_XOPEN_XPG21 = 98;

const int _SC_XOPEN_XPG31 = 99;

const int _SC_XOPEN_XPG41 = 100;

const int _SC_CHAR_BIT1 = 101;

const int _SC_CHAR_MAX1 = 102;

const int _SC_CHAR_MIN1 = 103;

const int _SC_INT_MAX1 = 104;

const int _SC_INT_MIN1 = 105;

const int _SC_LONG_BIT1 = 106;

const int _SC_WORD_BIT1 = 107;

const int _SC_MB_LEN_MAX1 = 108;

const int _SC_NZERO1 = 109;

const int _SC_SSIZE_MAX1 = 110;

const int _SC_SCHAR_MAX1 = 111;

const int _SC_SCHAR_MIN1 = 112;

const int _SC_SHRT_MAX1 = 113;

const int _SC_SHRT_MIN1 = 114;

const int _SC_UCHAR_MAX1 = 115;

const int _SC_UINT_MAX1 = 116;

const int _SC_ULONG_MAX1 = 117;

const int _SC_USHRT_MAX1 = 118;

const int _SC_NL_ARGMAX1 = 119;

const int _SC_NL_LANGMAX1 = 120;

const int _SC_NL_MSGMAX1 = 121;

const int _SC_NL_NMAX1 = 122;

const int _SC_NL_SETMAX1 = 123;

const int _SC_NL_TEXTMAX1 = 124;

const int _SC_XBS5_ILP32_OFF321 = 125;

const int _SC_XBS5_ILP32_OFFBIG1 = 126;

const int _SC_XBS5_LP64_OFF641 = 127;

const int _SC_XBS5_LPBIG_OFFBIG1 = 128;

const int _SC_XOPEN_LEGACY1 = 129;

const int _SC_XOPEN_REALTIME1 = 130;

const int _SC_XOPEN_REALTIME_THREADS1 = 131;

const int _SC_ADVISORY_INFO1 = 132;

const int _SC_BARRIERS1 = 133;

const int _SC_BASE1 = 134;

const int _SC_C_LANG_SUPPORT1 = 135;

const int _SC_C_LANG_SUPPORT_R1 = 136;

const int _SC_CLOCK_SELECTION1 = 137;

const int _SC_CPUTIME1 = 138;

const int _SC_THREAD_CPUTIME1 = 139;

const int _SC_DEVICE_IO1 = 140;

const int _SC_DEVICE_SPECIFIC1 = 141;

const int _SC_DEVICE_SPECIFIC_R1 = 142;

const int _SC_FD_MGMT1 = 143;

const int _SC_FIFO1 = 144;

const int _SC_PIPE1 = 145;

const int _SC_FILE_ATTRIBUTES1 = 146;

const int _SC_FILE_LOCKING1 = 147;

const int _SC_FILE_SYSTEM1 = 148;

const int _SC_MONOTONIC_CLOCK1 = 149;

const int _SC_MULTI_PROCESS1 = 150;

const int _SC_SINGLE_PROCESS1 = 151;

const int _SC_NETWORKING1 = 152;

const int _SC_READER_WRITER_LOCKS1 = 153;

const int _SC_SPIN_LOCKS1 = 154;

const int _SC_REGEXP1 = 155;

const int _SC_REGEX_VERSION1 = 156;

const int _SC_SHELL1 = 157;

const int _SC_SIGNALS1 = 158;

const int _SC_SPAWN1 = 159;

const int _SC_SPORADIC_SERVER1 = 160;

const int _SC_THREAD_SPORADIC_SERVER1 = 161;

const int _SC_SYSTEM_DATABASE1 = 162;

const int _SC_SYSTEM_DATABASE_R1 = 163;

const int _SC_TIMEOUTS1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS1 = 165;

const int _SC_USER_GROUPS1 = 166;

const int _SC_USER_GROUPS_R1 = 167;

const int _SC_2_PBS1 = 168;

const int _SC_2_PBS_ACCOUNTING1 = 169;

const int _SC_2_PBS_LOCATE1 = 170;

const int _SC_2_PBS_MESSAGE1 = 171;

const int _SC_2_PBS_TRACK1 = 172;

const int _SC_SYMLOOP_MAX1 = 173;

const int _SC_STREAMS1 = 174;

const int _SC_2_PBS_CHECKPOINT1 = 175;

const int _SC_V6_ILP32_OFF321 = 176;

const int _SC_V6_ILP32_OFFBIG1 = 177;

const int _SC_V6_LP64_OFF641 = 178;

const int _SC_V6_LPBIG_OFFBIG1 = 179;

const int _SC_HOST_NAME_MAX1 = 180;

const int _SC_TRACE1 = 181;

const int _SC_TRACE_EVENT_FILTER1 = 182;

const int _SC_TRACE_INHERIT1 = 183;

const int _SC_TRACE_LOG1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE1 = 190;

const int _SC_LEVEL2_CACHE_SIZE1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE1 = 193;

const int _SC_LEVEL3_CACHE_SIZE1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE1 = 196;

const int _SC_LEVEL4_CACHE_SIZE1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE1 = 199;

const int _SC_IPV61 = 235;

const int _SC_RAW_SOCKETS1 = 236;

const int _SC_V7_ILP32_OFF321 = 237;

const int _SC_V7_ILP32_OFFBIG1 = 238;

const int _SC_V7_LP64_OFF641 = 239;

const int _SC_V7_LPBIG_OFFBIG1 = 240;

const int _SC_SS_REPL_MAX1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX1 = 242;

const int _SC_TRACE_NAME_MAX1 = 243;

const int _SC_TRACE_SYS_MAX1 = 244;

const int _SC_TRACE_USER_EVENT_MAX1 = 245;

const int _SC_XOPEN_STREAMS1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT1 = 248;

const int _SC_MINSIGSTKSZ1 = 249;

const int _SC_SIGSTKSZ1 = 250;

const int _CS_PATH1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS1 = 1;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS1 = 4;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS1 = 5;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS1 = 1000;

const int _CS_LFS_LDFLAGS1 = 1001;

const int _CS_LFS_LIBS1 = 1002;

const int _CS_LFS_LINTFLAGS1 = 1003;

const int _CS_LFS64_CFLAGS1 = 1004;

const int _CS_LFS64_LDFLAGS1 = 1005;

const int _CS_LFS64_LIBS1 = 1006;

const int _CS_LFS64_LINTFLAGS1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS1 = 1147;

const int _CS_V6_ENV1 = 1148;

const int _CS_V7_ENV1 = 1149;

const int _GETOPT_POSIX_H = 1;

const int _GETOPT_CORE_H = 1;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int _LIBC_LIMITS_H_ = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -9223372036854775808;

const int LONG_MAX = 9223372036854775807;

const int ULONG_MAX = -1;

const int _STRING_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int _BITS_STDINT_INTN_H = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _STDINT_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int TARANTOOL_SMALL_HAVE_MAP_ANON = 1;

const int TARANTOOL_SMALL_HAVE_MAP_ANONYMOUS = 1;

const int TARANTOOL_SMALL_HAVE_MADVISE = 1;

const int TARANTOOL_SMALL_HAVE_MADV_DONTDUMP = 1;

const int TARANTOOL_SMALL_USE_MADVISE = 1;

const int _SYS_MMAN_H = 1;

const int MAP_32BIT = 64;

const int MAP_GROWSDOWN = 256;

const int MAP_DENYWRITE = 2048;

const int MAP_EXECUTABLE = 4096;

const int MAP_LOCKED = 8192;

const int MAP_NORESERVE = 16384;

const int MAP_POPULATE = 32768;

const int MAP_NONBLOCK = 65536;

const int MAP_STACK = 131072;

const int MAP_HUGETLB = 262144;

const int MAP_SYNC = 524288;

const int MAP_FIXED_NOREPLACE = 1048576;

const int PROT_READ = 1;

const int PROT_WRITE = 2;

const int PROT_EXEC = 4;

const int PROT_NONE = 0;

const int PROT_GROWSDOWN = 16777216;

const int PROT_GROWSUP = 33554432;

const int MAP_SHARED = 1;

const int MAP_PRIVATE = 2;

const int MAP_SHARED_VALIDATE = 3;

const int MAP_TYPE = 15;

const int MAP_FIXED = 16;

const int MAP_FILE = 0;

const int MAP_ANONYMOUS = 32;

const int MAP_ANON = 32;

const int MAP_HUGE_SHIFT = 26;

const int MAP_HUGE_MASK = 63;

const int MS_ASYNC = 1;

const int MS_SYNC = 4;

const int MS_INVALIDATE = 2;

const int MADV_NORMAL = 0;

const int MADV_RANDOM = 1;

const int MADV_SEQUENTIAL = 2;

const int MADV_WILLNEED = 3;

const int MADV_DONTNEED = 4;

const int MADV_FREE = 8;

const int MADV_REMOVE = 9;

const int MADV_DONTFORK = 10;

const int MADV_DOFORK = 11;

const int MADV_MERGEABLE = 12;

const int MADV_UNMERGEABLE = 13;

const int MADV_HUGEPAGE = 14;

const int MADV_NOHUGEPAGE = 15;

const int MADV_DONTDUMP = 16;

const int MADV_DODUMP = 17;

const int MADV_WIPEONFORK = 18;

const int MADV_KEEPONFORK = 19;

const int MADV_COLD = 20;

const int MADV_PAGEOUT = 21;

const int MADV_POPULATE_READ = 22;

const int MADV_POPULATE_WRITE = 23;

const int MADV_DONTNEED_LOCKED = 24;

const int MADV_COLLAPSE = 25;

const int MADV_HWPOISON = 100;

const int POSIX_MADV_NORMAL = 0;

const int POSIX_MADV_RANDOM = 1;

const int POSIX_MADV_SEQUENTIAL = 2;

const int POSIX_MADV_WILLNEED = 3;

const int POSIX_MADV_DONTNEED = 4;

const int MCL_CURRENT = 1;

const int MCL_FUTURE = 2;

const int MCL_ONFAULT = 4;

const int SLAB_ARENA_FLAG_MARK = 2147483648;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int _PTHREAD_H = 1;

const int _SCHED_H = 1;

const int _BITS_SCHED_H = 1;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_CPU_SET_H = 1;

const int __CPU_SETSIZE = 1024;

const int __NCPUBITS = 64;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int TIME_UTC = 1;

const int _BITS_SETJMP_H = 1;

const int __jmp_buf_tag_defined = 1;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int _INTTYPES_H = 1;

const int ____gwchar_t_defined = 1;

const String __PRI64_PREFIX = 'l';

const String __PRIPTR_PREFIX = 'l';

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const int RB_COMPACT = 1;

const int RB_MAX_TREE_HEIGHT = 48;

const int _SYS_UIO_H = 1;

const int __iovec_defined = 1;

const int _BITS_UIO_LIM_H = 1;

const int __IOV_MAX = 1024;

const int UIO_MAXIOV = 1024;

const int QUOTA_UNIT_SIZE = 1024;

const int _XOPEN_SOURCE = 700;

const int _GNU_SOURCE = 1;

const int _SYS_SOCKET_H = 1;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_DCCP = 6;

const int SOCK_PACKET = 10;

const int SOCK_CLOEXEC = 524288;

const int SOCK_NONBLOCK = 2048;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_FILE = 1;

const int PF_INET = 2;

const int PF_AX25 = 3;

const int PF_IPX = 4;

const int PF_APPLETALK = 5;

const int PF_NETROM = 6;

const int PF_BRIDGE = 7;

const int PF_ATMPVC = 8;

const int PF_X25 = 9;

const int PF_INET6 = 10;

const int PF_ROSE = 11;

const int PF_DECnet = 12;

const int PF_NETBEUI = 13;

const int PF_SECURITY = 14;

const int PF_KEY = 15;

const int PF_NETLINK = 16;

const int PF_ROUTE = 16;

const int PF_PACKET = 17;

const int PF_ASH = 18;

const int PF_ECONET = 19;

const int PF_ATMSVC = 20;

const int PF_RDS = 21;

const int PF_SNA = 22;

const int PF_IRDA = 23;

const int PF_PPPOX = 24;

const int PF_WANPIPE = 25;

const int PF_LLC = 26;

const int PF_IB = 27;

const int PF_MPLS = 28;

const int PF_CAN = 29;

const int PF_TIPC = 30;

const int PF_BLUETOOTH = 31;

const int PF_IUCV = 32;

const int PF_RXRPC = 33;

const int PF_ISDN = 34;

const int PF_PHONET = 35;

const int PF_IEEE802154 = 36;

const int PF_CAIF = 37;

const int PF_ALG = 38;

const int PF_NFC = 39;

const int PF_VSOCK = 40;

const int PF_KCM = 41;

const int PF_QIPCRTR = 42;

const int PF_SMC = 43;

const int PF_XDP = 44;

const int PF_MCTP = 45;

const int PF_MAX = 46;

const int AF_UNSPEC = 0;

const int AF_LOCAL = 1;

const int AF_UNIX = 1;

const int AF_FILE = 1;

const int AF_INET = 2;

const int AF_AX25 = 3;

const int AF_IPX = 4;

const int AF_APPLETALK = 5;

const int AF_NETROM = 6;

const int AF_BRIDGE = 7;

const int AF_ATMPVC = 8;

const int AF_X25 = 9;

const int AF_INET6 = 10;

const int AF_ROSE = 11;

const int AF_DECnet = 12;

const int AF_NETBEUI = 13;

const int AF_SECURITY = 14;

const int AF_KEY = 15;

const int AF_NETLINK = 16;

const int AF_ROUTE = 16;

const int AF_PACKET = 17;

const int AF_ASH = 18;

const int AF_ECONET = 19;

const int AF_ATMSVC = 20;

const int AF_RDS = 21;

const int AF_SNA = 22;

const int AF_IRDA = 23;

const int AF_PPPOX = 24;

const int AF_WANPIPE = 25;

const int AF_LLC = 26;

const int AF_IB = 27;

const int AF_MPLS = 28;

const int AF_CAN = 29;

const int AF_TIPC = 30;

const int AF_BLUETOOTH = 31;

const int AF_IUCV = 32;

const int AF_RXRPC = 33;

const int AF_ISDN = 34;

const int AF_PHONET = 35;

const int AF_IEEE802154 = 36;

const int AF_CAIF = 37;

const int AF_ALG = 38;

const int AF_NFC = 39;

const int AF_VSOCK = 40;

const int AF_KCM = 41;

const int AF_QIPCRTR = 42;

const int AF_SMC = 43;

const int AF_XDP = 44;

const int AF_MCTP = 45;

const int AF_MAX = 46;

const int SOL_RAW = 255;

const int SOL_DECNET = 261;

const int SOL_X25 = 262;

const int SOL_PACKET = 263;

const int SOL_ATM = 264;

const int SOL_AAL = 265;

const int SOL_IRDA = 266;

const int SOL_NETBEUI = 267;

const int SOL_LLC = 268;

const int SOL_DCCP = 269;

const int SOL_NETLINK = 270;

const int SOL_TIPC = 271;

const int SOL_RXRPC = 272;

const int SOL_PPPOL2TP = 273;

const int SOL_BLUETOOTH = 274;

const int SOL_PNPIPE = 275;

const int SOL_RDS = 276;

const int SOL_IUCV = 277;

const int SOL_CAIF = 278;

const int SOL_ALG = 279;

const int SOL_NFC = 280;

const int SOL_KCM = 281;

const int SOL_TLS = 282;

const int SOL_XDP = 283;

const int SOL_MPTCP = 284;

const int SOL_MCTP = 285;

const int SOL_SMC = 286;

const int SOMAXCONN = 4096;

const int _BITS_SOCKADDR_H = 1;

const int __SOCKADDR_COMMON_SIZE = 2;

const int _SS_SIZE = 128;

const int _SS_PADSIZE = 118;

const int MSG_OOB1 = 1;

const int MSG_PEEK1 = 2;

const int MSG_DONTROUTE1 = 4;

const int MSG_CTRUNC1 = 8;

const int MSG_PROXY1 = 16;

const int MSG_TRUNC1 = 32;

const int MSG_DONTWAIT1 = 64;

const int MSG_EOR1 = 128;

const int MSG_WAITALL1 = 256;

const int MSG_FIN1 = 512;

const int MSG_SYN1 = 1024;

const int MSG_CONFIRM1 = 2048;

const int MSG_RST1 = 4096;

const int MSG_ERRQUEUE1 = 8192;

const int MSG_NOSIGNAL1 = 16384;

const int MSG_MORE1 = 32768;

const int MSG_WAITFORONE1 = 65536;

const int MSG_BATCH1 = 262144;

const int MSG_ZEROCOPY1 = 67108864;

const int MSG_FASTOPEN1 = 536870912;

const int MSG_CMSG_CLOEXEC1 = 1073741824;

const int SCM_RIGHTS1 = 1;

const int __BITS_PER_LONG = 64;

const int FIOSETOWN = 35073;

const int SIOCSPGRP = 35074;

const int FIOGETOWN = 35075;

const int SIOCGPGRP = 35076;

const int SIOCATMARK = 35077;

const int SIOCGSTAMP_OLD = 35078;

const int SIOCGSTAMPNS_OLD = 35079;

const int SOL_SOCKET = 1;

const int SO_DEBUG = 1;

const int SO_REUSEADDR = 2;

const int SO_TYPE = 3;

const int SO_ERROR = 4;

const int SO_DONTROUTE = 5;

const int SO_BROADCAST = 6;

const int SO_SNDBUF = 7;

const int SO_RCVBUF = 8;

const int SO_SNDBUFFORCE = 32;

const int SO_RCVBUFFORCE = 33;

const int SO_KEEPALIVE = 9;

const int SO_OOBINLINE = 10;

const int SO_NO_CHECK = 11;

const int SO_PRIORITY = 12;

const int SO_LINGER = 13;

const int SO_BSDCOMPAT = 14;

const int SO_REUSEPORT = 15;

const int SO_PASSCRED = 16;

const int SO_PEERCRED = 17;

const int SO_RCVLOWAT = 18;

const int SO_SNDLOWAT = 19;

const int SO_RCVTIMEO_OLD = 20;

const int SO_SNDTIMEO_OLD = 21;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_BINDTODEVICE = 25;

const int SO_ATTACH_FILTER = 26;

const int SO_DETACH_FILTER = 27;

const int SO_GET_FILTER = 26;

const int SO_PEERNAME = 28;

const int SO_ACCEPTCONN = 30;

const int SO_PEERSEC = 31;

const int SO_PASSSEC = 34;

const int SO_MARK = 36;

const int SO_PROTOCOL = 38;

const int SO_DOMAIN = 39;

const int SO_RXQ_OVFL = 40;

const int SO_WIFI_STATUS = 41;

const int SCM_WIFI_STATUS = 41;

const int SO_PEEK_OFF = 42;

const int SO_NOFCS = 43;

const int SO_LOCK_FILTER = 44;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_BUSY_POLL = 46;

const int SO_MAX_PACING_RATE = 47;

const int SO_BPF_EXTENSIONS = 48;

const int SO_INCOMING_CPU = 49;

const int SO_ATTACH_BPF = 50;

const int SO_DETACH_BPF = 27;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_CNX_ADVICE = 53;

const int SCM_TIMESTAMPING_OPT_STATS = 54;

const int SO_MEMINFO = 55;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_COOKIE = 57;

const int SCM_TIMESTAMPING_PKTINFO = 58;

const int SO_PEERGROUPS = 59;

const int SO_ZEROCOPY = 60;

const int SO_TXTIME = 61;

const int SCM_TXTIME = 61;

const int SO_BINDTOIFINDEX = 62;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_RCVTIMEO_NEW = 66;

const int SO_SNDTIMEO_NEW = 67;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_PREFER_BUSY_POLL = 69;

const int SO_BUSY_POLL_BUDGET = 70;

const int SO_NETNS_COOKIE = 71;

const int SO_BUF_LOCK = 72;

const int SO_RESERVE_MEM = 73;

const int SO_TXREHASH = 74;

const int SO_RCVMARK = 75;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPING = 37;

const int SO_RCVTIMEO = 20;

const int SO_SNDTIMEO = 21;

const int SCM_TIMESTAMP = 29;

const int SCM_TIMESTAMPNS = 35;

const int SCM_TIMESTAMPING = 37;

const int __osockaddr_defined = 1;

const int SHUT_RD1 = 0;

const int SHUT_WR1 = 1;

const int SHUT_RDWR1 = 2;

const int _SYS_STAT_H = 1;

const int _BITS_STAT_H = 1;

const int _BITS_STRUCT_STAT_H = 1;

const int __S_IFMT = 61440;

const int __S_IFDIR = 16384;

const int __S_IFCHR = 8192;

const int __S_IFBLK = 24576;

const int __S_IFREG = 32768;

const int __S_IFIFO = 4096;

const int __S_IFLNK = 40960;

const int __S_IFSOCK = 49152;

const int __S_ISUID = 2048;

const int __S_ISGID = 1024;

const int __S_ISVTX = 512;

const int __S_IREAD = 256;

const int __S_IWRITE = 128;

const int __S_IEXEC = 64;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXU = 448;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXG = 56;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_IRWXO = 7;

const int ACCESSPERMS = 511;

const int ALLPERMS = 4095;

const int DEFFILEMODE = 438;

const int S_BLKSIZE = 512;

const int _ERRNO_H = 1;

const int _BITS_ERRNO_H = 1;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int _BITS_SIGNUM_GENERIC_H = 1;

const int SIGINT = 2;

const int SIGILL = 4;

const int SIGABRT = 6;

const int SIGFPE = 8;

const int SIGSEGV = 11;

const int SIGTERM = 15;

const int SIGHUP = 1;

const int SIGQUIT = 3;

const int SIGTRAP = 5;

const int SIGKILL = 9;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGIO = 29;

const int SIGIOT = 6;

const int SIGCLD = 17;

const int _BITS_SIGNUM_ARCH_H = 1;

const int SIGSTKFLT = 16;

const int SIGPWR = 30;

const int SIGBUS = 7;

const int SIGSYS = 31;

const int SIGURG = 23;

const int SIGSTOP = 19;

const int SIGTSTP = 20;

const int SIGCONT = 18;

const int SIGCHLD = 17;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGPOLL = 29;

const int SIGXFSZ = 25;

const int SIGXCPU = 24;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGUSR1 = 10;

const int SIGUSR2 = 12;

const int SIGWINCH = 28;

const int __SIGRTMIN = 32;

const int __SIGRTMAX = 64;

const int _NSIG = 65;

const int __sig_atomic_t_defined = 1;

const int __siginfo_t_defined = 1;

const int __SI_MAX_SIZE = 128;

const int __SI_PAD_SIZE = 28;

const int _BITS_SIGINFO_ARCH_H = 1;

const int __SI_ERRNO_THEN_CODE = 1;

const int __SI_HAVE_SIGSYS = 1;

const int _BITS_SIGINFO_CONSTS_H = 1;

const int __SI_ASYNCIO_AFTER_SIGIO = 1;

const int SI_ASYNCNL1 = -60;

const int SI_DETHREAD1 = -7;

const int SI_TKILL1 = -6;

const int SI_SIGIO1 = -5;

const int SI_ASYNCIO1 = -4;

const int SI_MESGQ1 = -3;

const int SI_TIMER1 = -2;

const int SI_QUEUE1 = -1;

const int SI_USER1 = 0;

const int SI_KERNEL1 = 128;

const int ILL_ILLOPC1 = 1;

const int ILL_ILLOPN1 = 2;

const int ILL_ILLADR1 = 3;

const int ILL_ILLTRP1 = 4;

const int ILL_PRVOPC1 = 5;

const int ILL_PRVREG1 = 6;

const int ILL_COPROC1 = 7;

const int ILL_BADSTK1 = 8;

const int ILL_BADIADDR1 = 9;

const int FPE_INTDIV1 = 1;

const int FPE_INTOVF1 = 2;

const int FPE_FLTDIV1 = 3;

const int FPE_FLTOVF1 = 4;

const int FPE_FLTUND1 = 5;

const int FPE_FLTRES1 = 6;

const int FPE_FLTINV1 = 7;

const int FPE_FLTSUB1 = 8;

const int FPE_FLTUNK1 = 14;

const int FPE_CONDTRAP1 = 15;

const int SEGV_MAPERR1 = 1;

const int SEGV_ACCERR1 = 2;

const int SEGV_BNDERR1 = 3;

const int SEGV_PKUERR1 = 4;

const int SEGV_ACCADI1 = 5;

const int SEGV_ADIDERR1 = 6;

const int SEGV_ADIPERR1 = 7;

const int SEGV_MTEAERR1 = 8;

const int SEGV_MTESERR1 = 9;

const int BUS_ADRALN1 = 1;

const int BUS_ADRERR1 = 2;

const int BUS_OBJERR1 = 3;

const int BUS_MCEERR_AR1 = 4;

const int BUS_MCEERR_AO1 = 5;

const int CLD_EXITED1 = 1;

const int CLD_KILLED1 = 2;

const int CLD_DUMPED1 = 3;

const int CLD_TRAPPED1 = 4;

const int CLD_STOPPED1 = 5;

const int CLD_CONTINUED1 = 6;

const int POLL_IN1 = 1;

const int POLL_OUT1 = 2;

const int POLL_MSG1 = 3;

const int POLL_ERR1 = 4;

const int POLL_PRI1 = 5;

const int POLL_HUP1 = 6;

const int __sigevent_t_defined = 1;

const int __SIGEV_MAX_SIZE = 64;

const int __SIGEV_PAD_SIZE = 12;

const int _BITS_SIGEVENT_CONSTS_H = 1;

const int SIGEV_SIGNAL1 = 0;

const int SIGEV_NONE1 = 1;

const int SIGEV_THREAD1 = 2;

const int SIGEV_THREAD_ID1 = 4;

const int NSIG = 65;

const int _BITS_SIGACTION_H = 1;

const int SA_NOCLDSTOP = 1;

const int SA_NOCLDWAIT = 2;

const int SA_SIGINFO = 4;

const int SA_ONSTACK = 134217728;

const int SA_RESTART = 268435456;

const int SA_NODEFER = 1073741824;

const int SA_RESETHAND = 2147483648;

const int SA_INTERRUPT = 536870912;

const int SA_NOMASK = 1073741824;

const int SA_ONESHOT = 2147483648;

const int SA_STACK = 134217728;

const int SIG_BLOCK = 0;

const int SIG_UNBLOCK = 1;

const int SIG_SETMASK = 2;

const int _BITS_SIGCONTEXT_H = 1;

const int FP_XSTATE_MAGIC1 = 1179670611;

const int FP_XSTATE_MAGIC2 = 1179670597;

const int FP_XSTATE_MAGIC2_SIZE = 4;

const int __stack_t_defined = 1;

const int _SYS_UCONTEXT_H = 1;

const int __NGREG = 23;

const int NGREG = 23;

const int _BITS_SIGSTACK_H = 1;

const int _BITS_SS_FLAGS_H = 1;

const int SS_ONSTACK1 = 1;

const int SS_DISABLE1 = 2;

const int __sigstack_defined = 1;

const int _BITS_SIGTHREAD_H = 1;

const int _FCNTL_H = 1;

const int __O_LARGEFILE = 0;

const int F_GETLK64 = 5;

const int F_SETLK64 = 6;

const int F_SETLKW64 = 7;

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_CREAT = 64;

const int O_EXCL = 128;

const int O_NOCTTY = 256;

const int O_TRUNC = 512;

const int O_APPEND = 1024;

const int O_NONBLOCK = 2048;

const int O_NDELAY = 2048;

const int O_SYNC = 1052672;

const int O_FSYNC = 1052672;

const int O_ASYNC = 8192;

const int __O_DIRECTORY = 65536;

const int __O_NOFOLLOW = 131072;

const int __O_CLOEXEC = 524288;

const int __O_DIRECT = 16384;

const int __O_NOATIME = 262144;

const int __O_PATH = 2097152;

const int __O_DSYNC = 4096;

const int __O_TMPFILE = 4259840;

const int F_GETLK = 5;

const int F_SETLK = 6;

const int F_SETLKW = 7;

const int O_DIRECTORY = 65536;

const int O_NOFOLLOW = 131072;

const int O_CLOEXEC = 524288;

const int O_DSYNC = 4096;

const int O_RSYNC = 1052672;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int __F_SETOWN = 8;

const int __F_GETOWN = 9;

const int F_SETOWN = 8;

const int F_GETOWN = 9;

const int __F_SETSIG = 10;

const int __F_GETSIG = 11;

const int __F_SETOWN_EX = 15;

const int __F_GETOWN_EX = 16;

const int F_DUPFD_CLOEXEC = 1030;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 0;

const int F_WRLCK = 1;

const int F_UNLCK = 2;

const int F_EXLCK = 4;

const int F_SHLCK = 8;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int FAPPEND = 1024;

const int FFSYNC = 1052672;

const int FASYNC = 8192;

const int FNONBLOCK = 2048;

const int FNDELAY = 2048;

const int __POSIX_FADV_DONTNEED = 4;

const int __POSIX_FADV_NOREUSE = 5;

const int POSIX_FADV_NORMAL = 0;

const int POSIX_FADV_RANDOM = 1;

const int POSIX_FADV_SEQUENTIAL = 2;

const int POSIX_FADV_WILLNEED = 3;

const int POSIX_FADV_DONTNEED = 4;

const int POSIX_FADV_NOREUSE = 5;

const int AT_FDCWD = -100;

const int AT_SYMLINK_NOFOLLOW = 256;

const int AT_REMOVEDIR = 512;

const int AT_SYMLINK_FOLLOW = 1024;

const int AT_EACCESS = 512;

const int UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H = 1;

const int RESOLVE_NO_XDEV = 1;

const int RESOLVE_NO_MAGICLINKS = 2;

const int RESOLVE_NO_SYMLINKS = 4;

const int RESOLVE_BENEATH = 8;

const int RESOLVE_IN_ROOT = 16;

const int RESOLVE_CACHED = 32;

const int _IOC_NRBITS = 8;

const int _IOC_TYPEBITS = 8;

const int _IOC_SIZEBITS = 14;

const int _IOC_DIRBITS = 2;

const int _IOC_NRMASK = 255;

const int _IOC_TYPEMASK = 255;

const int _IOC_SIZEMASK = 16383;

const int _IOC_DIRMASK = 3;

const int _IOC_NRSHIFT = 0;

const int _IOC_TYPESHIFT = 8;

const int _IOC_SIZESHIFT = 16;

const int _IOC_DIRSHIFT = 30;

const int _IOC_NONE = 0;

const int _IOC_WRITE = 1;

const int _IOC_READ = 2;

const int IOC_IN = 1073741824;

const int IOC_OUT = 2147483648;

const int IOC_INOUT = 3221225472;

const int IOCSIZE_MASK = 1073676288;

const int IOCSIZE_SHIFT = 16;

const int FSCRYPT_POLICY_FLAGS_PAD_4 = 0;

const int FSCRYPT_POLICY_FLAGS_PAD_8 = 1;

const int FSCRYPT_POLICY_FLAGS_PAD_16 = 2;

const int FSCRYPT_POLICY_FLAGS_PAD_32 = 3;

const int FSCRYPT_POLICY_FLAGS_PAD_MASK = 3;

const int FSCRYPT_POLICY_FLAG_DIRECT_KEY = 4;

const int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64 = 8;

const int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32 = 16;

const int FSCRYPT_MODE_AES_256_XTS = 1;

const int FSCRYPT_MODE_AES_256_CTS = 4;

const int FSCRYPT_MODE_AES_128_CBC = 5;

const int FSCRYPT_MODE_AES_128_CTS = 6;

const int FSCRYPT_MODE_SM4_XTS = 7;

const int FSCRYPT_MODE_SM4_CTS = 8;

const int FSCRYPT_MODE_ADIANTUM = 9;

const int FSCRYPT_MODE_AES_256_HCTR2 = 10;

const int FSCRYPT_POLICY_V1 = 0;

const int FSCRYPT_KEY_DESCRIPTOR_SIZE = 8;

const String FSCRYPT_KEY_DESC_PREFIX = 'fscrypt:';

const int FSCRYPT_KEY_DESC_PREFIX_SIZE = 8;

const int FSCRYPT_MAX_KEY_SIZE = 64;

const int FSCRYPT_POLICY_V2 = 2;

const int FSCRYPT_KEY_IDENTIFIER_SIZE = 16;

const int FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR = 1;

const int FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER = 2;

const int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY = 1;

const int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS = 2;

const int FSCRYPT_KEY_STATUS_ABSENT = 1;

const int FSCRYPT_KEY_STATUS_PRESENT = 2;

const int FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED = 3;

const int FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF = 1;

const int FS_IOC_SET_ENCRYPTION_POLICY = 2148296211;

const int FS_IOC_GET_ENCRYPTION_PWSALT = 1074816532;

const int FS_IOC_GET_ENCRYPTION_POLICY = 1074554389;

const int FS_IOC_GET_ENCRYPTION_POLICY_EX = 3221841430;

const int FS_IOC_ADD_ENCRYPTION_KEY = 3226494487;

const int FS_IOC_REMOVE_ENCRYPTION_KEY = 3225445912;

const int FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS = 3225445913;

const int FS_IOC_GET_ENCRYPTION_KEY_STATUS = 3229640218;

const int FS_IOC_GET_ENCRYPTION_NONCE = 2148558363;

const int FS_KEY_DESCRIPTOR_SIZE = 8;

const int FS_POLICY_FLAGS_PAD_4 = 0;

const int FS_POLICY_FLAGS_PAD_8 = 1;

const int FS_POLICY_FLAGS_PAD_16 = 2;

const int FS_POLICY_FLAGS_PAD_32 = 3;

const int FS_POLICY_FLAGS_PAD_MASK = 3;

const int FS_POLICY_FLAG_DIRECT_KEY = 4;

const int FS_POLICY_FLAGS_VALID = 7;

const int FS_ENCRYPTION_MODE_INVALID = 0;

const int FS_ENCRYPTION_MODE_AES_256_XTS = 1;

const int FS_ENCRYPTION_MODE_AES_256_GCM = 2;

const int FS_ENCRYPTION_MODE_AES_256_CBC = 3;

const int FS_ENCRYPTION_MODE_AES_256_CTS = 4;

const int FS_ENCRYPTION_MODE_AES_128_CBC = 5;

const int FS_ENCRYPTION_MODE_AES_128_CTS = 6;

const int FS_ENCRYPTION_MODE_ADIANTUM = 9;

const String FS_KEY_DESC_PREFIX = 'fscrypt:';

const int FS_KEY_DESC_PREFIX_SIZE = 8;

const int FS_MAX_KEY_SIZE = 64;

const int MS_RDONLY = 1;

const int MS_NOSUID = 2;

const int MS_NODEV = 4;

const int MS_NOEXEC = 8;

const int MS_SYNCHRONOUS = 16;

const int MS_REMOUNT = 32;

const int MS_MANDLOCK = 64;

const int MS_DIRSYNC = 128;

const int MS_NOSYMFOLLOW = 256;

const int MS_NOATIME = 1024;

const int MS_NODIRATIME = 2048;

const int MS_BIND = 4096;

const int MS_MOVE = 8192;

const int MS_REC = 16384;

const int MS_VERBOSE = 32768;

const int MS_SILENT = 32768;

const int MS_POSIXACL = 65536;

const int MS_UNBINDABLE = 131072;

const int MS_PRIVATE = 262144;

const int MS_SLAVE = 524288;

const int MS_SHARED = 1048576;

const int MS_RELATIME = 2097152;

const int MS_KERNMOUNT = 4194304;

const int MS_I_VERSION = 8388608;

const int MS_STRICTATIME = 16777216;

const int MS_LAZYTIME = 33554432;

const int MS_SUBMOUNT = 67108864;

const int MS_NOREMOTELOCK = 134217728;

const int MS_NOSEC = 268435456;

const int MS_BORN = 536870912;

const int MS_ACTIVE = 1073741824;

const int MS_NOUSER = -2147483648;

const int MS_RMT_MASK = 41943121;

const int MS_MGC_VAL = 3236757504;

const int MS_MGC_MSK = 4294901760;

const int OPEN_TREE_CLONE = 1;

const int OPEN_TREE_CLOEXEC = 524288;

const int MOVE_MOUNT_F_SYMLINKS = 1;

const int MOVE_MOUNT_F_AUTOMOUNTS = 2;

const int MOVE_MOUNT_F_EMPTY_PATH = 4;

const int MOVE_MOUNT_T_SYMLINKS = 16;

const int MOVE_MOUNT_T_AUTOMOUNTS = 32;

const int MOVE_MOUNT_T_EMPTY_PATH = 64;

const int MOVE_MOUNT_SET_GROUP = 256;

const int MOVE_MOUNT__MASK = 375;

const int FSOPEN_CLOEXEC = 1;

const int FSPICK_CLOEXEC = 1;

const int FSPICK_SYMLINK_NOFOLLOW = 2;

const int FSPICK_NO_AUTOMOUNT = 4;

const int FSPICK_EMPTY_PATH = 8;

const int FSMOUNT_CLOEXEC = 1;

const int MOUNT_ATTR_RDONLY = 1;

const int MOUNT_ATTR_NOSUID = 2;

const int MOUNT_ATTR_NODEV = 4;

const int MOUNT_ATTR_NOEXEC = 8;

const int MOUNT_ATTR__ATIME = 112;

const int MOUNT_ATTR_RELATIME = 0;

const int MOUNT_ATTR_NOATIME = 16;

const int MOUNT_ATTR_STRICTATIME = 32;

const int MOUNT_ATTR_NODIRATIME = 128;

const int MOUNT_ATTR_IDMAP = 1048576;

const int MOUNT_ATTR_NOSYMFOLLOW = 2097152;

const int MOUNT_ATTR_SIZE_VER0 = 32;

const int INR_OPEN_CUR = 1024;

const int INR_OPEN_MAX = 4096;

const int BLOCK_SIZE_BITS = 10;

const int BLOCK_SIZE = 1024;

const int SEEK_DATA = 3;

const int SEEK_HOLE = 4;

const int SEEK_MAX = 4;

const int RENAME_NOREPLACE = 1;

const int RENAME_EXCHANGE = 2;

const int RENAME_WHITEOUT = 4;

const int FILE_DEDUPE_RANGE_SAME = 0;

const int FILE_DEDUPE_RANGE_DIFFERS = 1;

const int NR_FILE = 8192;

const int FS_XFLAG_REALTIME = 1;

const int FS_XFLAG_PREALLOC = 2;

const int FS_XFLAG_IMMUTABLE = 8;

const int FS_XFLAG_APPEND = 16;

const int FS_XFLAG_SYNC = 32;

const int FS_XFLAG_NOATIME = 64;

const int FS_XFLAG_NODUMP = 128;

const int FS_XFLAG_RTINHERIT = 256;

const int FS_XFLAG_PROJINHERIT = 512;

const int FS_XFLAG_NOSYMLINKS = 1024;

const int FS_XFLAG_EXTSIZE = 2048;

const int FS_XFLAG_EXTSZINHERIT = 4096;

const int FS_XFLAG_NODEFRAG = 8192;

const int FS_XFLAG_FILESTREAM = 16384;

const int FS_XFLAG_DAX = 32768;

const int FS_XFLAG_COWEXTSIZE = 65536;

const int FS_XFLAG_HASATTR = 2147483648;

const int BLKROSET = 4701;

const int BLKROGET = 4702;

const int BLKRRPART = 4703;

const int BLKGETSIZE = 4704;

const int BLKFLSBUF = 4705;

const int BLKRASET = 4706;

const int BLKRAGET = 4707;

const int BLKFRASET = 4708;

const int BLKFRAGET = 4709;

const int BLKSECTSET = 4710;

const int BLKSECTGET = 4711;

const int BLKSSZGET = 4712;

const int BLKBSZGET = 2148012656;

const int BLKBSZSET = 1074270833;

const int BLKGETSIZE64 = 2148012658;

const int BLKTRACESTART = 4724;

const int BLKTRACESTOP = 4725;

const int BLKTRACETEARDOWN = 4726;

const int BLKDISCARD = 4727;

const int BLKIOMIN = 4728;

const int BLKIOOPT = 4729;

const int BLKALIGNOFF = 4730;

const int BLKPBSZGET = 4731;

const int BLKDISCARDZEROES = 4732;

const int BLKSECDISCARD = 4733;

const int BLKROTATIONAL = 4734;

const int BLKZEROOUT = 4735;

const int BLKGETDISKSEQ = 2148012672;

const int BMAP_IOCTL = 1;

const int FIBMAP = 1;

const int FIGETBSZ = 2;

const int FIFREEZE = 3221510263;

const int FITHAW = 3221510264;

const int FITRIM = 3222820985;

const int FICLONE = 1074041865;

const int FICLONERANGE = 1075876877;

const int FIDEDUPERANGE = 3222836278;

const int FSLABEL_MAX = 256;

const int FS_IOC_GETFLAGS = 2148034049;

const int FS_IOC_SETFLAGS = 1074292226;

const int FS_IOC_GETVERSION = 2148038145;

const int FS_IOC_SETVERSION = 1074296322;

const int FS_IOC32_GETFLAGS = 2147771905;

const int FS_IOC32_SETFLAGS = 1074030082;

const int FS_IOC32_GETVERSION = 2147776001;

const int FS_IOC32_SETVERSION = 1074034178;

const int FS_IOC_FSGETXATTR = 2149341215;

const int FS_IOC_FSSETXATTR = 1075599392;

const int FS_IOC_GETFSLABEL = 2164298801;

const int FS_IOC_SETFSLABEL = 1090556978;

const int FS_SECRM_FL = 1;

const int FS_UNRM_FL = 2;

const int FS_COMPR_FL = 4;

const int FS_SYNC_FL = 8;

const int FS_IMMUTABLE_FL = 16;

const int FS_APPEND_FL = 32;

const int FS_NODUMP_FL = 64;

const int FS_NOATIME_FL = 128;

const int FS_DIRTY_FL = 256;

const int FS_COMPRBLK_FL = 512;

const int FS_NOCOMP_FL = 1024;

const int FS_ENCRYPT_FL = 2048;

const int FS_BTREE_FL = 4096;

const int FS_INDEX_FL = 4096;

const int FS_IMAGIC_FL = 8192;

const int FS_JOURNAL_DATA_FL = 16384;

const int FS_NOTAIL_FL = 32768;

const int FS_DIRSYNC_FL = 65536;

const int FS_TOPDIR_FL = 131072;

const int FS_HUGE_FILE_FL = 262144;

const int FS_EXTENT_FL = 524288;

const int FS_VERITY_FL = 1048576;

const int FS_EA_INODE_FL = 2097152;

const int FS_EOFBLOCKS_FL = 4194304;

const int FS_NOCOW_FL = 8388608;

const int FS_DAX_FL = 33554432;

const int FS_INLINE_DATA_FL = 268435456;

const int FS_PROJINHERIT_FL = 536870912;

const int FS_CASEFOLD_FL = 1073741824;

const int FS_RESERVED_FL = 2147483648;

const int FS_FL_USER_VISIBLE = 253951;

const int FS_FL_USER_MODIFIABLE = 229631;

const int SYNC_FILE_RANGE_WAIT_BEFORE = 1;

const int SYNC_FILE_RANGE_WRITE = 2;

const int SYNC_FILE_RANGE_WAIT_AFTER = 4;

const int SYNC_FILE_RANGE_WRITE_AND_WAIT = 7;

const int RWF_HIPRI = 1;

const int RWF_DSYNC = 2;

const int RWF_SYNC = 4;

const int RWF_NOWAIT = 8;

const int RWF_APPEND = 16;

const int RWF_SUPPORTED = 31;

const int IORING_FILE_INDEX_ALLOC = 4294967295;

const int IOSQE_FIXED_FILE = 1;

const int IOSQE_IO_DRAIN = 2;

const int IOSQE_IO_LINK = 4;

const int IOSQE_IO_HARDLINK = 8;

const int IOSQE_ASYNC = 16;

const int IOSQE_BUFFER_SELECT = 32;

const int IOSQE_CQE_SKIP_SUCCESS = 64;

const int IORING_SETUP_IOPOLL = 1;

const int IORING_SETUP_SQPOLL = 2;

const int IORING_SETUP_SQ_AFF = 4;

const int IORING_SETUP_CQSIZE = 8;

const int IORING_SETUP_CLAMP = 16;

const int IORING_SETUP_ATTACH_WQ = 32;

const int IORING_SETUP_R_DISABLED = 64;

const int IORING_SETUP_SUBMIT_ALL = 128;

const int IORING_SETUP_COOP_TASKRUN = 256;

const int IORING_SETUP_TASKRUN_FLAG = 512;

const int IORING_SETUP_SQE128 = 1024;

const int IORING_SETUP_CQE32 = 2048;

const int IORING_SETUP_SINGLE_ISSUER = 4096;

const int IORING_SETUP_DEFER_TASKRUN = 8192;

const int IORING_SETUP_NO_MMAP = 16384;

const int IORING_SETUP_REGISTERED_FD_ONLY = 32768;

const int IORING_URING_CMD_FIXED = 1;

const int IORING_FSYNC_DATASYNC = 1;

const int IORING_TIMEOUT_ABS = 1;

const int IORING_TIMEOUT_UPDATE = 2;

const int IORING_TIMEOUT_BOOTTIME = 4;

const int IORING_TIMEOUT_REALTIME = 8;

const int IORING_LINK_TIMEOUT_UPDATE = 16;

const int IORING_TIMEOUT_ETIME_SUCCESS = 32;

const int IORING_TIMEOUT_MULTISHOT = 64;

const int IORING_TIMEOUT_CLOCK_MASK = 12;

const int IORING_TIMEOUT_UPDATE_MASK = 18;

const int SPLICE_F_FD_IN_FIXED = 2147483648;

const int IORING_POLL_ADD_MULTI = 1;

const int IORING_POLL_UPDATE_EVENTS = 2;

const int IORING_POLL_UPDATE_USER_DATA = 4;

const int IORING_POLL_ADD_LEVEL = 8;

const int IORING_ASYNC_CANCEL_ALL = 1;

const int IORING_ASYNC_CANCEL_FD = 2;

const int IORING_ASYNC_CANCEL_ANY = 4;

const int IORING_ASYNC_CANCEL_FD_FIXED = 8;

const int IORING_RECVSEND_POLL_FIRST = 1;

const int IORING_RECV_MULTISHOT = 2;

const int IORING_RECVSEND_FIXED_BUF = 4;

const int IORING_SEND_ZC_REPORT_USAGE = 8;

const int IORING_NOTIF_USAGE_ZC_COPIED = 2147483648;

const int IORING_ACCEPT_MULTISHOT = 1;

const int IORING_MSG_RING_CQE_SKIP = 1;

const int IORING_MSG_RING_FLAGS_PASS = 2;

const int IORING_CQE_F_BUFFER = 1;

const int IORING_CQE_F_MORE = 2;

const int IORING_CQE_F_SOCK_NONEMPTY = 4;

const int IORING_CQE_F_NOTIF = 8;

const int IORING_OFF_SQ_RING = 0;

const int IORING_OFF_CQ_RING = 134217728;

const int IORING_OFF_SQES = 268435456;

const int IORING_OFF_PBUF_RING = 2147483648;

const int IORING_OFF_PBUF_SHIFT = 16;

const int IORING_OFF_MMAP_MASK = 4160749568;

const int IORING_SQ_NEED_WAKEUP = 1;

const int IORING_SQ_CQ_OVERFLOW = 2;

const int IORING_SQ_TASKRUN = 4;

const int IORING_CQ_EVENTFD_DISABLED = 1;

const int IORING_ENTER_GETEVENTS = 1;

const int IORING_ENTER_SQ_WAKEUP = 2;

const int IORING_ENTER_SQ_WAIT = 4;

const int IORING_ENTER_EXT_ARG = 8;

const int IORING_ENTER_REGISTERED_RING = 16;

const int IORING_FEAT_SINGLE_MMAP = 1;

const int IORING_FEAT_NODROP = 2;

const int IORING_FEAT_SUBMIT_STABLE = 4;

const int IORING_FEAT_RW_CUR_POS = 8;

const int IORING_FEAT_CUR_PERSONALITY = 16;

const int IORING_FEAT_FAST_POLL = 32;

const int IORING_FEAT_POLL_32BITS = 64;

const int IORING_FEAT_SQPOLL_NONFIXED = 128;

const int IORING_FEAT_EXT_ARG = 256;

const int IORING_FEAT_NATIVE_WORKERS = 512;

const int IORING_FEAT_RSRC_TAGS = 1024;

const int IORING_FEAT_CQE_SKIP = 2048;

const int IORING_FEAT_LINKED_FILE = 4096;

const int IORING_FEAT_REG_REG_RING = 8192;

const int IORING_RSRC_REGISTER_SPARSE = 1;

const int IORING_REGISTER_FILES_SKIP = -2;

const int IO_URING_OP_SUPPORTED = 1;

const int IO_URING_VERSION_MAJOR = 2;

const int IO_URING_VERSION_MINOR = 5;

const int ATOMIC_BOOL_LOCK_FREE = 2;

const int ATOMIC_CHAR_LOCK_FREE = 2;

const int ATOMIC_CHAR16_T_LOCK_FREE = 2;

const int ATOMIC_CHAR32_T_LOCK_FREE = 2;

const int ATOMIC_WCHAR_T_LOCK_FREE = 2;

const int ATOMIC_SHORT_LOCK_FREE = 2;

const int ATOMIC_INT_LOCK_FREE = 2;

const int ATOMIC_LONG_LOCK_FREE = 2;

const int ATOMIC_LLONG_LOCK_FREE = 2;

const int ATOMIC_POINTER_LOCK_FREE = 2;

const int __NR_io_uring_setup = 425;

const int __NR_io_uring_enter = 426;

const int __NR_io_uring_register = 427;

const int LIBURING_UDATA_TIMEOUT = -1;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int __cookie_io_functions_t_defined = 1;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const String P_tmpdir = '/tmp';

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int _BITS_STDIO_LIM_H = 1;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int INTERACTOR_BUFFER_USED = -1;

const int INTERACTOR_DART_CALLBACK = 1;

const int INTERACTOR_NATIVE_CALLBACK = 2;

const int INTERACTOR_DART_CALL = 4;

const int INTERACTOR_NATIVE_CALL = 8;
